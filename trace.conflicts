cplusplus.y: warning: 327 shift/reduce conflicts [-Wconflicts-sr]
cplusplus.y: warning: 2647 reduce/reduce conflicts [-Wconflicts-rr]
cplusplus.y: warning: reduce/reduce conflict on tokens "decltype", "auto" [-Wcounterexamples]
  Example: IDENTIFIER • "auto"
  First reduce derivation
    decl-specifier-seq
    ↳ 212: decl-specifier                                            decl-specifier-seq
           ↳ 202: defining-type-specifier                            ↳ 210: decl-specifier
                  ↳ 238: type-specifier                                     ↳ 202: defining-type-specifier
                         ↳ 1117: simple-type-specifier                             ↳ 238: type-specifier
                                 ↳ 1000: type-name                                        ↳ 1117: simple-type-specifier
                                         ↳ 1092: class-name                                       ↳ 1003: placeholder-type-specifier
                                                 ↳ 145: IDENTIFIER •                                      ↳ 853: "auto"
  Second reduce derivation
    decl-specifier-seq
    ↳ 210: decl-specifier
           ↳ 202: defining-type-specifier
                  ↳ 238: type-specifier
                         ↳ 1117: simple-type-specifier
                                 ↳ 1003: placeholder-type-specifier
                                         ↳ 852: type-constraint             "auto"
                                                ↳ 1085: concept-name
                                                        ↳ 163: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  Example: IDENTIFIER •
  First reduce derivation
    type-name
    ↳ 1092: class-name
            ↳ 145: IDENTIFIER •
  Second reduce derivation
    type-name
    ↳ 1093: enum-name
            ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  Example: IDENTIFIER • "::"
  First reduce derivation
    nested-name-specifier
    ↳ 660: type-name                   "::"
           ↳ 1092: class-name
                   ↳ 145: IDENTIFIER •
  Second reduce derivation
    nested-name-specifier
    ↳ 661: namespace-name             "::"
           ↳ 658: namespace-alias
                  ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  Example: IDENTIFIER • "::"
  First reduce derivation
    nested-name-specifier
    ↳ 660: type-name                   "::"
           ↳ 1092: class-name
                   ↳ 145: IDENTIFIER •
  Second reduce derivation
    nested-name-specifier
    ↳ 661: namespace-name      "::"
           ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  Example: IDENTIFIER •
  First reduce derivation
    simple-type-specifier
    ↳ 1000: type-name
            ↳ 1092: class-name
                    ↳ 145: IDENTIFIER •
  Second reduce derivation
    simple-type-specifier
    ↳ 1005: template-name
            ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  Example: IDENTIFIER •
  First reduce derivation
    type-name
    ↳ 1092: class-name
            ↳ 145: IDENTIFIER •
  Second reduce derivation
    type-name
    ↳ 1094: typedef-name
            ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens '=', ';', "alignas", '(', ')', "...", '&', ',', '[', '{', "&&", '>', '*' [-Wcounterexamples]
  Example: decl-specifier-seq '(' IDENTIFIER • ')' parameters-and-qualifiers trailing-return-type
  First reduce derivation
    parameter-declaration
    ↳ 819: decl-specifier-seq abstract-declarator
                              ↳ 2: noptr-abstract-declarator                                                                                   parameters-and-qualifiers trailing-return-type
                                   ↳ 709: parameters-and-qualifiers
                                          ↳ 836: '(' parameter-declaration-clause                                                          ')'
                                                     ↳ 830: parameter-declaration-list
                                                            ↳ 834: parameter-declaration
                                                                   ↳ 815: decl-specifier-seq
                                                                          ↳ 210: decl-specifier
                                                                                 ↳ 202: defining-type-specifier
                                                                                        ↳ 238: type-specifier
                                                                                               ↳ 1117: simple-type-specifier
                                                                                                       ↳ 1000: type-name
                                                                                                               ↳ 1092: class-name
                                                                                                                       ↳ 145: IDENTIFIER •
  Second reduce derivation
    parameter-declaration
    ↳ 807: decl-specifier-seq declarator
                              ↳ 230: noptr-declarator                                                parameters-and-qualifiers trailing-return-type
                                     ↳ 732: '(' ptr-declarator                                   ')'
                                                ↳ 895: noptr-declarator
                                                       ↳ 725: declarator-id
                                                              ↳ 232: id-expression
                                                                     ↳ 463: unqualified-id
                                                                            ↳ 1154: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens "decltype", "auto" [-Wcounterexamples]
  Example: IDENTIFIER • "auto"
  First reduce derivation
    decl-specifier-seq
    ↳ 210: decl-specifier
           ↳ 202: defining-type-specifier
                  ↳ 238: type-specifier
                         ↳ 1117: simple-type-specifier
                                 ↳ 1003: placeholder-type-specifier
                                         ↳ 852: type-constraint             "auto"
                                                ↳ 1085: concept-name
                                                        ↳ 163: IDENTIFIER •
  Second reduce derivation
    decl-specifier-seq
    ↳ 212: decl-specifier                                            decl-specifier-seq
           ↳ 202: defining-type-specifier                            ↳ 210: decl-specifier
                  ↳ 238: type-specifier                                     ↳ 202: defining-type-specifier
                         ↳ 1117: simple-type-specifier                             ↳ 238: type-specifier
                                 ↳ 1000: type-name                                        ↳ 1117: simple-type-specifier
                                         ↳ 1093: enum-name                                        ↳ 1003: placeholder-type-specifier
                                                 ↳ 297: IDENTIFIER •                                      ↳ 853: "auto"
cplusplus.y: warning: reduce/reduce conflict on tokens "decltype", '<', "auto" [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: IDENTIFIER • "decltype" '(' "auto" ')' declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1117: simple-type-specifier
                                                                   ↳ 1003: placeholder-type-specifier
                                                                           ↳ 854: type-constraint             "decltype" '(' "auto" ')'
                                                                                  ↳ 1085: concept-name
                                                                                          ↳ 163: IDENTIFIER •
  Second example: IDENTIFIER • "decltype" '(' expression ')' "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                        declarator                                                                               function-body
                                      ↳ 210: decl-specifier                                     ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                            ↳ 896: ptr-operator                                                ptr-declarator
                                                    ↳ 238: type-specifier                                     ↳ 905: nested-name-specifier                            '*'
                                                           ↳ 1117: simple-type-specifier                             ↳ 662: decltype-specifier                   "::"
                                                                   ↳ 1005: template-name                                    ↳ 233: "decltype" '(' expression ')'
                                                                           ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens "decltype", "auto" [-Wcounterexamples]
  Example: IDENTIFIER • "auto"
  First reduce derivation
    decl-specifier-seq
    ↳ 210: decl-specifier
           ↳ 202: defining-type-specifier
                  ↳ 238: type-specifier
                         ↳ 1117: simple-type-specifier
                                 ↳ 1003: placeholder-type-specifier
                                         ↳ 852: type-constraint             "auto"
                                                ↳ 1085: concept-name
                                                        ↳ 163: IDENTIFIER •
  Second reduce derivation
    decl-specifier-seq
    ↳ 212: decl-specifier                                             decl-specifier-seq
           ↳ 202: defining-type-specifier                             ↳ 210: decl-specifier
                  ↳ 238: type-specifier                                      ↳ 202: defining-type-specifier
                         ↳ 1117: simple-type-specifier                              ↳ 238: type-specifier
                                 ↳ 1000: type-name                                         ↳ 1117: simple-type-specifier
                                         ↳ 1094: typedef-name                                      ↳ 1003: placeholder-type-specifier
                                                 ↳ 1124: IDENTIFIER •                                      ↳ 853: "auto"
cplusplus.y: warning: reduce/reduce conflict on token '<' [-Wcounterexamples]
  First example: IDENTIFIER • '<' '>' "auto" declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1117: simple-type-specifier
                                                                   ↳ 1003: placeholder-type-specifier
                                                                           ↳ 852: type-constraint                     "auto"
                                                                                  ↳ 1087: concept-name        '<' '>'
                                                                                          ↳ 163: IDENTIFIER •
  Second example: declarator "requires" '(' IDENTIFIER • '<' "..." ')' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                    function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                          fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                  ↳ 374: '<'
                                                                                                          ↳ 1130: postfix-expression
                                                                                                                  ↳ 860: primary-expression
                                                                                                                         ↳ 886: id-expression
                                                                                                                                ↳ 463: unqualified-id
                                                                                                                                       ↳ 1154: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  Example: IDENTIFIER • "::"
  First reduce derivation
    nested-name-specifier
    ↳ 660: type-name                   "::"
           ↳ 1093: enum-name
                   ↳ 297: IDENTIFIER •
  Second reduce derivation
    nested-name-specifier
    ↳ 661: namespace-name             "::"
           ↳ 658: namespace-alias
                  ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  Example: IDENTIFIER • "::"
  First reduce derivation
    nested-name-specifier
    ↳ 660: type-name                   "::"
           ↳ 1093: enum-name
                   ↳ 297: IDENTIFIER •
  Second reduce derivation
    nested-name-specifier
    ↳ 661: namespace-name      "::"
           ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  Example: IDENTIFIER •
  First reduce derivation
    simple-type-specifier
    ↳ 1000: type-name
            ↳ 1093: enum-name
                    ↳ 297: IDENTIFIER •
  Second reduce derivation
    simple-type-specifier
    ↳ 1005: template-name
            ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  Example: IDENTIFIER •
  First reduce derivation
    type-name
    ↳ 1093: enum-name
            ↳ 297: IDENTIFIER •
  Second reduce derivation
    type-name
    ↳ 1094: typedef-name
            ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens '=', ';', "alignas", '(', ')', "...", '&', ',', '[', '{', "&&", '>', '*' [-Wcounterexamples]
  Example: decl-specifier-seq '(' IDENTIFIER • ')' parameters-and-qualifiers trailing-return-type
  First reduce derivation
    parameter-declaration
    ↳ 819: decl-specifier-seq abstract-declarator
                              ↳ 2: noptr-abstract-declarator                                                                                   parameters-and-qualifiers trailing-return-type
                                   ↳ 709: parameters-and-qualifiers
                                          ↳ 836: '(' parameter-declaration-clause                                                          ')'
                                                     ↳ 830: parameter-declaration-list
                                                            ↳ 834: parameter-declaration
                                                                   ↳ 815: decl-specifier-seq
                                                                          ↳ 210: decl-specifier
                                                                                 ↳ 202: defining-type-specifier
                                                                                        ↳ 238: type-specifier
                                                                                               ↳ 1117: simple-type-specifier
                                                                                                       ↳ 1000: type-name
                                                                                                               ↳ 1093: enum-name
                                                                                                                       ↳ 297: IDENTIFIER •
  Second reduce derivation
    parameter-declaration
    ↳ 807: decl-specifier-seq declarator
                              ↳ 230: noptr-declarator                                                parameters-and-qualifiers trailing-return-type
                                     ↳ 732: '(' ptr-declarator                                   ')'
                                                ↳ 895: noptr-declarator
                                                       ↳ 725: declarator-id
                                                              ↳ 232: id-expression
                                                                     ↳ 463: unqualified-id
                                                                            ↳ 1154: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  Example: IDENTIFIER •
  First reduce derivation
    namespace-name
    ↳ 658: namespace-alias
           ↳ 651: IDENTIFIER •
  Second reduce derivation
    namespace-name
    ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
Productions leading up to the conflict state found.  Still finding a possible unifying counterexample...time limit exceeded: 6.000000
  First example: decl-specifier-seq
  First reduce derivation
    decl-specifier-seq
    ↳ 212: decl-specifier-seq
  Second example: type-name
  Second reduce derivation
    decl-specifier-seq
    ↳ 212: type-name decl-specifier-seq
                     ↳ 210: ε
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  Example: IDENTIFIER • "::"
  First reduce derivation
    nested-name-specifier
    ↳ 661: namespace-name             "::"
           ↳ 658: namespace-alias
                  ↳ 651: IDENTIFIER •
  Second reduce derivation
    nested-name-specifier
    ↳ 660: type-name                    "::"
           ↳ 1094: typedef-name
                   ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
Productions leading up to the conflict state found.  Still finding a possible unifying counterexample...time limit exceeded: 6.000000
  First example: decl-specifier-seq
  First reduce derivation
    decl-specifier-seq
    ↳ 212: decl-specifier-seq
  Second example: type-name
  Second reduce derivation
    decl-specifier-seq
    ↳ 212: type-name decl-specifier-seq
                     ↳ 210: ε
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  Example: IDENTIFIER • "::"
  First reduce derivation
    nested-name-specifier
    ↳ 661: namespace-name      "::"
           ↳ 657: IDENTIFIER •
  Second reduce derivation
    nested-name-specifier
    ↳ 660: type-name                    "::"
           ↳ 1094: typedef-name
                   ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  Example: IDENTIFIER •
  First reduce derivation
    simple-type-specifier
    ↳ 1005: template-name
            ↳ 1066: IDENTIFIER •
  Second reduce derivation
    simple-type-specifier
    ↳ 1000: type-name
            ↳ 1094: typedef-name
                    ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens '=', ';', "alignas", '(', ')', "...", '&', ',', '[', '{', "&&", '<', '>', '*' [-Wcounterexamples]
  Example: decl-specifier-seq '(' IDENTIFIER • ')' parameters-and-qualifiers trailing-return-type
  First reduce derivation
    parameter-declaration
    ↳ 819: decl-specifier-seq abstract-declarator
                              ↳ 2: noptr-abstract-declarator                                                                            parameters-and-qualifiers trailing-return-type
                                   ↳ 709: parameters-and-qualifiers
                                          ↳ 836: '(' parameter-declaration-clause                                                   ')'
                                                     ↳ 830: parameter-declaration-list
                                                            ↳ 834: parameter-declaration
                                                                   ↳ 815: decl-specifier-seq
                                                                          ↳ 210: decl-specifier
                                                                                 ↳ 202: defining-type-specifier
                                                                                        ↳ 238: type-specifier
                                                                                               ↳ 1117: simple-type-specifier
                                                                                                       ↳ 1005: template-name
                                                                                                               ↳ 1066: IDENTIFIER •
  Second reduce derivation
    parameter-declaration
    ↳ 807: decl-specifier-seq declarator
                              ↳ 230: noptr-declarator                                                parameters-and-qualifiers trailing-return-type
                                     ↳ 732: '(' ptr-declarator                                   ')'
                                                ↳ 895: noptr-declarator
                                                       ↳ 725: declarator-id
                                                              ↳ 232: id-expression
                                                                     ↳ 463: unqualified-id
                                                                            ↳ 1154: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens '=', ';', "alignas", '(', ')', "...", '&', ',', '[', '{', "&&", '>', '*' [-Wcounterexamples]
  Example: decl-specifier-seq '(' IDENTIFIER • ')' parameters-and-qualifiers trailing-return-type
  First reduce derivation
    parameter-declaration
    ↳ 819: decl-specifier-seq abstract-declarator
                              ↳ 2: noptr-abstract-declarator                                                                                    parameters-and-qualifiers trailing-return-type
                                   ↳ 709: parameters-and-qualifiers
                                          ↳ 836: '(' parameter-declaration-clause                                                           ')'
                                                     ↳ 830: parameter-declaration-list
                                                            ↳ 834: parameter-declaration
                                                                   ↳ 815: decl-specifier-seq
                                                                          ↳ 210: decl-specifier
                                                                                 ↳ 202: defining-type-specifier
                                                                                        ↳ 238: type-specifier
                                                                                               ↳ 1117: simple-type-specifier
                                                                                                       ↳ 1000: type-name
                                                                                                               ↳ 1094: typedef-name
                                                                                                                       ↳ 1124: IDENTIFIER •
  Second reduce derivation
    parameter-declaration
    ↳ 807: decl-specifier-seq declarator
                              ↳ 230: noptr-declarator                                                parameters-and-qualifiers trailing-return-type
                                     ↳ 732: '(' ptr-declarator                                   ')'
                                                ↳ 895: noptr-declarator
                                                       ↳ 725: declarator-id
                                                              ↳ 232: id-expression
                                                                     ↳ 463: unqualified-id
                                                                            ↳ 1154: IDENTIFIER •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: type-specifier-seq '&' • "alignas" '(' type-id ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                     ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                         parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                             attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                        conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 902: '&' attribute-specifier-seq
                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                   ↳ 52: alignment-specifier
                                                                                                                                         ↳ 15: • "alignas" '(' type-id ')'
  Second example: "operator" type-specifier-seq '&' • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 901: '&' •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: type-specifier-seq '&' • "alignas" '(' type-id "..." ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                           ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                               parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                   attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                              conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 902: '&' attribute-specifier-seq
                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                   ↳ 52: alignment-specifier
                                                                                                                                         ↳ 16: • "alignas" '(' type-id "..." ')'
  Second example: "operator" type-specifier-seq '&' • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 901: '&' •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: type-specifier-seq '&' • "alignas" '(' constant-expression ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                 ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                     parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                         attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                                    conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 902: '&' attribute-specifier-seq
                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                   ↳ 52: alignment-specifier
                                                                                                                                         ↳ 17: • "alignas" '(' constant-expression ')'
  Second example: "operator" type-specifier-seq '&' • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 901: '&' •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: type-specifier-seq '&' • "alignas" '(' constant-expression "..." ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                               attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                                          conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 902: '&' attribute-specifier-seq
                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                   ↳ 52: alignment-specifier
                                                                                                                                         ↳ 18: • "alignas" '(' constant-expression "..." ')'
  Second example: "operator" type-specifier-seq '&' • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 901: '&' •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: "using" IDENTIFIER defining-type-specifier-seq '&' • '[' '[' attribute-list ']' ']' abstract-pack-declarator defining-type-id ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER defining-type-id                                                                                                              defining-type-id ';'
                                                               ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                  ↳ 4: abstract-pack-declarator
                                                                                                       ↳ 6: ptr-operator                                            abstract-pack-declarator
                                                                                                            ↳ 902: '&' attribute-specifier-seq
                                                                                                                       ↳ 54: attribute-specifier
                                                                                                                             ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq '&' • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                             ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator ptr-abstract-declarator
                                                                                                                  ↳ 901: '&' • ↳ 892: noptr-abstract-declarator
                                                                                                                                      ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: "using" IDENTIFIER defining-type-specifier-seq '&' • '[' '[' attribute-using-prefix attribute-list ']' ']' abstract-pack-declarator defining-type-id ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER defining-type-id                                                                                                                                     defining-type-id ';'
                                                               ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                  ↳ 4: abstract-pack-declarator
                                                                                                       ↳ 6: ptr-operator                                                                   abstract-pack-declarator
                                                                                                            ↳ 902: '&' attribute-specifier-seq
                                                                                                                       ↳ 54: attribute-specifier
                                                                                                                             ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq '&' • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                             ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator ptr-abstract-declarator
                                                                                                                  ↳ 901: '&' • ↳ 892: noptr-abstract-declarator
                                                                                                                                      ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: type-specifier-seq "&&" • "alignas" '(' type-id ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                      ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                          parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                              attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                         conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 904: "&&" attribute-specifier-seq
                                                                                                                              ↳ 54: attribute-specifier
                                                                                                                                    ↳ 52: alignment-specifier
                                                                                                                                          ↳ 15: • "alignas" '(' type-id ')'
  Second example: "operator" type-specifier-seq "&&" • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 903: "&&" •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: type-specifier-seq "&&" • "alignas" '(' type-id "..." ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                            ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                    attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                               conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 904: "&&" attribute-specifier-seq
                                                                                                                              ↳ 54: attribute-specifier
                                                                                                                                    ↳ 52: alignment-specifier
                                                                                                                                          ↳ 16: • "alignas" '(' type-id "..." ')'
  Second example: "operator" type-specifier-seq "&&" • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 903: "&&" •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: type-specifier-seq "&&" • "alignas" '(' constant-expression ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                  ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                      parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                          attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                                     conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 904: "&&" attribute-specifier-seq
                                                                                                                              ↳ 54: attribute-specifier
                                                                                                                                    ↳ 52: alignment-specifier
                                                                                                                                          ↳ 17: • "alignas" '(' constant-expression ')'
  Second example: "operator" type-specifier-seq "&&" • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 903: "&&" •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: type-specifier-seq "&&" • "alignas" '(' constant-expression "..." ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                        ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                            parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                                attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                                           conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 904: "&&" attribute-specifier-seq
                                                                                                                              ↳ 54: attribute-specifier
                                                                                                                                    ↳ 52: alignment-specifier
                                                                                                                                          ↳ 18: • "alignas" '(' constant-expression "..." ')'
  Second example: "operator" type-specifier-seq "&&" • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 903: "&&" •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: "using" IDENTIFIER defining-type-specifier-seq "&&" • '[' '[' attribute-list ']' ']' abstract-pack-declarator defining-type-id ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER defining-type-id                                                                                                               defining-type-id ';'
                                                               ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                  ↳ 4: abstract-pack-declarator
                                                                                                       ↳ 6: ptr-operator                                             abstract-pack-declarator
                                                                                                            ↳ 904: "&&" attribute-specifier-seq
                                                                                                                        ↳ 54: attribute-specifier
                                                                                                                              ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq "&&" • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                              ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator  ptr-abstract-declarator
                                                                                                                  ↳ 903: "&&" • ↳ 892: noptr-abstract-declarator
                                                                                                                                       ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: "using" IDENTIFIER defining-type-specifier-seq "&&" • '[' '[' attribute-using-prefix attribute-list ']' ']' abstract-pack-declarator defining-type-id ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER defining-type-id                                                                                                                                      defining-type-id ';'
                                                               ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                  ↳ 4: abstract-pack-declarator
                                                                                                       ↳ 6: ptr-operator                                                                    abstract-pack-declarator
                                                                                                            ↳ 904: "&&" attribute-specifier-seq
                                                                                                                        ↳ 54: attribute-specifier
                                                                                                                              ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq "&&" • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                              ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator  ptr-abstract-declarator
                                                                                                                  ↳ 903: "&&" • ↳ 892: noptr-abstract-declarator
                                                                                                                                       ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  Example: "enum" • IDENTIFIER ';'
  Shift derivation
    block-declaration
    ↳ 95: simple-declaration
          ↳ 977: decl-specifier-seq                                             ';'
                 ↳ 210: decl-specifier
                        ↳ 202: defining-type-specifier
                               ↳ 238: type-specifier
                                      ↳ 1118: elaborated-type-specifier
                                              ↳ 274: elaborated-enum-specifier
                                                     ↳ 265: "enum" • IDENTIFIER
  Reduce derivation
    block-declaration
    ↳ 103: opaque-enum-declaration
           ↳ 755: enum-key        enum-head-name    ';'
                  ↳ 294: "enum" • ↳ 293: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  Example: "enum" • IDENTIFIER "::" IDENTIFIER ';'
  Shift derivation
    block-declaration
    ↳ 95: simple-declaration
          ↳ 977: decl-specifier-seq                                                                                   ';'
                 ↳ 210: decl-specifier
                        ↳ 202: defining-type-specifier
                               ↳ 238: type-specifier
                                      ↳ 1118: elaborated-type-specifier
                                              ↳ 274: elaborated-enum-specifier
                                                     ↳ 266: "enum" nested-name-specifier                   IDENTIFIER
                                                                   ↳ 660: type-name                   "::"
                                                                          ↳ 1092: class-name
                                                                                  ↳ 145: • IDENTIFIER
  Reduce derivation
    block-declaration
    ↳ 103: opaque-enum-declaration
           ↳ 755: enum-key        enum-head-name                                  ';'
                  ↳ 294: "enum" • ↳ 292: nested-name-specifier         IDENTIFIER
                                         ↳ 661: namespace-name    "::"
                                                ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token "decltype" [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: "enum" • "decltype" '(' expression ')' "::" IDENTIFIER declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                              declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 274: elaborated-enum-specifier
                                                                          ↳ 266: "enum" nested-name-specifier                              IDENTIFIER
                                                                                        ↳ 662: decltype-specifier                     "::"
                                                                                               ↳ 233: • "decltype" '(' expression ')'
  Second example: "enum" • "decltype" '(' expression ')' "::" IDENTIFIER ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key        enum-head-name                                                     ';'
                                             ↳ 294: "enum" • ↳ 292: nested-name-specifier                            IDENTIFIER
                                                                    ↳ 662: decltype-specifier                   "::"
                                                                           ↳ 233: "decltype" '(' expression ')'
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  Example: "enum" • IDENTIFIER "::" IDENTIFIER ';'
  Shift derivation
    block-declaration
    ↳ 95: simple-declaration
          ↳ 977: decl-specifier-seq                                                                                   ';'
                 ↳ 210: decl-specifier
                        ↳ 202: defining-type-specifier
                               ↳ 238: type-specifier
                                      ↳ 1118: elaborated-type-specifier
                                              ↳ 274: elaborated-enum-specifier
                                                     ↳ 266: "enum" nested-name-specifier                   IDENTIFIER
                                                                   ↳ 660: type-name                   "::"
                                                                          ↳ 1093: enum-name
                                                                                  ↳ 297: • IDENTIFIER
  Reduce derivation
    block-declaration
    ↳ 103: opaque-enum-declaration
           ↳ 755: enum-key        enum-head-name                                  ';'
                  ↳ 294: "enum" • ↳ 292: nested-name-specifier         IDENTIFIER
                                         ↳ 661: namespace-name    "::"
                                                ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  Example: "enum" • IDENTIFIER "::" IDENTIFIER ';'
  Shift derivation
    block-declaration
    ↳ 95: simple-declaration
          ↳ 977: decl-specifier-seq                                                                                  ';'
                 ↳ 210: decl-specifier
                        ↳ 202: defining-type-specifier
                               ↳ 238: type-specifier
                                      ↳ 1118: elaborated-type-specifier
                                              ↳ 274: elaborated-enum-specifier
                                                     ↳ 266: "enum" nested-name-specifier                  IDENTIFIER
                                                                   ↳ 661: namespace-name             "::"
                                                                          ↳ 658: namespace-alias
                                                                                 ↳ 651: • IDENTIFIER
  Reduce derivation
    block-declaration
    ↳ 103: opaque-enum-declaration
           ↳ 755: enum-key        enum-head-name                                  ';'
                  ↳ 294: "enum" • ↳ 292: nested-name-specifier         IDENTIFIER
                                         ↳ 661: namespace-name    "::"
                                                ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  Example: "enum" • IDENTIFIER "::" IDENTIFIER ';'
  Shift derivation
    block-declaration
    ↳ 95: simple-declaration
          ↳ 977: decl-specifier-seq                                                                           ';'
                 ↳ 210: decl-specifier
                        ↳ 202: defining-type-specifier
                               ↳ 238: type-specifier
                                      ↳ 1118: elaborated-type-specifier
                                              ↳ 274: elaborated-enum-specifier
                                                     ↳ 266: "enum" nested-name-specifier           IDENTIFIER
                                                                   ↳ 661: namespace-name      "::"
                                                                          ↳ 657: • IDENTIFIER
  Reduce derivation
    block-declaration
    ↳ 103: opaque-enum-declaration
           ↳ 755: enum-key        enum-head-name                                  ';'
                  ↳ 294: "enum" • ↳ 292: nested-name-specifier         IDENTIFIER
                                         ↳ 661: namespace-name    "::"
                                                ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  Example: "enum" • "::" IDENTIFIER ';'
  Shift derivation
    block-declaration
    ↳ 95: simple-declaration
          ↳ 977: decl-specifier-seq                                                                 ';'
                 ↳ 210: decl-specifier
                        ↳ 202: defining-type-specifier
                               ↳ 238: type-specifier
                                      ↳ 1118: elaborated-type-specifier
                                              ↳ 274: elaborated-enum-specifier
                                                     ↳ 266: "enum" nested-name-specifier IDENTIFIER
                                                                   ↳ 659: • "::"
  Reduce derivation
    block-declaration
    ↳ 103: opaque-enum-declaration
           ↳ 755: enum-key        enum-head-name                          ';'
                  ↳ 294: "enum" • ↳ 292: nested-name-specifier IDENTIFIER
                                         ↳ 659: "::"
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: "enum" • IDENTIFIER '<' '>' "::" IDENTIFIER declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                          declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 274: elaborated-enum-specifier
                                                                          ↳ 266: "enum" nested-name-specifier                                          IDENTIFIER
                                                                                        ↳ 660: type-name                                          "::"
                                                                                               ↳ 1092: class-name
                                                                                                       ↳ 146: simple-template-id
                                                                                                              ↳ 997: template-name        '<' '>'
                                                                                                                     ↳ 1066: • IDENTIFIER
  Second example: "enum" • IDENTIFIER ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key        enum-head-name    ';'
                                             ↳ 294: "enum" • ↳ 293: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  Example: "enum" • IDENTIFIER "::" IDENTIFIER ';'
  Shift derivation
    block-declaration
    ↳ 95: simple-declaration
          ↳ 977: decl-specifier-seq                                                                                    ';'
                 ↳ 210: decl-specifier
                        ↳ 202: defining-type-specifier
                               ↳ 238: type-specifier
                                      ↳ 1118: elaborated-type-specifier
                                              ↳ 274: elaborated-enum-specifier
                                                     ↳ 266: "enum" nested-name-specifier                    IDENTIFIER
                                                                   ↳ 660: type-name                    "::"
                                                                          ↳ 1094: typedef-name
                                                                                  ↳ 1124: • IDENTIFIER
  Reduce derivation
    block-declaration
    ↳ 103: opaque-enum-declaration
           ↳ 755: enum-key        enum-head-name                                  ';'
                  ↳ 294: "enum" • ↳ 292: nested-name-specifier         IDENTIFIER
                                         ↳ 661: namespace-name    "::"
                                                ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: "explicit" • '(' constant-expression ')' template-name '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 217: deduction-guide
                               ↳ 234: explicit-specifier                              template-name '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                      ↳ 325: "explicit" • '(' constant-expression ')'
  Second example: "explicit" • '(' ptr-declarator ')' parameters-and-qualifiers trailing-return-type function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                       declarator                                                                          function-body
                                      ↳ 210: decl-specifier                    ↳ 230: noptr-declarator              parameters-and-qualifiers trailing-return-type
                                             ↳ 203: function-specifier                ↳ 732: '(' ptr-declarator ')'
                                                    ↳ 411: explicit-specifier
                                                           ↳ 326: "explicit" •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
time limit exceeded: 6.000000
  First example: type-specifier-seq '*' • "alignas" '(' type-id ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                     ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                         parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                             attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                        conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 898: '*' attribute-specifier-seq
                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                   ↳ 52: alignment-specifier
                                                                                                                                         ↳ 15: • "alignas" '(' type-id ')'
  Second example: "operator" type-specifier-seq '*' • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 897: '*' •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: type-specifier-seq '*' • "alignas" '(' type-id "..." ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                           ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                               parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                   attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                              conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 898: '*' attribute-specifier-seq
                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                   ↳ 52: alignment-specifier
                                                                                                                                         ↳ 16: • "alignas" '(' type-id "..." ')'
  Second example: "operator" type-specifier-seq '*' • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 897: '*' •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: type-specifier-seq '*' • "alignas" '(' constant-expression ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                 ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                     parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                         attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                                    conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 898: '*' attribute-specifier-seq
                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                   ↳ 52: alignment-specifier
                                                                                                                                         ↳ 17: • "alignas" '(' constant-expression ')'
  Second example: "operator" type-specifier-seq '*' • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 897: '*' •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: type-specifier-seq '*' • "alignas" '(' constant-expression "..." ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                               attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                                          conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 898: '*' attribute-specifier-seq
                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                   ↳ 52: alignment-specifier
                                                                                                                                         ↳ 18: • "alignas" '(' constant-expression "..." ')'
  Second example: "operator" type-specifier-seq '*' • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 897: '*' •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "using" IDENTIFIER defining-type-specifier-seq '*' • '[' '[' attribute-list ']' ']' abstract-pack-declarator defining-type-id ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER defining-type-id                                                                                                              defining-type-id ';'
                                                               ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                  ↳ 4: abstract-pack-declarator
                                                                                                       ↳ 6: ptr-operator                                            abstract-pack-declarator
                                                                                                            ↳ 898: '*' attribute-specifier-seq
                                                                                                                       ↳ 54: attribute-specifier
                                                                                                                             ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq '*' • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                             ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator ptr-abstract-declarator
                                                                                                                  ↳ 897: '*' • ↳ 892: noptr-abstract-declarator
                                                                                                                                      ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "using" IDENTIFIER defining-type-specifier-seq '*' • '[' '[' attribute-using-prefix attribute-list ']' ']' abstract-pack-declarator defining-type-id ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER defining-type-id                                                                                                                                     defining-type-id ';'
                                                               ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                  ↳ 4: abstract-pack-declarator
                                                                                                       ↳ 6: ptr-operator                                                                   abstract-pack-declarator
                                                                                                            ↳ 898: '*' attribute-specifier-seq
                                                                                                                       ↳ 54: attribute-specifier
                                                                                                                             ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq '*' • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                             ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator ptr-abstract-declarator
                                                                                                                  ↳ 897: '*' • ↳ 892: noptr-abstract-declarator
                                                                                                                                      ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token "const" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" type-specifier-seq '*' • "const" conversion-type-id declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: conversion-type-id                                                  conversion-type-id
                                                                                                                                                       ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                 ↳ 177: ptr-operator
                                                                                                                                                                                        ↳ 899: '*' cv-qualifier-seq
                                                                                                                                                                                                   ↳ 187: cv-qualifier
                                                                                                                                                                                                          ↳ 185: • "const"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq '*' • "const" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                                             ↳ 401: decl-specifier-seq                          declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                                               ↳ 1120: cv-qualifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                                       ↳ 185: "const"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                            ↳ 177: ptr-operator
                                                                                                                                                                                                   ↳ 897: '*' •
cplusplus.y: warning: shift/reduce conflict on token "volatile" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" type-specifier-seq '*' • "volatile" conversion-type-id declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                             declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: conversion-type-id                                                     conversion-type-id
                                                                                                                                                       ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                 ↳ 177: ptr-operator
                                                                                                                                                                                        ↳ 899: '*' cv-qualifier-seq
                                                                                                                                                                                                   ↳ 187: cv-qualifier
                                                                                                                                                                                                          ↳ 186: • "volatile"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq '*' • "volatile" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                                             ↳ 401: decl-specifier-seq                             declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                                               ↳ 1120: cv-qualifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                                       ↳ 186: "volatile"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                            ↳ 177: ptr-operator
                                                                                                                                                                                                   ↳ 897: '*' •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: class-head '{' decl-specifier • "alignas" '(' type-id ')' ';' '}' declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                            declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: class-specifier
                                                    ↳ 152: class-head '{' member-specification                                                                  '}'
                                                                          ↳ 619: member-declaration
                                                                                 ↳ 587: decl-specifier-seq                                                  ';'
                                                                                        ↳ 211: decl-specifier attribute-specifier-seq
                                                                                                              ↳ 54: attribute-specifier
                                                                                                                    ↳ 52: alignment-specifier
                                                                                                                          ↳ 15: • "alignas" '(' type-id ')'
  Second example: class-head '{' decl-specifier • "alignas" '(' type-id ')' ':' constant-expression ';' '}' declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                                                         declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 239: class-specifier
                                                           ↳ 152: class-head '{' member-specification                                                                                                        '}'
                                                                                 ↳ 619: member-declaration
                                                                                        ↳ 591: decl-specifier-seq      member-declarator-list                                                            ';'
                                                                                               ↳ 210: decl-specifier • ↳ 617: member-declarator
                                                                                                                              ↳ 612: attribute-specifier-seq                     ':' constant-expression
                                                                                                                                     ↳ 54: attribute-specifier
                                                                                                                                           ↳ 52: alignment-specifier
                                                                                                                                                 ↳ 15: "alignas" '(' type-id ')'
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: class-head '{' decl-specifier • "alignas" '(' type-id "..." ')' ';' '}' declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                  declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: class-specifier
                                                    ↳ 152: class-head '{' member-specification                                                                        '}'
                                                                          ↳ 619: member-declaration
                                                                                 ↳ 587: decl-specifier-seq                                                        ';'
                                                                                        ↳ 211: decl-specifier attribute-specifier-seq
                                                                                                              ↳ 54: attribute-specifier
                                                                                                                    ↳ 52: alignment-specifier
                                                                                                                          ↳ 16: • "alignas" '(' type-id "..." ')'
  Second example: class-head '{' decl-specifier • "alignas" '(' type-id ')' ':' constant-expression ';' '}' declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                                                         declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 239: class-specifier
                                                           ↳ 152: class-head '{' member-specification                                                                                                        '}'
                                                                                 ↳ 619: member-declaration
                                                                                        ↳ 591: decl-specifier-seq      member-declarator-list                                                            ';'
                                                                                               ↳ 210: decl-specifier • ↳ 617: member-declarator
                                                                                                                              ↳ 612: attribute-specifier-seq                     ':' constant-expression
                                                                                                                                     ↳ 54: attribute-specifier
                                                                                                                                           ↳ 52: alignment-specifier
                                                                                                                                                 ↳ 15: "alignas" '(' type-id ')'
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: class-head '{' decl-specifier • "alignas" '(' constant-expression ')' ';' '}' declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                        declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: class-specifier
                                                    ↳ 152: class-head '{' member-specification                                                                              '}'
                                                                          ↳ 619: member-declaration
                                                                                 ↳ 587: decl-specifier-seq                                                              ';'
                                                                                        ↳ 211: decl-specifier attribute-specifier-seq
                                                                                                              ↳ 54: attribute-specifier
                                                                                                                    ↳ 52: alignment-specifier
                                                                                                                          ↳ 17: • "alignas" '(' constant-expression ')'
  Second example: class-head '{' decl-specifier • "alignas" '(' type-id ')' ':' constant-expression ';' '}' declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                                                         declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 239: class-specifier
                                                           ↳ 152: class-head '{' member-specification                                                                                                        '}'
                                                                                 ↳ 619: member-declaration
                                                                                        ↳ 591: decl-specifier-seq      member-declarator-list                                                            ';'
                                                                                               ↳ 210: decl-specifier • ↳ 617: member-declarator
                                                                                                                              ↳ 612: attribute-specifier-seq                     ':' constant-expression
                                                                                                                                     ↳ 54: attribute-specifier
                                                                                                                                           ↳ 52: alignment-specifier
                                                                                                                                                 ↳ 15: "alignas" '(' type-id ')'
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: class-head '{' decl-specifier • "alignas" '(' constant-expression "..." ')' ';' '}' declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                              declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: class-specifier
                                                    ↳ 152: class-head '{' member-specification                                                                                    '}'
                                                                          ↳ 619: member-declaration
                                                                                 ↳ 587: decl-specifier-seq                                                                    ';'
                                                                                        ↳ 211: decl-specifier attribute-specifier-seq
                                                                                                              ↳ 54: attribute-specifier
                                                                                                                    ↳ 52: alignment-specifier
                                                                                                                          ↳ 18: • "alignas" '(' constant-expression "..." ')'
  Second example: class-head '{' decl-specifier • "alignas" '(' type-id ')' ':' constant-expression ';' '}' declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                                                         declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 239: class-specifier
                                                           ↳ 152: class-head '{' member-specification                                                                                                        '}'
                                                                                 ↳ 619: member-declaration
                                                                                        ↳ 591: decl-specifier-seq      member-declarator-list                                                            ';'
                                                                                               ↳ 210: decl-specifier • ↳ 617: member-declarator
                                                                                                                              ↳ 612: attribute-specifier-seq                     ':' constant-expression
                                                                                                                                     ↳ 54: attribute-specifier
                                                                                                                                           ↳ 52: alignment-specifier
                                                                                                                                                 ↳ 15: "alignas" '(' type-id ')'
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: decl-specifier • '[' '[' attribute-list ']' ']' declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                 declarator function-body
                                      ↳ 211: decl-specifier attribute-specifier-seq
                                                            ↳ 54: attribute-specifier
                                                                  ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: decl-specifier • '[' identifier-list ']' initializer ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 981: decl-specifier-seq      '[' identifier-list ']' initializer ';'
                                            ↳ 210: decl-specifier •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: decl-specifier • '[' '[' attribute-using-prefix attribute-list ']' ']' declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                        declarator function-body
                                      ↳ 211: decl-specifier attribute-specifier-seq
                                                            ↳ 54: attribute-specifier
                                                                  ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: decl-specifier • '[' identifier-list ']' initializer ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 981: decl-specifier-seq      '[' identifier-list ']' initializer ';'
                                            ↳ 210: decl-specifier •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: decl-specifier • IDENTIFIER declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1092: class-name
                                                                                                         ↳ 145: • IDENTIFIER
  Second example: decl-specifier • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq      declarator                                                            function-body
                                      ↳ 210: decl-specifier • ↳ 229: ptr-declarator
                                                                     ↳ 896: ptr-operator                             ptr-declarator
                                                                            ↳ 905: nested-name-specifier         '*'
                                                                                   ↳ 661: namespace-name    "::"
                                                                                          ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: decl-specifier • IDENTIFIER "auto" declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                   declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1003: placeholder-type-specifier
                                                                                                 ↳ 852: type-constraint             "auto"
                                                                                                        ↳ 1085: concept-name
                                                                                                                ↳ 163: • IDENTIFIER
  Second example: decl-specifier • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq      declarator                                                            function-body
                                      ↳ 210: decl-specifier • ↳ 229: ptr-declarator
                                                                     ↳ 896: ptr-operator                             ptr-declarator
                                                                            ↳ 905: nested-name-specifier         '*'
                                                                                   ↳ 661: namespace-name    "::"
                                                                                          ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token "decltype" [-Wcounterexamples]
  First example: decl-specifier • "decltype" '(' expression ')' declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1002: decltype-specifier
                                                                                                 ↳ 233: • "decltype" '(' expression ')'
  Second example: decl-specifier • "decltype" '(' expression ')' "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq      declarator                                                                               function-body
                                      ↳ 210: decl-specifier • ↳ 229: ptr-declarator
                                                                     ↳ 896: ptr-operator                                                ptr-declarator
                                                                            ↳ 905: nested-name-specifier                            '*'
                                                                                   ↳ 662: decltype-specifier                   "::"
                                                                                          ↳ 233: "decltype" '(' expression ')'
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: decl-specifier • IDENTIFIER declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1093: enum-name
                                                                                                         ↳ 297: • IDENTIFIER
  Second example: decl-specifier • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq      declarator                                                            function-body
                                      ↳ 210: decl-specifier • ↳ 229: ptr-declarator
                                                                     ↳ 896: ptr-operator                             ptr-declarator
                                                                            ↳ 905: nested-name-specifier         '*'
                                                                                   ↳ 661: namespace-name    "::"
                                                                                          ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: decl-specifier • IDENTIFIER "::" type-name declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                         declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier                  type-name
                                                                                                ↳ 661: namespace-name             "::"
                                                                                                       ↳ 658: namespace-alias
                                                                                                              ↳ 651: • IDENTIFIER
  Second example: decl-specifier • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq      declarator                                                            function-body
                                      ↳ 210: decl-specifier • ↳ 229: ptr-declarator
                                                                     ↳ 896: ptr-operator                             ptr-declarator
                                                                            ↳ 905: nested-name-specifier         '*'
                                                                                   ↳ 661: namespace-name    "::"
                                                                                          ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: decl-specifier • IDENTIFIER "::" type-name declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                  declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier           type-name
                                                                                                ↳ 661: namespace-name      "::"
                                                                                                       ↳ 657: • IDENTIFIER
  Second example: decl-specifier • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq      declarator                                                            function-body
                                      ↳ 210: decl-specifier • ↳ 229: ptr-declarator
                                                                     ↳ 896: ptr-operator                             ptr-declarator
                                                                            ↳ 905: nested-name-specifier         '*'
                                                                                   ↳ 661: namespace-name    "::"
                                                                                          ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier • "::" type-name declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                        declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier type-name
                                                                                                ↳ 659: • "::"
  Second example: decl-specifier • "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq      declarator                                                    function-body
                                      ↳ 210: decl-specifier • ↳ 229: ptr-declarator
                                                                     ↳ 896: ptr-operator                     ptr-declarator
                                                                            ↳ 905: nested-name-specifier '*'
                                                                                   ↳ 659: "::"
cplusplus.y: warning: shift/reduce conflict on token "decltype" [-Wcounterexamples]
  First example: decl-specifier • "decltype" '(' "auto" ')' declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                            declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1003: placeholder-type-specifier
                                                                                                 ↳ 855: • "decltype" '(' "auto" ')'
  Second example: decl-specifier • "decltype" '(' expression ')' "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq      declarator                                                                               function-body
                                      ↳ 210: decl-specifier • ↳ 229: ptr-declarator
                                                                     ↳ 896: ptr-operator                                                ptr-declarator
                                                                            ↳ 905: nested-name-specifier                            '*'
                                                                                   ↳ 662: decltype-specifier                   "::"
                                                                                          ↳ 233: "decltype" '(' expression ')'
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: decl-specifier • IDENTIFIER declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                              declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1005: template-name
                                                                                                 ↳ 1066: • IDENTIFIER
  Second example: decl-specifier • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq      declarator                                                            function-body
                                      ↳ 210: decl-specifier • ↳ 229: ptr-declarator
                                                                     ↳ 896: ptr-operator                             ptr-declarator
                                                                            ↳ 905: nested-name-specifier         '*'
                                                                                   ↳ 661: namespace-name    "::"
                                                                                          ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: decl-specifier • IDENTIFIER declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                      declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1094: typedef-name
                                                                                                         ↳ 1124: • IDENTIFIER
  Second example: decl-specifier • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq      declarator                                                            function-body
                                      ↳ 210: decl-specifier • ↳ 229: ptr-declarator
                                                                     ↳ 896: ptr-operator                             ptr-declarator
                                                                            ↳ 905: nested-name-specifier         '*'
                                                                                   ↳ 661: namespace-name    "::"
                                                                                          ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: declarator-id • '[' '[' attribute-list ']' ']' parameters-and-qualifiers trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                                                              function-body
                                      ↳ 230: noptr-declarator                                                  parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id attribute-specifier-seq
                                                                  ↳ 54: attribute-specifier
                                                                        ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: declarator-id • '[' ']' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                  ';'
                                      ↳ 230: noptr-declarator                      parameters-and-qualifiers trailing-return-type
                                             ↳ 728: noptr-declarator       '[' ']'
                                                    ↳ 725: declarator-id •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: declarator-id • '[' '[' attribute-using-prefix attribute-list ']' ']' parameters-and-qualifiers trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                                                                                     function-body
                                      ↳ 230: noptr-declarator                                                                         parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id attribute-specifier-seq
                                                                  ↳ 54: attribute-specifier
                                                                        ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: declarator-id • '[' ']' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                  ';'
                                      ↳ 230: noptr-declarator                      parameters-and-qualifiers trailing-return-type
                                             ↳ 728: noptr-declarator       '[' ']'
                                                    ↳ 725: declarator-id •
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: decltype-specifier • "::" '*' ptr-declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                               function-body
                                      ↳ 229: ptr-declarator
                                             ↳ 896: ptr-operator                                ptr-declarator
                                                    ↳ 905: nested-name-specifier            '*'
                                                           ↳ 662: decltype-specifier • "::"
  Second example: decltype-specifier • "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                        declarator                                                    function-body
                                      ↳ 210: decl-specifier                                     ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                            ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                     ↳ 905: nested-name-specifier '*'
                                                           ↳ 1117: simple-type-specifier                             ↳ 659: "::"
                                                                   ↳ 1002: decltype-specifier •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: explicit-specifier • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 217: deduction-guide
                               ↳ 234: explicit-specifier template-name        '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                         ↳ 1066: • IDENTIFIER
  Second example: explicit-specifier • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                        declarator                                                            function-body
                                      ↳ 210: decl-specifier                     ↳ 229: ptr-declarator
                                             ↳ 203: function-specifier                 ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 411: explicit-specifier •               ↳ 905: nested-name-specifier         '*'
                                                                                                     ↳ 661: namespace-name    "::"
                                                                                                            ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token '<' [-Wcounterexamples]
  First example: declarator "requires" '(' literal-operator-id • '<' '>' fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                      function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: fold-expression
                                                                                 ↳ 348: '(' cast-expression                                                                   fold-operator "..." ')'
                                                                                            ↳ 124: unary-expression
                                                                                                   ↳ 1130: postfix-expression
                                                                                                           ↳ 860: primary-expression
                                                                                                                  ↳ 886: id-expression
                                                                                                                         ↳ 463: unqualified-id
                                                                                                                                ↳ 1160: template-id
                                                                                                                                        ↳ 1064: literal-operator-id • '<' '>'
  Second example: declarator "requires" '(' literal-operator-id • '<' "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                             function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                   fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                           ↳ 374: '<'
                                                                                                          ↳ 1130: postfix-expression
                                                                                                                  ↳ 860: primary-expression
                                                                                                                         ↳ 886: id-expression
                                                                                                                                ↳ 463: unqualified-id
                                                                                                                                       ↳ 1157: literal-operator-id •
cplusplus.y: warning: shift/reduce conflict on token '<' [-Wcounterexamples]
  First example: declarator "requires" '(' literal-operator-id • '<' template-argument-list '>' fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                             function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: fold-expression
                                                                                 ↳ 348: '(' cast-expression                                                                                          fold-operator "..." ')'
                                                                                            ↳ 124: unary-expression
                                                                                                   ↳ 1130: postfix-expression
                                                                                                           ↳ 860: primary-expression
                                                                                                                  ↳ 886: id-expression
                                                                                                                         ↳ 463: unqualified-id
                                                                                                                                ↳ 1160: template-id
                                                                                                                                        ↳ 1065: literal-operator-id • '<' template-argument-list '>'
  Second example: declarator "requires" '(' literal-operator-id • '<' "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                             function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                   fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                           ↳ 374: '<'
                                                                                                          ↳ 1130: postfix-expression
                                                                                                                  ↳ 860: primary-expression
                                                                                                                         ↳ 886: id-expression
                                                                                                                                ↳ 463: unqualified-id
                                                                                                                                       ↳ 1157: literal-operator-id •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                 function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                     trailing-return-type
                                                                                 ↳ 836: • '(' parameter-declaration-clause ')'
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                  function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                      trailing-return-type
                                                                                 ↳ 837: • '(' parameter-declaration-clause ')' cv-qualifier-seq
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' ref-qualifier trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                               function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                   trailing-return-type
                                                                                 ↳ 838: • '(' parameter-declaration-clause ')' ref-qualifier
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                                function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                                    trailing-return-type
                                                                                 ↳ 839: • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' noexcept-specifier trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                    function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                        trailing-return-type
                                                                                 ↳ 840: • '(' parameter-declaration-clause ')' noexcept-specifier
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                                     function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                                         trailing-return-type
                                                                                 ↳ 841: • '(' parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' ref-qualifier noexcept-specifier trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                                  function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                                      trailing-return-type
                                                                                 ↳ 842: • '(' parameter-declaration-clause ')' ref-qualifier noexcept-specifier
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                                                   function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                                                       trailing-return-type
                                                                                 ↳ 843: • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' attribute-specifier-seq trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                         function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                             trailing-return-type
                                                                                 ↳ 844: • '(' parameter-declaration-clause ')' attribute-specifier-seq
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq attribute-specifier-seq trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                                          function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                                              trailing-return-type
                                                                                 ↳ 845: • '(' parameter-declaration-clause ')' cv-qualifier-seq attribute-specifier-seq
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' ref-qualifier attribute-specifier-seq trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                                       function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                                           trailing-return-type
                                                                                 ↳ 846: • '(' parameter-declaration-clause ')' ref-qualifier attribute-specifier-seq
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier attribute-specifier-seq trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                                                        function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                                                            trailing-return-type
                                                                                 ↳ 847: • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier attribute-specifier-seq
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' noexcept-specifier attribute-specifier-seq trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                                            function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                                                trailing-return-type
                                                                                 ↳ 848: • '(' parameter-declaration-clause ')' noexcept-specifier attribute-specifier-seq
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier attribute-specifier-seq trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                                                             function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                                                                 trailing-return-type
                                                                                 ↳ 849: • '(' parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier attribute-specifier-seq
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' ref-qualifier noexcept-specifier attribute-specifier-seq trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                                                          function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                                                              trailing-return-type
                                                                                 ↳ 850: • '(' parameter-declaration-clause ')' ref-qualifier noexcept-specifier attribute-specifier-seq
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                                                                           function-body
                                                         ↳ 230: noptr-declarator parameters-and-qualifiers                                                                                               trailing-return-type
                                                                                 ↳ 851: • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq
  Second example: decl-specifier-seq noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                       initializer
                                                                             ↳ 229: ptr-declarator            ↳ 482: '(' expression-list ')'
                                                                                    ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '<' [-Wcounterexamples]
  First example: declarator "requires" '(' operator-function-id • '<' '>' fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                       function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: fold-expression
                                                                                 ↳ 348: '(' cast-expression                                                                    fold-operator "..." ')'
                                                                                            ↳ 124: unary-expression
                                                                                                   ↳ 1130: postfix-expression
                                                                                                           ↳ 860: primary-expression
                                                                                                                  ↳ 886: id-expression
                                                                                                                         ↳ 463: unqualified-id
                                                                                                                                ↳ 1160: template-id
                                                                                                                                        ↳ 1062: operator-function-id • '<' '>'
  Second example: declarator "requires" '(' operator-function-id • '<' "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                              function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                    fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                            ↳ 374: '<'
                                                                                                          ↳ 1130: postfix-expression
                                                                                                                  ↳ 860: primary-expression
                                                                                                                         ↳ 886: id-expression
                                                                                                                                ↳ 463: unqualified-id
                                                                                                                                       ↳ 1155: operator-function-id •
cplusplus.y: warning: shift/reduce conflict on token '<' [-Wcounterexamples]
  First example: declarator "requires" '(' operator-function-id • '<' template-argument-list '>' fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                              function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: fold-expression
                                                                                 ↳ 348: '(' cast-expression                                                                                           fold-operator "..." ')'
                                                                                            ↳ 124: unary-expression
                                                                                                   ↳ 1130: postfix-expression
                                                                                                           ↳ 860: primary-expression
                                                                                                                  ↳ 886: id-expression
                                                                                                                         ↳ 463: unqualified-id
                                                                                                                                ↳ 1160: template-id
                                                                                                                                        ↳ 1063: operator-function-id • '<' template-argument-list '>'
  Second example: declarator "requires" '(' operator-function-id • '<' "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                              function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                    fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                            ↳ 374: '<'
                                                                                                          ↳ 1130: postfix-expression
                                                                                                                  ↳ 860: primary-expression
                                                                                                                         ↳ 886: id-expression
                                                                                                                                ↳ 463: unqualified-id
                                                                                                                                       ↳ 1155: operator-function-id •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', ':', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  First example: simple-template-id • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                       declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                    ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                           ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                    ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                            ↳ 661: namespace-name    "::"
                                                                   ↳ 1000: type-name                                                       ↳ 657: IDENTIFIER
                                                                           ↳ 1092: class-name
                                                                                   ↳ 146: simple-template-id •
  Second example: "template" '<' template-parameter-list '>' "requires" simple-template-id • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                         declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                    ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                        ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                       ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1160: template-id
                                                                                                                                                ↳ 1061: simple-template-id •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', ':', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  First example: simple-template-id • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                       declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                    ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                           ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                    ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                            ↳ 661: namespace-name    "::"
                                                                   ↳ 1000: type-name                                                       ↳ 657: IDENTIFIER
                                                                           ↳ 1092: class-name
                                                                                   ↳ 146: simple-template-id •
  Second example: simple-template-id • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                        declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                     ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                            ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                     ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                             ↳ 661: namespace-name    "::"
                                                                   ↳ 1000: type-name                                                        ↳ 657: IDENTIFIER
                                                                           ↳ 1094: typedef-name
                                                                                   ↳ 1125: simple-template-id •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', ':', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" simple-template-id • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                         declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                    ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                        ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                       ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1160: template-id
                                                                                                                                                ↳ 1061: simple-template-id •
  Second example: simple-template-id • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                        declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                     ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                            ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                     ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                             ↳ 661: namespace-name    "::"
                                                                   ↳ 1000: type-name                                                        ↳ 657: IDENTIFIER
                                                                           ↳ 1094: typedef-name
                                                                                   ↳ 1125: simple-template-id •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: template-name • '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 217: deduction-guide
                               ↳ 235: template-name • '(' parameter-declaration-clause ')' "->" simple-template-id ';'
  Second example: template-name • '(' ptr-declarator ')' parameters-and-qualifiers trailing-return-type function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                   declarator                                                                          function-body
                                      ↳ 210: decl-specifier                                ↳ 230: noptr-declarator              parameters-and-qualifiers trailing-return-type
                                             ↳ 202: defining-type-specifier                       ↳ 732: '(' ptr-declarator ')'
                                                    ↳ 238: type-specifier
                                                           ↳ 1117: simple-type-specifier
                                                                   ↳ 1005: template-name •
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: type-name • "::" '*' ptr-declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                      function-body
                                      ↳ 229: ptr-declarator
                                             ↳ 896: ptr-operator                       ptr-declarator
                                                    ↳ 905: nested-name-specifier   '*'
                                                           ↳ 660: type-name • "::"
  Second example: type-name • "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                 declarator                                                    function-body
                                      ↳ 210: decl-specifier                              ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                     ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                              ↳ 905: nested-name-specifier '*'
                                                           ↳ 1117: simple-type-specifier                      ↳ 659: "::"
                                                                   ↳ 1000: type-name •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                  ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                   unqualified-id
                                                                     ↳ 660: type-name                   "::"
                                                                            ↳ 1092: class-name
                                                                                    ↳ 145: IDENTIFIER •
  Second example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                  ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                   unqualified-id
                                                                     ↳ 660: type-name                   "::"
                                                                            ↳ 1093: enum-name
                                                                                    ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                  ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                   unqualified-id
                                                                     ↳ 660: type-name                   "::"
                                                                            ↳ 1092: class-name
                                                                                    ↳ 145: IDENTIFIER •
  Second example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                 ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                  unqualified-id
                                                                     ↳ 661: namespace-name             "::"
                                                                            ↳ 658: namespace-alias
                                                                                   ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                  ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                   unqualified-id
                                                                     ↳ 660: type-name                   "::"
                                                                            ↳ 1092: class-name
                                                                                    ↳ 145: IDENTIFIER •
  Second example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                          ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier           unqualified-id
                                                                     ↳ 661: namespace-name      "::"
                                                                            ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                  ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                   unqualified-id
                                                                     ↳ 660: type-name                   "::"
                                                                            ↳ 1092: class-name
                                                                                    ↳ 145: IDENTIFIER •
  Second example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                   ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                    unqualified-id
                                                                     ↳ 660: type-name                    "::"
                                                                            ↳ 1094: typedef-name
                                                                                    ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                  ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                   unqualified-id
                                                                     ↳ 660: type-name                   "::"
                                                                            ↳ 1093: enum-name
                                                                                    ↳ 297: IDENTIFIER •
  Second example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                 ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                  unqualified-id
                                                                     ↳ 661: namespace-name             "::"
                                                                            ↳ 658: namespace-alias
                                                                                   ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                  ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                   unqualified-id
                                                                     ↳ 660: type-name                   "::"
                                                                            ↳ 1093: enum-name
                                                                                    ↳ 297: IDENTIFIER •
  Second example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                          ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier           unqualified-id
                                                                     ↳ 661: namespace-name      "::"
                                                                            ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                  ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                   unqualified-id
                                                                     ↳ 660: type-name                   "::"
                                                                            ↳ 1093: enum-name
                                                                                    ↳ 297: IDENTIFIER •
  Second example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                   ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                    unqualified-id
                                                                     ↳ 660: type-name                    "::"
                                                                            ↳ 1094: typedef-name
                                                                                    ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                 ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                  unqualified-id
                                                                     ↳ 661: namespace-name             "::"
                                                                            ↳ 658: namespace-alias
                                                                                   ↳ 651: IDENTIFIER •
  Second example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                          ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier           unqualified-id
                                                                     ↳ 661: namespace-name      "::"
                                                                            ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                 ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                  unqualified-id
                                                                     ↳ 661: namespace-name             "::"
                                                                            ↳ 658: namespace-alias
                                                                                   ↳ 651: IDENTIFIER •
  Second example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                   ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                    unqualified-id
                                                                     ↳ 660: type-name                    "::"
                                                                            ↳ 1094: typedef-name
                                                                                    ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                          ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier           unqualified-id
                                                                     ↳ 661: namespace-name      "::"
                                                                            ↳ 657: IDENTIFIER •
  Second example: "using" IDENTIFIER • "::" unqualified-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                   ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                    unqualified-id
                                                                     ↳ 660: type-name                    "::"
                                                                            ↳ 1094: typedef-name
                                                                                    ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '+', '-', "using", '=', ';', "alignas", '(', ')', "...", '&', "asm", "*=", "/=", "%=", "+=", "-=", ">>=", "<<=", "&=", "^=", "|=", ',', "::", '[', ']', ':', '{', '}', "virtual", "class", "struct", "union", "template", "final", "<=>", "noexcept", "concept", '?', "&&", "||", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "->", '.', "enum", "==", "!=", '^', "extern", '<', '>', "explicit", "export", "export-keyword", '*', '/', '%', '|', "<<", ">>", "<=", ">=", ".*", "->*", "try", "import-keyword", "namespace", "requires", '~', "++", "--", "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static_assert", "static", "thread_local", "mutable", "typename", "override" [-Wcounterexamples]
  First example: decl-specifier simple-template-id • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                             declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                                       ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                           ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                                  ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                           ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                                   ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1092: class-name
                                                                                                         ↳ 146: simple-template-id •
  Second example: decl-specifier simple-template-id • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                              declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                                        ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                            ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                                   ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                            ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                                    ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1094: typedef-name
                                                                                                         ↳ 1125: simple-template-id •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                      function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                       ptr-declarator
                                                                       ↳ 905: nested-name-specifier                   '*'
                                                                              ↳ 660: type-name                   "::"
                                                                                     ↳ 1092: class-name
                                                                                             ↳ 145: IDENTIFIER •
  Second example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                      function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                       ptr-declarator
                                                                       ↳ 905: nested-name-specifier                   '*'
                                                                              ↳ 660: type-name                   "::"
                                                                                     ↳ 1093: enum-name
                                                                                             ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                      function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                       ptr-declarator
                                                                       ↳ 905: nested-name-specifier                   '*'
                                                                              ↳ 660: type-name                   "::"
                                                                                     ↳ 1092: class-name
                                                                                             ↳ 145: IDENTIFIER •
  Second example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                     function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                      ptr-declarator
                                                                       ↳ 905: nested-name-specifier                  '*'
                                                                              ↳ 661: namespace-name             "::"
                                                                                     ↳ 658: namespace-alias
                                                                                            ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                      function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                       ptr-declarator
                                                                       ↳ 905: nested-name-specifier                   '*'
                                                                              ↳ 660: type-name                   "::"
                                                                                     ↳ 1092: class-name
                                                                                             ↳ 145: IDENTIFIER •
  Second example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                              function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                               ptr-declarator
                                                                       ↳ 905: nested-name-specifier           '*'
                                                                              ↳ 661: namespace-name      "::"
                                                                                     ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                      function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                       ptr-declarator
                                                                       ↳ 905: nested-name-specifier                   '*'
                                                                              ↳ 660: type-name                   "::"
                                                                                     ↳ 1092: class-name
                                                                                             ↳ 145: IDENTIFIER •
  Second example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                       function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                        ptr-declarator
                                                                       ↳ 905: nested-name-specifier                    '*'
                                                                              ↳ 660: type-name                    "::"
                                                                                     ↳ 1094: typedef-name
                                                                                             ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                      function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                       ptr-declarator
                                                                       ↳ 905: nested-name-specifier                   '*'
                                                                              ↳ 660: type-name                   "::"
                                                                                     ↳ 1092: class-name
                                                                                             ↳ 145: IDENTIFIER •
  Second example: "template" '<' template-parameter-list '>' "requires" IDENTIFIER • "::" '*' ptr-declarator ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                         declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                    ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                        ↳ 695: declarator                                                    ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                       ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                      ↳ 896: ptr-operator                     ptr-declarator
                                                                                                                          ↳ 886: id-expression                                           ↳ 905: nested-name-specifier '*'
                                                                                                                                 ↳ 463: unqualified-id                                          ↳ 659: "::"
                                                                                                                                        ↳ 1154: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                      function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                       ptr-declarator
                                                                       ↳ 905: nested-name-specifier                   '*'
                                                                              ↳ 660: type-name                   "::"
                                                                                     ↳ 1093: enum-name
                                                                                             ↳ 297: IDENTIFIER •
  Second example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                     function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                      ptr-declarator
                                                                       ↳ 905: nested-name-specifier                  '*'
                                                                              ↳ 661: namespace-name             "::"
                                                                                     ↳ 658: namespace-alias
                                                                                            ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                      function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                       ptr-declarator
                                                                       ↳ 905: nested-name-specifier                   '*'
                                                                              ↳ 660: type-name                   "::"
                                                                                     ↳ 1093: enum-name
                                                                                             ↳ 297: IDENTIFIER •
  Second example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                              function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                               ptr-declarator
                                                                       ↳ 905: nested-name-specifier           '*'
                                                                              ↳ 661: namespace-name      "::"
                                                                                     ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                      function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                       ptr-declarator
                                                                       ↳ 905: nested-name-specifier                   '*'
                                                                              ↳ 660: type-name                   "::"
                                                                                     ↳ 1093: enum-name
                                                                                             ↳ 297: IDENTIFIER •
  Second example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                       function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                        ptr-declarator
                                                                       ↳ 905: nested-name-specifier                    '*'
                                                                              ↳ 660: type-name                    "::"
                                                                                     ↳ 1094: typedef-name
                                                                                             ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                      function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                       ptr-declarator
                                                                       ↳ 905: nested-name-specifier                   '*'
                                                                              ↳ 660: type-name                   "::"
                                                                                     ↳ 1093: enum-name
                                                                                             ↳ 297: IDENTIFIER •
  Second example: "template" '<' template-parameter-list '>' "requires" IDENTIFIER • "::" '*' ptr-declarator ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                         declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                    ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                        ↳ 695: declarator                                                    ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                       ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                      ↳ 896: ptr-operator                     ptr-declarator
                                                                                                                          ↳ 886: id-expression                                           ↳ 905: nested-name-specifier '*'
                                                                                                                                 ↳ 463: unqualified-id                                          ↳ 659: "::"
                                                                                                                                        ↳ 1154: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                     function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                      ptr-declarator
                                                                       ↳ 905: nested-name-specifier                  '*'
                                                                              ↳ 661: namespace-name             "::"
                                                                                     ↳ 658: namespace-alias
                                                                                            ↳ 651: IDENTIFIER •
  Second example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                              function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                               ptr-declarator
                                                                       ↳ 905: nested-name-specifier           '*'
                                                                              ↳ 661: namespace-name      "::"
                                                                                     ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                     function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                      ptr-declarator
                                                                       ↳ 905: nested-name-specifier                  '*'
                                                                              ↳ 661: namespace-name             "::"
                                                                                     ↳ 658: namespace-alias
                                                                                            ↳ 651: IDENTIFIER •
  Second example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                       function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                        ptr-declarator
                                                                       ↳ 905: nested-name-specifier                    '*'
                                                                              ↳ 660: type-name                    "::"
                                                                                     ↳ 1094: typedef-name
                                                                                             ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                     function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                      ptr-declarator
                                                                       ↳ 905: nested-name-specifier                  '*'
                                                                              ↳ 661: namespace-name             "::"
                                                                                     ↳ 658: namespace-alias
                                                                                            ↳ 651: IDENTIFIER •
  Second example: "template" '<' template-parameter-list '>' "requires" IDENTIFIER • "::" '*' ptr-declarator ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                         declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                    ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                        ↳ 695: declarator                                                    ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                       ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                      ↳ 896: ptr-operator                     ptr-declarator
                                                                                                                          ↳ 886: id-expression                                           ↳ 905: nested-name-specifier '*'
                                                                                                                                 ↳ 463: unqualified-id                                          ↳ 659: "::"
                                                                                                                                        ↳ 1154: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                              function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                               ptr-declarator
                                                                       ↳ 905: nested-name-specifier           '*'
                                                                              ↳ 661: namespace-name      "::"
                                                                                     ↳ 657: IDENTIFIER •
  Second example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                       function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                        ptr-declarator
                                                                       ↳ 905: nested-name-specifier                    '*'
                                                                              ↳ 660: type-name                    "::"
                                                                                     ↳ 1094: typedef-name
                                                                                             ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                              function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                               ptr-declarator
                                                                       ↳ 905: nested-name-specifier           '*'
                                                                              ↳ 661: namespace-name      "::"
                                                                                     ↳ 657: IDENTIFIER •
  Second example: "template" '<' template-parameter-list '>' "requires" IDENTIFIER • "::" '*' ptr-declarator ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                         declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                    ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                        ↳ 695: declarator                                                    ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                       ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                      ↳ 896: ptr-operator                     ptr-declarator
                                                                                                                          ↳ 886: id-expression                                           ↳ 905: nested-name-specifier '*'
                                                                                                                                 ↳ 463: unqualified-id                                          ↳ 659: "::"
                                                                                                                                        ↳ 1154: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token '<' [-Wcounterexamples]
  First example: "..." IDENTIFIER • '<' '>' parameters-and-qualifiers trailing-return-type ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                           ';'
                                      ↳ 230: noptr-declarator                                                               parameters-and-qualifiers trailing-return-type
                                             ↳ 725: declarator-id
                                                    ↳ 231: "..." id-expression
                                                                 ↳ 463: unqualified-id
                                                                        ↳ 1160: template-id
                                                                                ↳ 1061: simple-template-id
                                                                                        ↳ 997: template-name        '<' '>'
                                                                                               ↳ 1066: IDENTIFIER •
  Second example: declarator "requires" '(' postfix-expression '.' IDENTIFIER • '<' "..." ')' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                    function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                          fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                                  ↳ 374: '<'
                                                                                                          ↳ 1130: postfix-expression
                                                                                                                  ↳ 871: postfix-expression '.' id-expression
                                                                                                                                                ↳ 463: unqualified-id
                                                                                                                                                       ↳ 1154: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier-seq IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                       function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                        ptr-declarator
                                                                       ↳ 905: nested-name-specifier                    '*'
                                                                              ↳ 660: type-name                    "::"
                                                                                     ↳ 1094: typedef-name
                                                                                             ↳ 1124: IDENTIFIER •
  Second example: "template" '<' template-parameter-list '>' "requires" IDENTIFIER • "::" '*' ptr-declarator ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                         declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                    ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                        ↳ 695: declarator                                                    ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                       ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                      ↳ 896: ptr-operator                     ptr-declarator
                                                                                                                          ↳ 886: id-expression                                           ↳ 905: nested-name-specifier '*'
                                                                                                                                 ↳ 463: unqualified-id                                          ↳ 659: "::"
                                                                                                                                        ↳ 1154: IDENTIFIER •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                       ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                   initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 836: • '(' parameter-declaration-clause ')'
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                        ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                    initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 837: • '(' parameter-declaration-clause ')' cv-qualifier-seq
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' ref-qualifier initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                     ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                 initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 838: • '(' parameter-declaration-clause ')' ref-qualifier
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                                      ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                                  initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 839: • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' noexcept-specifier initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                          ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                      initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 840: • '(' parameter-declaration-clause ')' noexcept-specifier
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                                           ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                                       initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 841: • '(' parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' ref-qualifier noexcept-specifier initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                                        ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                                    initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 842: • '(' parameter-declaration-clause ')' ref-qualifier noexcept-specifier
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                                                         ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                                                     initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 843: • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' attribute-specifier-seq initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                               ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                           initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 844: • '(' parameter-declaration-clause ')' attribute-specifier-seq
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq attribute-specifier-seq initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                                                ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                                            initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 845: • '(' parameter-declaration-clause ')' cv-qualifier-seq attribute-specifier-seq
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' ref-qualifier attribute-specifier-seq initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                                             ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                                         initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 846: • '(' parameter-declaration-clause ')' ref-qualifier attribute-specifier-seq
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier attribute-specifier-seq initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                                                          initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 847: • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier attribute-specifier-seq
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' noexcept-specifier attribute-specifier-seq initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                                                  ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                                              initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 848: • '(' parameter-declaration-clause ')' noexcept-specifier attribute-specifier-seq
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier attribute-specifier-seq initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                                                                   ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                                                               initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 849: • '(' parameter-declaration-clause ')' cv-qualifier-seq noexcept-specifier attribute-specifier-seq
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' ref-qualifier noexcept-specifier attribute-specifier-seq initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                                                                ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                                                            initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 850: • '(' parameter-declaration-clause ')' ref-qualifier noexcept-specifier attribute-specifier-seq
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
  First example: decl-specifier-seq ptr-operator noptr-declarator • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq initializer ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                                                                                                                                 ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: ptr-declarator                                                                                                                                                             initializer
                                                                             ↳ 896: ptr-operator ptr-declarator
                                                                                                 ↳ 895: noptr-declarator
                                                                                                        ↳ 727: noptr-declarator parameters-and-qualifiers
                                                                                                                                ↳ 851: • '(' parameter-declaration-clause ')' cv-qualifier-seq ref-qualifier noexcept-specifier attribute-specifier-seq
  Second example: decl-specifier-seq ptr-operator noptr-declarator • '(' expression-list ')' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 978: decl-specifier-seq init-declarator-list                                                                              ';'
                                                               ↳ 476: init-declarator
                                                                      ↳ 474: declarator                                           initializer
                                                                             ↳ 229: ptr-declarator                                ↳ 482: '(' expression-list ')'
                                                                                    ↳ 896: ptr-operator ptr-declarator
                                                                                                        ↳ 895: noptr-declarator •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier-seq '&' attribute-specifier-seq • "alignas" '(' type-id ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                              ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                  parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                      attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq ptr-operator
                                                                                                                      ↳ 902: '&' attribute-specifier-seq
                                                                                                                                 ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                               ↳ 52: alignment-specifier
                                                                                                                                                                     ↳ 15: • "alignas" '(' type-id ')'
  Second example: "operator" type-specifier-seq '&' attribute-specifier-seq • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                             ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                 parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                 attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                          ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                        ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                              ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 902: '&' attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier-seq '&' attribute-specifier-seq • "alignas" '(' type-id "..." ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                    ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                        parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                            attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq ptr-operator
                                                                                                                      ↳ 902: '&' attribute-specifier-seq
                                                                                                                                 ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                               ↳ 52: alignment-specifier
                                                                                                                                                                     ↳ 16: • "alignas" '(' type-id "..." ')'
  Second example: "operator" type-specifier-seq '&' attribute-specifier-seq • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                             ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                 parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                 attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                          ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                        ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                              ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 902: '&' attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier-seq '&' attribute-specifier-seq • "alignas" '(' constant-expression ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                          ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                              parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                                  attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq ptr-operator
                                                                                                                      ↳ 902: '&' attribute-specifier-seq
                                                                                                                                 ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                               ↳ 52: alignment-specifier
                                                                                                                                                                     ↳ 17: • "alignas" '(' constant-expression ')'
  Second example: "operator" type-specifier-seq '&' attribute-specifier-seq • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                             ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                 parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                 attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                          ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                        ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                              ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 902: '&' attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier-seq '&' attribute-specifier-seq • "alignas" '(' constant-expression "..." ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                                ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                                    parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                                        attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq ptr-operator
                                                                                                                      ↳ 902: '&' attribute-specifier-seq
                                                                                                                                 ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                               ↳ 52: alignment-specifier
                                                                                                                                                                     ↳ 18: • "alignas" '(' constant-expression "..." ')'
  Second example: "operator" type-specifier-seq '&' attribute-specifier-seq • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                             ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                 parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                 attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                          ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                        ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                              ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 902: '&' attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "using" IDENTIFIER '=' defining-type-specifier-seq '&' attribute-specifier-seq • '[' '[' attribute-list ']' ']' ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                        ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-operator
                                                                                                           ↳ 902: '&' attribute-specifier-seq
                                                                                                                      ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                    ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq '&' attribute-specifier-seq • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                     ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator                         ptr-abstract-declarator
                                                                                                                  ↳ 902: '&' attribute-specifier-seq • ↳ 892: noptr-abstract-declarator
                                                                                                                                                              ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "using" IDENTIFIER '=' defining-type-specifier-seq '&' attribute-specifier-seq • '[' '[' attribute-using-prefix attribute-list ']' ']' ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                                               ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-operator
                                                                                                           ↳ 902: '&' attribute-specifier-seq
                                                                                                                      ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                    ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq '&' attribute-specifier-seq • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                     ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator                         ptr-abstract-declarator
                                                                                                                  ↳ 902: '&' attribute-specifier-seq • ↳ 892: noptr-abstract-declarator
                                                                                                                                                              ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier-seq "&&" attribute-specifier-seq • "alignas" '(' type-id ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                               ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                   parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                       attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq ptr-operator
                                                                                                                      ↳ 904: "&&" attribute-specifier-seq
                                                                                                                                  ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                                ↳ 52: alignment-specifier
                                                                                                                                                                      ↳ 15: • "alignas" '(' type-id ')'
  Second example: "operator" type-specifier-seq "&&" attribute-specifier-seq • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                              ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                  parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                  attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                           ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                         ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                               ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 904: "&&" attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier-seq "&&" attribute-specifier-seq • "alignas" '(' type-id "..." ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                     ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                         parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                             attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq ptr-operator
                                                                                                                      ↳ 904: "&&" attribute-specifier-seq
                                                                                                                                  ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                                ↳ 52: alignment-specifier
                                                                                                                                                                      ↳ 16: • "alignas" '(' type-id "..." ')'
  Second example: "operator" type-specifier-seq "&&" attribute-specifier-seq • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                              ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                  parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                  attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                           ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                         ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                               ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 904: "&&" attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier-seq "&&" attribute-specifier-seq • "alignas" '(' constant-expression ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                           ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                               parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                                   attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq ptr-operator
                                                                                                                      ↳ 904: "&&" attribute-specifier-seq
                                                                                                                                  ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                                ↳ 52: alignment-specifier
                                                                                                                                                                      ↳ 17: • "alignas" '(' constant-expression ')'
  Second example: "operator" type-specifier-seq "&&" attribute-specifier-seq • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                              ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                  parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                  attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                           ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                         ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                               ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 904: "&&" attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier-seq "&&" attribute-specifier-seq • "alignas" '(' constant-expression "..." ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                                 ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                                     parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                                         attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq ptr-operator
                                                                                                                      ↳ 904: "&&" attribute-specifier-seq
                                                                                                                                  ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                                ↳ 52: alignment-specifier
                                                                                                                                                                      ↳ 18: • "alignas" '(' constant-expression "..." ')'
  Second example: "operator" type-specifier-seq "&&" attribute-specifier-seq • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                              ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                  parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                  attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                           ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                         ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                               ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 904: "&&" attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "using" IDENTIFIER '=' defining-type-specifier-seq "&&" attribute-specifier-seq • '[' '[' attribute-list ']' ']' ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                         ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-operator
                                                                                                           ↳ 904: "&&" attribute-specifier-seq
                                                                                                                       ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                     ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq "&&" attribute-specifier-seq • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                      ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator                          ptr-abstract-declarator
                                                                                                                  ↳ 904: "&&" attribute-specifier-seq • ↳ 892: noptr-abstract-declarator
                                                                                                                                                               ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "using" IDENTIFIER '=' defining-type-specifier-seq "&&" attribute-specifier-seq • '[' '[' attribute-using-prefix attribute-list ']' ']' ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                                                ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-operator
                                                                                                           ↳ 904: "&&" attribute-specifier-seq
                                                                                                                       ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                     ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq "&&" attribute-specifier-seq • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                      ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator                          ptr-abstract-declarator
                                                                                                                  ↳ 904: "&&" attribute-specifier-seq • ↳ 892: noptr-abstract-declarator
                                                                                                                                                               ↳ 711: '[' ']'
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "...", ',', "decltype", '<', '>', "auto" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                               ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                   ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                          ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                   ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                           ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1092: class-name
                                                                                                         ↳ 145: IDENTIFIER •
  Second example: "template" '<' IDENTIFIER • IDENTIFIER '>' declaration $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                             declaration
                                       ↳ 1059: "template" '<' template-parameter-list                                        '>'
                                                              ↳ 1069: template-parameter
                                                                      ↳ 1067: type-parameter
                                                                              ↳ 1103: type-constraint             IDENTIFIER
                                                                                      ↳ 1085: concept-name
                                                                                              ↳ 163: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '+', '-', "using", '=', ';', "alignas", '(', ')', "...", '&', "asm", "*=", "/=", "%=", "+=", "-=", ">>=", "<<=", "&=", "^=", "|=", ',', "::", '[', ']', ':', '{', '}', "virtual", "class", "struct", "union", "template", "final", "<=>", "noexcept", "concept", '?', "&&", "||", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "->", '.', "enum", "==", "!=", '^', "extern", '<', '>', "explicit", "export", "export-keyword", '*', '/', '%', '|', "<<", ">>", "<=", ">=", ".*", "->*", "try", "import-keyword", "namespace", "requires", '~', "++", "--", "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static_assert", "static", "thread_local", "mutable", "typename", "override" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                               ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                   ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                          ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                   ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                           ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1092: class-name
                                                                                                         ↳ 145: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                               ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                   ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                          ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                   ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                           ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1093: enum-name
                                                                                                         ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                    function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                               ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                   ↳ 896: ptr-operator                     ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                          ↳ 905: nested-name-specifier '*'
                                                                          ↳ 238: type-specifier                                                   ↳ 659: "::"
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1092: class-name
                                                                                                         ↳ 145: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • "::" type-name declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                         declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier                  type-name
                                                                                                ↳ 661: namespace-name             "::"
                                                                                                       ↳ 658: namespace-alias
                                                                                                              ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                    function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                               ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                   ↳ 896: ptr-operator                     ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                          ↳ 905: nested-name-specifier '*'
                                                                          ↳ 238: type-specifier                                                   ↳ 659: "::"
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1092: class-name
                                                                                                         ↳ 145: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • "::" type-name declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                  declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier           type-name
                                                                                                ↳ 661: namespace-name      "::"
                                                                                                       ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '+', '-', "using", '=', ';', "alignas", '(', ')', "...", '&', "asm", "*=", "/=", "%=", "+=", "-=", ">>=", "<<=", "&=", "^=", "|=", ',', "::", '[', ']', ':', '{', '}', "virtual", "class", "struct", "union", "template", "final", "<=>", "noexcept", "concept", '?', "&&", "||", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "->", '.', "enum", "==", "!=", '^', "extern", '<', '>', "explicit", "export", "export-keyword", '*', '/', '%', '|', "<<", ">>", "<=", ">=", ".*", "->*", "try", "import-keyword", "namespace", "requires", '~', "++", "--", "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static_assert", "static", "thread_local", "mutable", "typename", "override" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                               ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                   ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                          ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                   ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                           ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1092: class-name
                                                                                                         ↳ 145: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                              declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                        ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                            ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                   ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                            ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                    ↳ 657: IDENTIFIER
                                                                                         ↳ 1005: template-name
                                                                                                 ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '+', '-', "using", '=', ';', "alignas", '(', ')', "...", '&', "asm", "*=", "/=", "%=", "+=", "-=", ">>=", "<<=", "&=", "^=", "|=", ',', "::", '[', ']', ':', '{', '}', "virtual", "class", "struct", "union", "template", "final", "<=>", "noexcept", "concept", '?', "&&", "||", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "->", '.', "enum", "==", "!=", '^', "extern", '<', '>', "explicit", "export", "export-keyword", '*', '/', '%', '|', "<<", ">>", "<=", ">=", ".*", "->*", "try", "import-keyword", "namespace", "requires", '~', "++", "--", "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static_assert", "static", "thread_local", "mutable", "typename", "override" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                               ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                   ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                          ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                   ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                           ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1092: class-name
                                                                                                         ↳ 145: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                      declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                                ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                    ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                           ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                    ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                            ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1094: typedef-name
                                                                                                         ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "...", ',', "decltype", '<', '>', "auto" [-Wcounterexamples]
  First example: "template" '<' IDENTIFIER • IDENTIFIER '>' declaration $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                             declaration
                                       ↳ 1059: "template" '<' template-parameter-list                                        '>'
                                                              ↳ 1069: template-parameter
                                                                      ↳ 1067: type-parameter
                                                                              ↳ 1103: type-constraint             IDENTIFIER
                                                                                      ↳ 1085: concept-name
                                                                                              ↳ 163: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                               ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                   ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                          ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                   ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                           ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1093: enum-name
                                                                                                         ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "...", ',', "decltype", '<', '>', "auto" [-Wcounterexamples]
  First example: "template" '<' IDENTIFIER • IDENTIFIER '>' declaration $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                             declaration
                                       ↳ 1059: "template" '<' template-parameter-list                                        '>'
                                                              ↳ 1069: template-parameter
                                                                      ↳ 1067: type-parameter
                                                                              ↳ 1103: type-constraint             IDENTIFIER
                                                                                      ↳ 1085: concept-name
                                                                                              ↳ 163: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                              declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                        ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                            ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                   ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                            ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                    ↳ 657: IDENTIFIER
                                                                                         ↳ 1005: template-name
                                                                                                 ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "...", ',', "decltype", '<', '>', "auto" [-Wcounterexamples]
  First example: "template" '<' IDENTIFIER • IDENTIFIER '>' declaration $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                             declaration
                                       ↳ 1059: "template" '<' template-parameter-list                                        '>'
                                                              ↳ 1069: template-parameter
                                                                      ↳ 1067: type-parameter
                                                                              ↳ 1103: type-constraint             IDENTIFIER
                                                                                      ↳ 1085: concept-name
                                                                                              ↳ 163: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                      declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                                ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                    ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                           ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                    ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                            ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1094: typedef-name
                                                                                                         ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                    function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                               ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                   ↳ 896: ptr-operator                     ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                          ↳ 905: nested-name-specifier '*'
                                                                          ↳ 238: type-specifier                                                   ↳ 659: "::"
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1093: enum-name
                                                                                                         ↳ 297: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • "::" type-name declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                         declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier                  type-name
                                                                                                ↳ 661: namespace-name             "::"
                                                                                                       ↳ 658: namespace-alias
                                                                                                              ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                    function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                               ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                   ↳ 896: ptr-operator                     ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                          ↳ 905: nested-name-specifier '*'
                                                                          ↳ 238: type-specifier                                                   ↳ 659: "::"
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1093: enum-name
                                                                                                         ↳ 297: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • "::" type-name declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                  declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier           type-name
                                                                                                ↳ 661: namespace-name      "::"
                                                                                                       ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '+', '-', "using", '=', ';', "alignas", '(', ')', "...", '&', "asm", "*=", "/=", "%=", "+=", "-=", ">>=", "<<=", "&=", "^=", "|=", ',', "::", '[', ']', ':', '{', '}', "virtual", "class", "struct", "union", "template", "final", "<=>", "noexcept", "concept", '?', "&&", "||", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "->", '.', "enum", "==", "!=", '^', "extern", '<', '>', "explicit", "export", "export-keyword", '*', '/', '%', '|', "<<", ">>", "<=", ">=", ".*", "->*", "try", "import-keyword", "namespace", "requires", '~', "++", "--", "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static_assert", "static", "thread_local", "mutable", "typename", "override" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                               ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                   ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                          ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                   ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                           ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1093: enum-name
                                                                                                         ↳ 297: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                              declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                        ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                            ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                   ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                            ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                    ↳ 657: IDENTIFIER
                                                                                         ↳ 1005: template-name
                                                                                                 ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '+', '-', "using", '=', ';', "alignas", '(', ')', "...", '&', "asm", "*=", "/=", "%=", "+=", "-=", ">>=", "<<=", "&=", "^=", "|=", ',', "::", '[', ']', ':', '{', '}', "virtual", "class", "struct", "union", "template", "final", "<=>", "noexcept", "concept", '?', "&&", "||", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "->", '.', "enum", "==", "!=", '^', "extern", '<', '>', "explicit", "export", "export-keyword", '*', '/', '%', '|', "<<", ">>", "<=", ">=", ".*", "->*", "try", "import-keyword", "namespace", "requires", '~', "++", "--", "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static_assert", "static", "thread_local", "mutable", "typename", "override" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                               ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                   ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                          ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                   ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                           ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1093: enum-name
                                                                                                         ↳ 297: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                      declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                                ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                    ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                           ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                    ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                            ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1094: typedef-name
                                                                                                         ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • "::" type-name declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                         declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier                  type-name
                                                                                                ↳ 661: namespace-name             "::"
                                                                                                       ↳ 658: namespace-alias
                                                                                                              ↳ 651: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • "::" type-name declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                  declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier           type-name
                                                                                                ↳ 661: namespace-name      "::"
                                                                                                       ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • "::" type-name declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                         declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier                  type-name
                                                                                                ↳ 661: namespace-name             "::"
                                                                                                       ↳ 658: namespace-alias
                                                                                                              ↳ 651: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                              declarator                                                    function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                        ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                            ↳ 896: ptr-operator                     ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                   ↳ 905: nested-name-specifier '*'
                                                                          ↳ 238: type-specifier                                            ↳ 659: "::"
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1005: template-name
                                                                                                 ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • "::" type-name declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                         declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier                  type-name
                                                                                                ↳ 661: namespace-name             "::"
                                                                                                       ↳ 658: namespace-alias
                                                                                                              ↳ 651: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                      declarator                                                    function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                                ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                    ↳ 896: ptr-operator                     ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                           ↳ 905: nested-name-specifier '*'
                                                                          ↳ 238: type-specifier                                                    ↳ 659: "::"
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1094: typedef-name
                                                                                                         ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • "::" type-name declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                  declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier           type-name
                                                                                                ↳ 661: namespace-name      "::"
                                                                                                       ↳ 657: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                              declarator                                                    function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                        ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                            ↳ 896: ptr-operator                     ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                   ↳ 905: nested-name-specifier '*'
                                                                          ↳ 238: type-specifier                                            ↳ 659: "::"
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1005: template-name
                                                                                                 ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • "::" type-name declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                  declarator function-body
                                      ↳ 212: decl-specifier decl-specifier-seq
                                                            ↳ 210: decl-specifier
                                                                   ↳ 202: defining-type-specifier
                                                                          ↳ 238: type-specifier
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 999: nested-name-specifier           type-name
                                                                                                ↳ 661: namespace-name      "::"
                                                                                                       ↳ 657: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                      declarator                                                    function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                                ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                    ↳ 896: ptr-operator                     ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                           ↳ 905: nested-name-specifier '*'
                                                                          ↳ 238: type-specifier                                                    ↳ 659: "::"
                                                                                 ↳ 1117: simple-type-specifier
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1094: typedef-name
                                                                                                         ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '+', '-', "using", '=', ';', "alignas", '(', ')', "...", '&', "asm", "*=", "/=", "%=", "+=", "-=", ">>=", "<<=", "&=", "^=", "|=", ',', "::", '[', ']', ':', '{', '}', "virtual", "class", "struct", "union", "template", "final", "<=>", "noexcept", "concept", '?', "&&", "||", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "->", '.', "enum", "==", "!=", '^', "extern", '<', '>', "explicit", "export", "export-keyword", '*', '/', '%', '|', "<<", ">>", "<=", ">=", ".*", "->*", "try", "import-keyword", "namespace", "requires", '~', "++", "--", "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static_assert", "static", "thread_local", "mutable", "typename", "override" [-Wcounterexamples]
  First example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                              declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                        ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                            ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                   ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                            ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                    ↳ 657: IDENTIFIER
                                                                                         ↳ 1005: template-name
                                                                                                 ↳ 1066: IDENTIFIER •
  Second example: decl-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                      declarator                                                            function-body
                                      ↳ 212: decl-specifier decl-specifier-seq                                                ↳ 229: ptr-declarator
                                                            ↳ 210: decl-specifier                                                    ↳ 896: ptr-operator                             ptr-declarator
                                                                   ↳ 202: defining-type-specifier                                           ↳ 905: nested-name-specifier         '*'
                                                                          ↳ 238: type-specifier                                                    ↳ 661: namespace-name    "::"
                                                                                 ↳ 1117: simple-type-specifier                                            ↳ 657: IDENTIFIER
                                                                                         ↳ 1000: type-name
                                                                                                 ↳ 1094: typedef-name
                                                                                                         ↳ 1124: IDENTIFIER •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "operator" "delete" • '[' ']' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                     ';'
                                      ↳ 230: noptr-declarator                                                                         parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                             attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: operator-function-id
                                                                  ↳ 759: "operator" overloadable-operator
                                                                                    ↳ 765: "delete" • '[' ']'
  Second example: "operator" "delete" • '[' '[' attribute-list ']' ']' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                            ';'
                                      ↳ 230: noptr-declarator                                                                                                parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                 attribute-specifier-seq
                                                    ↳ 232: id-expression                                          ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                        ↳ 50: '[' '[' attribute-list ']' ']'
                                                                  ↳ 1155: operator-function-id
                                                                          ↳ 759: "operator" overloadable-operator
                                                                                            ↳ 763: "delete" •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "operator" "new" • '[' ']' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                  ';'
                                      ↳ 230: noptr-declarator                                                                      parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                          attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: operator-function-id
                                                                  ↳ 759: "operator" overloadable-operator
                                                                                    ↳ 764: "new" • '[' ']'
  Second example: "operator" "new" • '[' '[' attribute-list ']' ']' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                            ';'
                                      ↳ 230: noptr-declarator                                                                                                parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                 attribute-specifier-seq
                                                    ↳ 232: id-expression                                          ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                        ↳ 50: '[' '[' attribute-list ']' ']'
                                                                  ↳ 1155: operator-function-id
                                                                          ↳ 759: "operator" overloadable-operator
                                                                                            ↳ 762: "new" •
cplusplus.y: warning: shift/reduce conflict on token '<' [-Wcounterexamples]
  First example: "operator" overloadable-operator • '<' '>' parameters-and-qualifiers trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                                                                           function-body
                                      ↳ 230: noptr-declarator                                                               parameters-and-qualifiers trailing-return-type
                                             ↳ 725: declarator-id
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1155: operator-function-id
                                                                          ↳ 760: "operator" overloadable-operator • '<' '>'
  Second example: "operator" overloadable-operator • '<' '>' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                   ';'
                                      ↳ 230: noptr-declarator                                                                       parameters-and-qualifiers trailing-return-type
                                             ↳ 725: declarator-id
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1160: template-id
                                                                          ↳ 1062: operator-function-id                      '<' '>'
                                                                                  ↳ 759: "operator" overloadable-operator •
cplusplus.y: warning: shift/reduce conflict on token '<' [-Wcounterexamples]
  First example: "operator" overloadable-operator • '<' template-argument-list '>' parameters-and-qualifiers trailing-return-type function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                                                                                                  function-body
                                      ↳ 230: noptr-declarator                                                                                      parameters-and-qualifiers trailing-return-type
                                             ↳ 725: declarator-id
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1155: operator-function-id
                                                                          ↳ 761: "operator" overloadable-operator • '<' template-argument-list '>'
  Second example: "operator" overloadable-operator • '<' '>' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                   ';'
                                      ↳ 230: noptr-declarator                                                                       parameters-and-qualifiers trailing-return-type
                                             ↳ 725: declarator-id
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1160: template-id
                                                                          ↳ 1062: operator-function-id                      '<' '>'
                                                                                  ↳ 759: "operator" overloadable-operator •
cplusplus.y: warning: shift/reduce conflict on token '<' [-Wcounterexamples]
  First example: declarator "requires" '(' "new" template-name • '<' '>' fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                            function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                                  fold-operator "..." ')'
                                                                                                   ↳ 124: new-expression
                                                                                                          ↳ 673: "new" new-type-id
                                                                                                                       ↳ 692: type-specifier-seq
                                                                                                                              ↳ 1121: type-specifier
                                                                                                                                      ↳ 1117: simple-type-specifier
                                                                                                                                              ↳ 1000: type-name
                                                                                                                                                      ↳ 1092: class-name
                                                                                                                                                              ↳ 146: simple-template-id
                                                                                                                                                                     ↳ 997: template-name • '<' '>'
  Second example: declarator "requires" '(' "new" template-name • '<' "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                      function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                            fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                                    ↳ 374: '<'
                                                                                                          ↳ 1140: new-expression
                                                                                                                  ↳ 673: "new" new-type-id
                                                                                                                               ↳ 692: type-specifier-seq
                                                                                                                                      ↳ 1121: type-specifier
                                                                                                                                              ↳ 1117: simple-type-specifier
                                                                                                                                                      ↳ 1005: template-name •
cplusplus.y: warning: shift/reduce conflict on token '<' [-Wcounterexamples]
  First example: declarator "requires" '(' "new" template-name • '<' template-argument-list '>' fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                                                   function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                                                         fold-operator "..." ')'
                                                                                                   ↳ 124: new-expression
                                                                                                          ↳ 673: "new" new-type-id
                                                                                                                       ↳ 692: type-specifier-seq
                                                                                                                              ↳ 1121: type-specifier
                                                                                                                                      ↳ 1117: simple-type-specifier
                                                                                                                                              ↳ 1000: type-name
                                                                                                                                                      ↳ 1092: class-name
                                                                                                                                                              ↳ 146: simple-template-id
                                                                                                                                                                     ↳ 998: template-name • '<' template-argument-list '>'
  Second example: declarator "requires" '(' "new" template-name • '<' "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                      function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                            fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                                    ↳ 374: '<'
                                                                                                          ↳ 1140: new-expression
                                                                                                                  ↳ 673: "new" new-type-id
                                                                                                                               ↳ 692: type-specifier-seq
                                                                                                                                      ↳ 1121: type-specifier
                                                                                                                                              ↳ 1117: simple-type-specifier
                                                                                                                                                      ↳ 1005: template-name •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier • "alignas" '(' type-id ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                               attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: conversion-function-id
                                                                  ↳ 179: "operator" conversion-type-id
                                                                                    ↳ 180: type-specifier-seq
                                                                                           ↳ 1122: type-specifier attribute-specifier-seq
                                                                                                                  ↳ 54: attribute-specifier
                                                                                                                        ↳ 52: alignment-specifier
                                                                                                                              ↳ 15: • "alignas" '(' type-id ')'
  Second example: "operator" type-specifier • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 180: type-specifier-seq
                                                                                                   ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier • "alignas" '(' type-id "..." ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                             ';'
                                      ↳ 230: noptr-declarator                                                                                                                                 parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                     attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: conversion-function-id
                                                                  ↳ 179: "operator" conversion-type-id
                                                                                    ↳ 180: type-specifier-seq
                                                                                           ↳ 1122: type-specifier attribute-specifier-seq
                                                                                                                  ↳ 54: attribute-specifier
                                                                                                                        ↳ 52: alignment-specifier
                                                                                                                              ↳ 16: • "alignas" '(' type-id "..." ')'
  Second example: "operator" type-specifier • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 180: type-specifier-seq
                                                                                                   ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier • "alignas" '(' constant-expression ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                   ';'
                                      ↳ 230: noptr-declarator                                                                                                                                       parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: conversion-function-id
                                                                  ↳ 179: "operator" conversion-type-id
                                                                                    ↳ 180: type-specifier-seq
                                                                                           ↳ 1122: type-specifier attribute-specifier-seq
                                                                                                                  ↳ 54: attribute-specifier
                                                                                                                        ↳ 52: alignment-specifier
                                                                                                                              ↳ 17: • "alignas" '(' constant-expression ')'
  Second example: "operator" type-specifier • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 180: type-specifier-seq
                                                                                                   ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier • "alignas" '(' constant-expression "..." ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                         ';'
                                      ↳ 230: noptr-declarator                                                                                                                                             parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                 attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: conversion-function-id
                                                                  ↳ 179: "operator" conversion-type-id
                                                                                    ↳ 180: type-specifier-seq
                                                                                           ↳ 1122: type-specifier attribute-specifier-seq
                                                                                                                  ↳ 54: attribute-specifier
                                                                                                                        ↳ 52: alignment-specifier
                                                                                                                              ↳ 18: • "alignas" '(' constant-expression "..." ')'
  Second example: "operator" type-specifier • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                           attribute-specifier-seq
                                                    ↳ 232: id-expression                                                    ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                  ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                        ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 180: type-specifier-seq
                                                                                                   ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "alignas" '(' type-specifier • '[' '[' attribute-list ']' ']' ')' declarator ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                   declarator ';'
                                      ↳ 54: alignment-specifier
                                            ↳ 15: "alignas" '(' type-id                                                                     ')'
                                                                ↳ 1090: type-specifier-seq
                                                                        ↳ 1122: type-specifier attribute-specifier-seq
                                                                                               ↳ 54: attribute-specifier
                                                                                                     ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: "alignas" '(' type-specifier • '[' ']' parameters-and-qualifiers trailing-return-type ')' declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                                            declarator ';'
                                      ↳ 54: attribute-specifier
                                            ↳ 52: alignment-specifier
                                                  ↳ 15: "alignas" '(' type-id                                                                                                        ')'
                                                                      ↳ 1091: type-specifier-seq       abstract-declarator
                                                                              ↳ 1121: type-specifier • ↳ 2: noptr-abstract-declarator parameters-and-qualifiers trailing-return-type
                                                                                                            ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "alignas" '(' type-specifier • '[' '[' attribute-using-prefix attribute-list ']' ']' ')' declarator ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                          declarator ';'
                                      ↳ 54: alignment-specifier
                                            ↳ 15: "alignas" '(' type-id                                                                                            ')'
                                                                ↳ 1090: type-specifier-seq
                                                                        ↳ 1122: type-specifier attribute-specifier-seq
                                                                                               ↳ 54: attribute-specifier
                                                                                                     ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: "alignas" '(' type-specifier • '[' ']' parameters-and-qualifiers trailing-return-type ')' declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                                            declarator ';'
                                      ↳ 54: attribute-specifier
                                            ↳ 52: alignment-specifier
                                                  ↳ 15: "alignas" '(' type-id                                                                                                        ')'
                                                                      ↳ 1091: type-specifier-seq       abstract-declarator
                                                                              ↳ 1121: type-specifier • ↳ 2: noptr-abstract-declarator parameters-and-qualifiers trailing-return-type
                                                                                                            ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token "class" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "class" IDENTIFIER declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                       declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1118: elaborated-type-specifier
                                                                                                                                                                                                        ↳ 267: class-key        IDENTIFIER
                                                                                                                                                                                                               ↳ 142: • "class"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "class" IDENTIFIER declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                            declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1118: elaborated-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 267: class-key      IDENTIFIER
                                                                                                                                                ↳ 179: "operator" conversion-type-id                                                                ↳ 142: "class"
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "struct" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "struct" IDENTIFIER declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                        declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1118: elaborated-type-specifier
                                                                                                                                                                                                        ↳ 267: class-key         IDENTIFIER
                                                                                                                                                                                                               ↳ 143: • "struct"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "struct" IDENTIFIER declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                             declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1118: elaborated-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 267: class-key       IDENTIFIER
                                                                                                                                                ↳ 179: "operator" conversion-type-id                                                                ↳ 143: "struct"
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "union" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "union" IDENTIFIER declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                       declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1118: elaborated-type-specifier
                                                                                                                                                                                                        ↳ 267: class-key        IDENTIFIER
                                                                                                                                                                                                               ↳ 144: • "union"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "union" IDENTIFIER declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                            declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1118: elaborated-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 267: class-key      IDENTIFIER
                                                                                                                                                ↳ 179: "operator" conversion-type-id                                                                ↳ 144: "union"
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "alignas" '(' type-specifier • IDENTIFIER ')' declarator ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                          declarator ';'
                                      ↳ 54: alignment-specifier
                                            ↳ 15: "alignas" '(' type-id                                                                            ')'
                                                                ↳ 1090: type-specifier-seq
                                                                        ↳ 1123: type-specifier type-specifier-seq
                                                                                               ↳ 1121: type-specifier
                                                                                                       ↳ 1117: simple-type-specifier
                                                                                                               ↳ 1000: type-name
                                                                                                                       ↳ 1092: class-name
                                                                                                                               ↳ 145: • IDENTIFIER
  Second example: "alignas" '(' type-specifier • IDENTIFIER "::" '*' ')' declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                   declarator ';'
                                      ↳ 54: attribute-specifier
                                            ↳ 52: alignment-specifier
                                                  ↳ 15: "alignas" '(' type-id                                                                               ')'
                                                                      ↳ 1091: type-specifier-seq       abstract-declarator
                                                                              ↳ 1121: type-specifier • ↳ 1: ptr-abstract-declarator
                                                                                                            ↳ 893: ptr-operator
                                                                                                                   ↳ 905: nested-name-specifier         '*'
                                                                                                                          ↳ 661: namespace-name    "::"
                                                                                                                                 ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "alignas" '(' type-specifier • IDENTIFIER "auto" ')' declarator ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                        declarator ';'
                                      ↳ 54: alignment-specifier
                                            ↳ 15: "alignas" '(' type-id                                                                                          ')'
                                                                ↳ 1090: type-specifier-seq
                                                                        ↳ 1123: type-specifier type-specifier-seq
                                                                                               ↳ 1121: type-specifier
                                                                                                       ↳ 1117: simple-type-specifier
                                                                                                               ↳ 1003: placeholder-type-specifier
                                                                                                                       ↳ 852: type-constraint             "auto"
                                                                                                                              ↳ 1085: concept-name
                                                                                                                                      ↳ 163: • IDENTIFIER
  Second example: "alignas" '(' type-specifier • IDENTIFIER "::" '*' ')' declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                   declarator ';'
                                      ↳ 54: attribute-specifier
                                            ↳ 52: alignment-specifier
                                                  ↳ 15: "alignas" '(' type-id                                                                               ')'
                                                                      ↳ 1091: type-specifier-seq       abstract-declarator
                                                                              ↳ 1121: type-specifier • ↳ 1: ptr-abstract-declarator
                                                                                                            ↳ 893: ptr-operator
                                                                                                                   ↳ 905: nested-name-specifier         '*'
                                                                                                                          ↳ 661: namespace-name    "::"
                                                                                                                                 ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token "const" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "const" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                     declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1120: cv-qualifier
                                                                                                                                                                                                        ↳ 185: • "const"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "const" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                          declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1120: cv-qualifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 185: "const"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "volatile" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "volatile" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                        declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1120: cv-qualifier
                                                                                                                                                                                                        ↳ 186: • "volatile"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "volatile" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                             declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1120: cv-qualifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 186: "volatile"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "decltype" [-Wcounterexamples]
  First example: "alignas" '(' type-specifier • "decltype" '(' expression ')' ')' declarator ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                     declarator ';'
                                      ↳ 54: alignment-specifier
                                            ↳ 15: "alignas" '(' type-id                                                                                       ')'
                                                                ↳ 1090: type-specifier-seq
                                                                        ↳ 1123: type-specifier type-specifier-seq
                                                                                               ↳ 1121: type-specifier
                                                                                                       ↳ 1117: simple-type-specifier
                                                                                                               ↳ 1002: decltype-specifier
                                                                                                                       ↳ 233: • "decltype" '(' expression ')'
  Second example: "alignas" '(' type-specifier • "decltype" '(' expression ')' "::" '*' ')' declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                                      declarator ';'
                                      ↳ 54: attribute-specifier
                                            ↳ 52: alignment-specifier
                                                  ↳ 15: "alignas" '(' type-id                                                                                                  ')'
                                                                      ↳ 1091: type-specifier-seq       abstract-declarator
                                                                              ↳ 1121: type-specifier • ↳ 1: ptr-abstract-declarator
                                                                                                            ↳ 893: ptr-operator
                                                                                                                   ↳ 905: nested-name-specifier                            '*'
                                                                                                                          ↳ 662: decltype-specifier                   "::"
                                                                                                                                 ↳ 233: "decltype" '(' expression ')'
cplusplus.y: warning: shift/reduce conflict on token "enum" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "enum" IDENTIFIER declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                      declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1118: elaborated-type-specifier
                                                                                                                                                                                                        ↳ 274: elaborated-enum-specifier
                                                                                                                                                                                                               ↳ 265: • "enum" IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "enum" enum-head-name ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 213: block-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 103: opaque-enum-declaration
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 755: enum-key      enum-head-name ';'
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 294: "enum"
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "enum" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "enum" nested-name-specifier IDENTIFIER declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                                            declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1118: elaborated-type-specifier
                                                                                                                                                                                                        ↳ 274: elaborated-enum-specifier
                                                                                                                                                                                                               ↳ 266: • "enum" nested-name-specifier IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "enum" enum-head-name ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 213: block-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 103: opaque-enum-declaration
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 755: enum-key      enum-head-name ';'
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 294: "enum"
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "alignas" '(' type-specifier • IDENTIFIER ')' declarator ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                          declarator ';'
                                      ↳ 54: alignment-specifier
                                            ↳ 15: "alignas" '(' type-id                                                                            ')'
                                                                ↳ 1090: type-specifier-seq
                                                                        ↳ 1123: type-specifier type-specifier-seq
                                                                                               ↳ 1121: type-specifier
                                                                                                       ↳ 1117: simple-type-specifier
                                                                                                               ↳ 1000: type-name
                                                                                                                       ↳ 1093: enum-name
                                                                                                                               ↳ 297: • IDENTIFIER
  Second example: "alignas" '(' type-specifier • IDENTIFIER "::" '*' ')' declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                   declarator ';'
                                      ↳ 54: attribute-specifier
                                            ↳ 52: alignment-specifier
                                                  ↳ 15: "alignas" '(' type-id                                                                               ')'
                                                                      ↳ 1091: type-specifier-seq       abstract-declarator
                                                                              ↳ 1121: type-specifier • ↳ 1: ptr-abstract-declarator
                                                                                                            ↳ 893: ptr-operator
                                                                                                                   ↳ 905: nested-name-specifier         '*'
                                                                                                                          ↳ 661: namespace-name    "::"
                                                                                                                                 ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "alignas" '(' type-specifier • IDENTIFIER "::" type-name ')' declarator ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                              declarator ';'
                                      ↳ 54: alignment-specifier
                                            ↳ 15: "alignas" '(' type-id                                                                                                ')'
                                                                ↳ 1090: type-specifier-seq
                                                                        ↳ 1123: type-specifier type-specifier-seq
                                                                                               ↳ 1121: type-specifier
                                                                                                       ↳ 1117: simple-type-specifier
                                                                                                               ↳ 999: nested-name-specifier                  type-name
                                                                                                                      ↳ 661: namespace-name             "::"
                                                                                                                             ↳ 658: namespace-alias
                                                                                                                                    ↳ 651: • IDENTIFIER
  Second example: "alignas" '(' type-specifier • IDENTIFIER "::" '*' ')' declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                   declarator ';'
                                      ↳ 54: attribute-specifier
                                            ↳ 52: alignment-specifier
                                                  ↳ 15: "alignas" '(' type-id                                                                               ')'
                                                                      ↳ 1091: type-specifier-seq       abstract-declarator
                                                                              ↳ 1121: type-specifier • ↳ 1: ptr-abstract-declarator
                                                                                                            ↳ 893: ptr-operator
                                                                                                                   ↳ 905: nested-name-specifier         '*'
                                                                                                                          ↳ 661: namespace-name    "::"
                                                                                                                                 ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "alignas" '(' type-specifier • IDENTIFIER "::" type-name ')' declarator ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                       declarator ';'
                                      ↳ 54: alignment-specifier
                                            ↳ 15: "alignas" '(' type-id                                                                                         ')'
                                                                ↳ 1090: type-specifier-seq
                                                                        ↳ 1123: type-specifier type-specifier-seq
                                                                                               ↳ 1121: type-specifier
                                                                                                       ↳ 1117: simple-type-specifier
                                                                                                               ↳ 999: nested-name-specifier           type-name
                                                                                                                      ↳ 661: namespace-name      "::"
                                                                                                                             ↳ 657: • IDENTIFIER
  Second example: "alignas" '(' type-specifier • IDENTIFIER "::" '*' ')' declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                   declarator ';'
                                      ↳ 54: attribute-specifier
                                            ↳ 52: alignment-specifier
                                                  ↳ 15: "alignas" '(' type-id                                                                               ')'
                                                                      ↳ 1091: type-specifier-seq       abstract-declarator
                                                                              ↳ 1121: type-specifier • ↳ 1: ptr-abstract-declarator
                                                                                                            ↳ 893: ptr-operator
                                                                                                                   ↳ 905: nested-name-specifier         '*'
                                                                                                                          ↳ 661: namespace-name    "::"
                                                                                                                                 ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: "alignas" '(' type-specifier • "::" type-name ')' declarator ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                             declarator ';'
                                      ↳ 54: alignment-specifier
                                            ↳ 15: "alignas" '(' type-id                                                                               ')'
                                                                ↳ 1090: type-specifier-seq
                                                                        ↳ 1123: type-specifier type-specifier-seq
                                                                                               ↳ 1121: type-specifier
                                                                                                       ↳ 1117: simple-type-specifier
                                                                                                               ↳ 999: nested-name-specifier type-name
                                                                                                                      ↳ 659: • "::"
  Second example: "alignas" '(' type-specifier • "::" '*' ')' declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                           declarator ';'
                                      ↳ 54: attribute-specifier
                                            ↳ 52: alignment-specifier
                                                  ↳ 15: "alignas" '(' type-id                                                                       ')'
                                                                      ↳ 1091: type-specifier-seq       abstract-declarator
                                                                              ↳ 1121: type-specifier • ↳ 1: ptr-abstract-declarator
                                                                                                            ↳ 893: ptr-operator
                                                                                                                   ↳ 905: nested-name-specifier '*'
                                                                                                                          ↳ 659: "::"
cplusplus.y: warning: shift/reduce conflict on token "auto" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "auto" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                       declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1003: placeholder-type-specifier
                                                                                                                                                                                                                ↳ 853: • "auto"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "auto" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                              declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1003: placeholder-type-specifier
                                                                                                                                                ↳ 179: "operator" conversion-type-id                                                                 ↳ 853: "auto"
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "decltype" [-Wcounterexamples]
  First example: "alignas" '(' type-specifier • "decltype" '(' "auto" ')' ')' declarator ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                 declarator ';'
                                      ↳ 54: alignment-specifier
                                            ↳ 15: "alignas" '(' type-id                                                                                   ')'
                                                                ↳ 1090: type-specifier-seq
                                                                        ↳ 1123: type-specifier type-specifier-seq
                                                                                               ↳ 1121: type-specifier
                                                                                                       ↳ 1117: simple-type-specifier
                                                                                                               ↳ 1003: placeholder-type-specifier
                                                                                                                       ↳ 855: • "decltype" '(' "auto" ')'
  Second example: "alignas" '(' type-specifier • "decltype" '(' expression ')' "::" '*' ')' declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                                      declarator ';'
                                      ↳ 54: attribute-specifier
                                            ↳ 52: alignment-specifier
                                                  ↳ 15: "alignas" '(' type-id                                                                                                  ')'
                                                                      ↳ 1091: type-specifier-seq       abstract-declarator
                                                                              ↳ 1121: type-specifier • ↳ 1: ptr-abstract-declarator
                                                                                                            ↳ 893: ptr-operator
                                                                                                                   ↳ 905: nested-name-specifier                            '*'
                                                                                                                          ↳ 662: decltype-specifier                   "::"
                                                                                                                                 ↳ 233: "decltype" '(' expression ')'
cplusplus.y: warning: shift/reduce conflict on token "char" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "char" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1006: • "char"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "char" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1006: "char"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "char8_t" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "char8_t" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1007: • "char8_t"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "char8_t" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1007: "char8_t"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "char16_t" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "char16_t" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1008: • "char16_t"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "char16_t" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1008: "char16_t"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "char32_t" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "char32_t" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1009: • "char32_t"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "char32_t" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1009: "char32_t"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "wchar_t" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "wchar_t" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1010: • "wchar_t"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "wchar_t" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1010: "wchar_t"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "bool" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "bool" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1011: • "bool"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "bool" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1011: "bool"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "short" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "short" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1012: • "short"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "short" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1012: "short"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "int" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "int" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1013: • "int"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "int" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1013: "int"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "long" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "long" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1014: • "long"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "long" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1014: "long"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "signed" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "signed" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1015: • "signed"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "signed" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1015: "signed"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "unsigned" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "unsigned" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1016: • "unsigned"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "unsigned" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1016: "unsigned"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "float" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "float" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1017: • "float"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "float" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1017: "float"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "double" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "double" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1018: • "double"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "double" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1018: "double"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "void" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "void" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1117: simple-type-specifier
                                                                                                                                                                                                        ↳ 1019: • "void"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "void" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                 declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1117: simple-type-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1019: "void"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "alignas" '(' type-specifier • IDENTIFIER ')' declarator ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                   declarator ';'
                                      ↳ 54: alignment-specifier
                                            ↳ 15: "alignas" '(' type-id                                                                     ')'
                                                                ↳ 1090: type-specifier-seq
                                                                        ↳ 1123: type-specifier type-specifier-seq
                                                                                               ↳ 1121: type-specifier
                                                                                                       ↳ 1117: simple-type-specifier
                                                                                                               ↳ 1005: template-name
                                                                                                                       ↳ 1066: • IDENTIFIER
  Second example: "alignas" '(' type-specifier • IDENTIFIER "::" '*' ')' declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                   declarator ';'
                                      ↳ 54: attribute-specifier
                                            ↳ 52: alignment-specifier
                                                  ↳ 15: "alignas" '(' type-id                                                                               ')'
                                                                      ↳ 1091: type-specifier-seq       abstract-declarator
                                                                              ↳ 1121: type-specifier • ↳ 1: ptr-abstract-declarator
                                                                                                            ↳ 893: ptr-operator
                                                                                                                   ↳ 905: nested-name-specifier         '*'
                                                                                                                          ↳ 661: namespace-name    "::"
                                                                                                                                 ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "alignas" '(' type-specifier • IDENTIFIER ')' declarator ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                           declarator ';'
                                      ↳ 54: alignment-specifier
                                            ↳ 15: "alignas" '(' type-id                                                                             ')'
                                                                ↳ 1090: type-specifier-seq
                                                                        ↳ 1123: type-specifier type-specifier-seq
                                                                                               ↳ 1121: type-specifier
                                                                                                       ↳ 1117: simple-type-specifier
                                                                                                               ↳ 1000: type-name
                                                                                                                       ↳ 1094: typedef-name
                                                                                                                               ↳ 1124: • IDENTIFIER
  Second example: "alignas" '(' type-specifier • IDENTIFIER "::" '*' ')' declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 694: attribute-specifier-seq                                                                                                   declarator ';'
                                      ↳ 54: attribute-specifier
                                            ↳ 52: alignment-specifier
                                                  ↳ 15: "alignas" '(' type-id                                                                               ')'
                                                                      ↳ 1091: type-specifier-seq       abstract-declarator
                                                                              ↳ 1121: type-specifier • ↳ 1: ptr-abstract-declarator
                                                                                                            ↳ 893: ptr-operator
                                                                                                                   ↳ 905: nested-name-specifier         '*'
                                                                                                                          ↳ 661: namespace-name    "::"
                                                                                                                                 ↳ 657: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token "typename" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "typename" nested-name-specifier IDENTIFIER declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1119: typename-specifier
                                                                                                                                                                                                        ↳ 1126: • "typename" nested-name-specifier IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "typename" nested-name-specifier IDENTIFIER declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                                               declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1119: typename-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1126: "typename" nested-name-specifier IDENTIFIER
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "typename" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "typename" nested-name-specifier simple-template-id declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                                                  declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1119: typename-specifier
                                                                                                                                                                                                        ↳ 1127: • "typename" nested-name-specifier simple-template-id
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "typename" nested-name-specifier IDENTIFIER declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                                               declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1119: typename-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1126: "typename" nested-name-specifier IDENTIFIER
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token "typename" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "typename" nested-name-specifier "template" simple-template-id declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                                                             declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 180: type-specifier-seq
                                                                                                                                                                 ↳ 1123: type-specifier type-specifier-seq
                                                                                                                                                                                        ↳ 1121: type-specifier
                                                                                                                                                                                                ↳ 1119: typename-specifier
                                                                                                                                                                                                        ↳ 1128: • "typename" nested-name-specifier "template" simple-template-id
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier • "typename" nested-name-specifier IDENTIFIER declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                              declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                         ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                             ↳ 401: decl-specifier-seq                                                               declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                            ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                           ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                               ↳ 1119: typename-specifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                       ↳ 1126: "typename" nested-name-specifier IDENTIFIER
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq
                                                                                                                                                                         ↳ 1121: type-specifier •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • IDENTIFIER "::" '*' declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 905: nested-name-specifier                   '*'
                                                                                                                                                                                                  ↳ 660: type-name                   "::"
                                                                                                                                                                                                         ↳ 1092: class-name
                                                                                                                                                                                                                 ↳ 145: • IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "decltype" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • "decltype" '(' expression ')' "::" '*' declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                                     declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 905: nested-name-specifier                              '*'
                                                                                                                                                                                                  ↳ 662: decltype-specifier                     "::"
                                                                                                                                                                                                         ↳ 233: • "decltype" '(' expression ')'
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • "decltype" '(' expression ')' "::" '*' ptr-declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 695: declarator                                                                               ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                                                       ↳ 896: ptr-operator                                                ptr-declarator
                                                                                                                          ↳ 886: id-expression                                                                            ↳ 905: nested-name-specifier                            '*'
                                                                                                                                 ↳ 463: unqualified-id                                                                           ↳ 662: decltype-specifier                   "::"
                                                                                                                                        ↳ 1156: conversion-function-id                                                                  ↳ 233: "decltype" '(' expression ')'
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • IDENTIFIER "::" '*' declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 905: nested-name-specifier                   '*'
                                                                                                                                                                                                  ↳ 660: type-name                   "::"
                                                                                                                                                                                                         ↳ 1093: enum-name
                                                                                                                                                                                                                 ↳ 297: • IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • IDENTIFIER "::" '*' declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                         declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 905: nested-name-specifier                  '*'
                                                                                                                                                                                                  ↳ 661: namespace-name             "::"
                                                                                                                                                                                                         ↳ 658: namespace-alias
                                                                                                                                                                                                                ↳ 651: • IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • IDENTIFIER "::" '*' declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                  declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 905: nested-name-specifier           '*'
                                                                                                                                                                                                  ↳ 661: namespace-name      "::"
                                                                                                                                                                                                         ↳ 657: • IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • "::" '*' declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                        declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 905: nested-name-specifier '*'
                                                                                                                                                                                                  ↳ 659: • "::"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • "::" '*' ptr-declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 695: declarator                                                    ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                                                       ↳ 896: ptr-operator                     ptr-declarator
                                                                                                                          ↳ 886: id-expression                                                                            ↳ 905: nested-name-specifier '*'
                                                                                                                                 ↳ 463: unqualified-id                                                                           ↳ 659: "::"
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token '*' [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • '*' declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                      declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 897: • '*'
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • '*' ptr-declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 695: declarator                                ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                                                       ↳ 896: ptr-operator ptr-declarator
                                                                                                                          ↳ 886: id-expression                                                                            ↳ 897: '*'
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token '*' [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • '*' attribute-specifier-seq declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                            declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 898: • '*' attribute-specifier-seq
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • '*' ptr-declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 695: declarator                                ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                                                       ↳ 896: ptr-operator ptr-declarator
                                                                                                                          ↳ 886: id-expression                                                                            ↳ 897: '*'
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token '*' [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • '*' cv-qualifier-seq declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                     declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 899: • '*' cv-qualifier-seq
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • '*' ptr-declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 695: declarator                                ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                                                       ↳ 896: ptr-operator ptr-declarator
                                                                                                                          ↳ 886: id-expression                                                                            ↳ 897: '*'
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token '*' [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • '*' attribute-specifier-seq cv-qualifier-seq declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                             declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 900: • '*' attribute-specifier-seq cv-qualifier-seq
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • '*' ptr-declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 695: declarator                                ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                                                       ↳ 896: ptr-operator ptr-declarator
                                                                                                                          ↳ 886: id-expression                                                                            ↳ 897: '*'
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token '&' [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • '&' declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                      declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 901: • '&'
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • '&' ptr-declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 695: declarator                                ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                                                       ↳ 896: ptr-operator ptr-declarator
                                                                                                                          ↳ 886: id-expression                                                                            ↳ 901: '&'
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token '&' [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • '&' attribute-specifier-seq declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                            declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 902: • '&' attribute-specifier-seq
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • '&' ptr-declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 695: declarator                                ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                                                       ↳ 896: ptr-operator ptr-declarator
                                                                                                                          ↳ 886: id-expression                                                                            ↳ 901: '&'
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "&&" [-Wcounterexamples]
  First example: declarator "requires" "operator" type-specifier-seq • "&&" "&&" primary-expression function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 174: constraint-logical-and-expression                                                      "&&" primary-expression
                                                                                 ↳ 173: primary-expression
                                                                                        ↳ 886: id-expression
                                                                                               ↳ 463: conversion-function-id
                                                                                                      ↳ 179: "operator" conversion-type-id
                                                                                                                        ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                  ↳ 177: ptr-operator
                                                                                                                                                         ↳ 903: • "&&"
  Second example: declarator "requires" "operator" type-specifier-seq • "&&" primary-expression function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                    function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 174: constraint-logical-and-expression                                          "&&" primary-expression
                                                                                 ↳ 173: primary-expression
                                                                                        ↳ 886: id-expression
                                                                                               ↳ 463: unqualified-id
                                                                                                      ↳ 1156: conversion-function-id
                                                                                                              ↳ 179: "operator" conversion-type-id
                                                                                                                                ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "&&" [-Wcounterexamples]
  First example: declarator "requires" "operator" type-specifier-seq • "&&" attribute-specifier-seq "&&" primary-expression function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                       function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 174: constraint-logical-and-expression                                                                             "&&" primary-expression
                                                                                 ↳ 173: primary-expression
                                                                                        ↳ 886: id-expression
                                                                                               ↳ 463: conversion-function-id
                                                                                                      ↳ 179: "operator" conversion-type-id
                                                                                                                        ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                  ↳ 177: ptr-operator
                                                                                                                                                         ↳ 904: • "&&" attribute-specifier-seq
  Second example: declarator "requires" "operator" type-specifier-seq • "&&" primary-expression function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                    function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 174: constraint-logical-and-expression                                          "&&" primary-expression
                                                                                 ↳ 173: primary-expression
                                                                                        ↳ 886: id-expression
                                                                                               ↳ 463: unqualified-id
                                                                                                      ↳ 1156: conversion-function-id
                                                                                                              ↳ 179: "operator" conversion-type-id
                                                                                                                                ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • IDENTIFIER '<' '>' "::" '*' declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                                                 declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 905: nested-name-specifier                                          '*'
                                                                                                                                                                                                  ↳ 660: type-name                                          "::"
                                                                                                                                                                                                         ↳ 1092: class-name
                                                                                                                                                                                                                 ↳ 146: simple-template-id
                                                                                                                                                                                                                        ↳ 997: template-name        '<' '>'
                                                                                                                                                                                                                               ↳ 1066: • IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • IDENTIFIER "::" '*' declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                           declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: conversion-function-id
                                                                                                                                        ↳ 179: "operator" conversion-type-id
                                                                                                                                                          ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                    ↳ 177: ptr-operator
                                                                                                                                                                                           ↳ 905: nested-name-specifier                    '*'
                                                                                                                                                                                                  ↳ 660: type-name                    "::"
                                                                                                                                                                                                         ↳ 1094: typedef-name
                                                                                                                                                                                                                 ↳ 1124: • IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                     ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                         ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                        ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 180: type-specifier-seq •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                        ';'
                                                     ↳ 266: "enum" nested-name-specifier                   IDENTIFIER
                                                                   ↳ 660: type-name                   "::"
                                                                          ↳ 1092: class-name
                                                                                  ↳ 145: IDENTIFIER •
  Second example: "enum" IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                             declarator                                                    function-body
                                      ↳ 210: decl-specifier                                          ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                 ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                          ↳ 905: nested-name-specifier '*'
                                                           ↳ 1118: elaborated-type-specifier                              ↳ 659: "::"
                                                                   ↳ 274: elaborated-enum-specifier
                                                                          ↳ 265: "enum" IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                        ';'
                                                     ↳ 266: "enum" nested-name-specifier                   IDENTIFIER
                                                                   ↳ 660: type-name                   "::"
                                                                          ↳ 1092: class-name
                                                                                  ↳ 145: IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                        ';'
                                                     ↳ 266: "enum" nested-name-specifier                   IDENTIFIER
                                                                   ↳ 660: type-name                   "::"
                                                                          ↳ 1093: enum-name
                                                                                  ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                        ';'
                                                     ↳ 266: "enum" nested-name-specifier                   IDENTIFIER
                                                                   ↳ 660: type-name                   "::"
                                                                          ↳ 1092: class-name
                                                                                  ↳ 145: IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                       ';'
                                                     ↳ 266: "enum" nested-name-specifier                  IDENTIFIER
                                                                   ↳ 661: namespace-name             "::"
                                                                          ↳ 658: namespace-alias
                                                                                 ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                        ';'
                                                     ↳ 266: "enum" nested-name-specifier                   IDENTIFIER
                                                                   ↳ 660: type-name                   "::"
                                                                          ↳ 1092: class-name
                                                                                  ↳ 145: IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                ';'
                                                     ↳ 266: "enum" nested-name-specifier           IDENTIFIER
                                                                   ↳ 661: namespace-name      "::"
                                                                          ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                        ';'
                                                     ↳ 266: "enum" nested-name-specifier                   IDENTIFIER
                                                                   ↳ 660: type-name                   "::"
                                                                          ↳ 1092: class-name
                                                                                  ↳ 145: IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                         ';'
                                                     ↳ 266: "enum" nested-name-specifier                    IDENTIFIER
                                                                   ↳ 660: type-name                    "::"
                                                                          ↳ 1094: typedef-name
                                                                                  ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "enum" IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                             declarator                                                    function-body
                                      ↳ 210: decl-specifier                                          ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                 ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                          ↳ 905: nested-name-specifier '*'
                                                           ↳ 1118: elaborated-type-specifier                              ↳ 659: "::"
                                                                   ↳ 274: elaborated-enum-specifier
                                                                          ↳ 265: "enum" IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                        ';'
                                                     ↳ 266: "enum" nested-name-specifier                   IDENTIFIER
                                                                   ↳ 660: type-name                   "::"
                                                                          ↳ 1093: enum-name
                                                                                  ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "enum" IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                             declarator                                                    function-body
                                      ↳ 210: decl-specifier                                          ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                 ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                          ↳ 905: nested-name-specifier '*'
                                                           ↳ 1118: elaborated-type-specifier                              ↳ 659: "::"
                                                                   ↳ 274: elaborated-enum-specifier
                                                                          ↳ 265: "enum" IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                       ';'
                                                     ↳ 266: "enum" nested-name-specifier                  IDENTIFIER
                                                                   ↳ 661: namespace-name             "::"
                                                                          ↳ 658: namespace-alias
                                                                                 ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "enum" IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                             declarator                                                    function-body
                                      ↳ 210: decl-specifier                                          ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                 ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                          ↳ 905: nested-name-specifier '*'
                                                           ↳ 1118: elaborated-type-specifier                              ↳ 659: "::"
                                                                   ↳ 274: elaborated-enum-specifier
                                                                          ↳ 265: "enum" IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                ';'
                                                     ↳ 266: "enum" nested-name-specifier           IDENTIFIER
                                                                   ↳ 661: namespace-name      "::"
                                                                          ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token '<' [-Wcounterexamples]
  First example: declarator "requires" '(' "new" "enum" IDENTIFIER • '<' "..." ')' function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                      fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                                              ↳ 374: '<'
                                                                                                          ↳ 1140: new-expression
                                                                                                                  ↳ 673: "new" new-type-id
                                                                                                                               ↳ 692: type-specifier-seq
                                                                                                                                      ↳ 1121: type-specifier
                                                                                                                                              ↳ 1118: elaborated-type-specifier
                                                                                                                                                      ↳ 274: elaborated-enum-specifier
                                                                                                                                                             ↳ 265: "enum" IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • '<' '>' "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                                               ';'
                                                     ↳ 266: "enum" nested-name-specifier                                          IDENTIFIER
                                                                   ↳ 660: type-name                                          "::"
                                                                          ↳ 1092: class-name
                                                                                  ↳ 146: simple-template-id
                                                                                         ↳ 997: template-name        '<' '>'
                                                                                                ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "enum" IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                             declarator                                                    function-body
                                      ↳ 210: decl-specifier                                          ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                 ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                          ↳ 905: nested-name-specifier '*'
                                                           ↳ 1118: elaborated-type-specifier                              ↳ 659: "::"
                                                                   ↳ 274: elaborated-enum-specifier
                                                                          ↳ 265: "enum" IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                         ';'
                                                     ↳ 266: "enum" nested-name-specifier                    IDENTIFIER
                                                                   ↳ 660: type-name                    "::"
                                                                          ↳ 1094: typedef-name
                                                                                  ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                        ';'
                                                     ↳ 266: "enum" nested-name-specifier                   IDENTIFIER
                                                                   ↳ 660: type-name                   "::"
                                                                          ↳ 1093: enum-name
                                                                                  ↳ 297: IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                       ';'
                                                     ↳ 266: "enum" nested-name-specifier                  IDENTIFIER
                                                                   ↳ 661: namespace-name             "::"
                                                                          ↳ 658: namespace-alias
                                                                                 ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                        ';'
                                                     ↳ 266: "enum" nested-name-specifier                   IDENTIFIER
                                                                   ↳ 660: type-name                   "::"
                                                                          ↳ 1093: enum-name
                                                                                  ↳ 297: IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                ';'
                                                     ↳ 266: "enum" nested-name-specifier           IDENTIFIER
                                                                   ↳ 661: namespace-name      "::"
                                                                          ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                        ';'
                                                     ↳ 266: "enum" nested-name-specifier                   IDENTIFIER
                                                                   ↳ 660: type-name                   "::"
                                                                          ↳ 1093: enum-name
                                                                                  ↳ 297: IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                         ';'
                                                     ↳ 266: "enum" nested-name-specifier                    IDENTIFIER
                                                                   ↳ 660: type-name                    "::"
                                                                          ↳ 1094: typedef-name
                                                                                  ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                       ';'
                                                     ↳ 266: "enum" nested-name-specifier                  IDENTIFIER
                                                                   ↳ 661: namespace-name             "::"
                                                                          ↳ 658: namespace-alias
                                                                                 ↳ 651: IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                ';'
                                                     ↳ 266: "enum" nested-name-specifier           IDENTIFIER
                                                                   ↳ 661: namespace-name      "::"
                                                                          ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                       ';'
                                                     ↳ 266: "enum" nested-name-specifier                  IDENTIFIER
                                                                   ↳ 661: namespace-name             "::"
                                                                          ↳ 658: namespace-alias
                                                                                 ↳ 651: IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                         ';'
                                                     ↳ 266: "enum" nested-name-specifier                    IDENTIFIER
                                                                   ↳ 660: type-name                    "::"
                                                                          ↳ 1094: typedef-name
                                                                                  ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                ';'
                                                     ↳ 266: "enum" nested-name-specifier           IDENTIFIER
                                                                   ↳ 661: namespace-name      "::"
                                                                          ↳ 657: IDENTIFIER •
  Second example: "using" "enum" IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 99: using-enum-declaration
                                     ↳ 1189: "using" elaborated-enum-specifier                                         ';'
                                                     ↳ 266: "enum" nested-name-specifier                    IDENTIFIER
                                                                   ↳ 660: type-name                    "::"
                                                                          ↳ 1094: typedef-name
                                                                                  ↳ 1124: IDENTIFIER •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier-seq '*' attribute-specifier-seq • "alignas" '(' type-id ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                              ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                  parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                      attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq ptr-operator
                                                                                                                      ↳ 898: '*' attribute-specifier-seq
                                                                                                                                 ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                               ↳ 52: alignment-specifier
                                                                                                                                                                     ↳ 15: • "alignas" '(' type-id ')'
  Second example: "operator" type-specifier-seq '*' attribute-specifier-seq • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                             ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                 parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                 attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                          ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                        ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                              ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 898: '*' attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier-seq '*' attribute-specifier-seq • "alignas" '(' type-id "..." ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                    ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                        parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                            attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq ptr-operator
                                                                                                                      ↳ 898: '*' attribute-specifier-seq
                                                                                                                                 ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                               ↳ 52: alignment-specifier
                                                                                                                                                                     ↳ 16: • "alignas" '(' type-id "..." ')'
  Second example: "operator" type-specifier-seq '*' attribute-specifier-seq • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                             ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                 parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                 attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                          ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                        ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                              ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 898: '*' attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier-seq '*' attribute-specifier-seq • "alignas" '(' constant-expression ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                          ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                              parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                                  attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq ptr-operator
                                                                                                                      ↳ 898: '*' attribute-specifier-seq
                                                                                                                                 ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                               ↳ 52: alignment-specifier
                                                                                                                                                                     ↳ 17: • "alignas" '(' constant-expression ')'
  Second example: "operator" type-specifier-seq '*' attribute-specifier-seq • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                             ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                 parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                 attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                          ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                        ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                              ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 898: '*' attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: "operator" type-specifier-seq '*' attribute-specifier-seq • "alignas" '(' constant-expression "..." ')' attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                                ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                                    parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                                        attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq ptr-operator
                                                                                                                      ↳ 898: '*' attribute-specifier-seq
                                                                                                                                 ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                               ↳ 52: alignment-specifier
                                                                                                                                                                     ↳ 18: • "alignas" '(' constant-expression "..." ')'
  Second example: "operator" type-specifier-seq '*' attribute-specifier-seq • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                             ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                 parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                 attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                          ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                        ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                              ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 898: '*' attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "using" IDENTIFIER '=' defining-type-specifier-seq '*' attribute-specifier-seq • '[' '[' attribute-list ']' ']' ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                        ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-operator
                                                                                                           ↳ 898: '*' attribute-specifier-seq
                                                                                                                      ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                    ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq '*' attribute-specifier-seq • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                     ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator                         ptr-abstract-declarator
                                                                                                                  ↳ 898: '*' attribute-specifier-seq • ↳ 892: noptr-abstract-declarator
                                                                                                                                                              ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "using" IDENTIFIER '=' defining-type-specifier-seq '*' attribute-specifier-seq • '[' '[' attribute-using-prefix attribute-list ']' ']' ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                                               ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-operator
                                                                                                           ↳ 898: '*' attribute-specifier-seq
                                                                                                                      ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                                    ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq '*' attribute-specifier-seq • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                     ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator                         ptr-abstract-declarator
                                                                                                                  ↳ 898: '*' attribute-specifier-seq • ↳ 892: noptr-abstract-declarator
                                                                                                                                                              ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token "const" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" type-specifier-seq '*' attribute-specifier-seq • "const" conversion-type-id declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                                                  declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: conversion-type-id                                                                          conversion-type-id
                                                                                                                                                       ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                 ↳ 177: ptr-operator
                                                                                                                                                                                        ↳ 900: '*' attribute-specifier-seq cv-qualifier-seq
                                                                                                                                                                                                                           ↳ 187: cv-qualifier
                                                                                                                                                                                                                                  ↳ 185: • "const"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq '*' attribute-specifier-seq • "const" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                    declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                                                               ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                                                                   ↳ 401: decl-specifier-seq                          declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                                                                  ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                                                                 ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                                                      ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                                                                     ↳ 1120: cv-qualifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                                                             ↳ 185: "const"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                            ↳ 177: ptr-operator
                                                                                                                                                                                                   ↳ 898: '*' attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "volatile" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" type-specifier-seq '*' attribute-specifier-seq • "volatile" conversion-type-id declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                                                     declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: conversion-type-id                                                                             conversion-type-id
                                                                                                                                                       ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                 ↳ 177: ptr-operator
                                                                                                                                                                                        ↳ 900: '*' attribute-specifier-seq cv-qualifier-seq
                                                                                                                                                                                                                           ↳ 187: cv-qualifier
                                                                                                                                                                                                                                  ↳ 186: • "volatile"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq '*' attribute-specifier-seq • "volatile" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                    declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                                                               ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                                                                   ↳ 401: decl-specifier-seq                             declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                                                                  ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                                                                 ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                                                      ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                                                                     ↳ 1120: cv-qualifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                                                             ↳ 186: "volatile"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                            ↳ 177: ptr-operator
                                                                                                                                                                                                   ↳ 898: '*' attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token "const" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq '*' cv-qualifier • "const" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                               declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 181: type-specifier-seq ptr-operator
                                                                                                                                                                                            ↳ 899: '*' cv-qualifier-seq
                                                                                                                                                                                                       ↳ 188: cv-qualifier cv-qualifier-seq
                                                                                                                                                                                                                           ↳ 187: cv-qualifier
                                                                                                                                                                                                                                  ↳ 185: • "const"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq '*' cv-qualifier • "const" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                                                           ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                                                               ↳ 401: decl-specifier-seq                          declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                                                              ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                                                             ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                                                  ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                                                                 ↳ 1120: cv-qualifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                                                         ↳ 185: "const"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                            ↳ 177: ptr-operator
                                                                                                                                                                                                   ↳ 899: '*' cv-qualifier-seq
                                                                                                                                                                                                              ↳ 187: cv-qualifier •
cplusplus.y: warning: shift/reduce conflict on token "volatile" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq '*' cv-qualifier • "volatile" declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                                  declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 181: type-specifier-seq ptr-operator
                                                                                                                                                                                            ↳ 899: '*' cv-qualifier-seq
                                                                                                                                                                                                       ↳ 188: cv-qualifier cv-qualifier-seq
                                                                                                                                                                                                                           ↳ 187: cv-qualifier
                                                                                                                                                                                                                                  ↳ 186: • "volatile"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq '*' cv-qualifier • "volatile" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                                                           ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                                                               ↳ 401: decl-specifier-seq                             declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                                                              ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                                                             ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                                                  ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                                                                 ↳ 1120: cv-qualifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                                                         ↳ 186: "volatile"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                            ↳ 177: ptr-operator
                                                                                                                                                                                                   ↳ 899: '*' cv-qualifier-seq
                                                                                                                                                                                                              ↳ 187: cv-qualifier •
cplusplus.y: warning: shift/reduce conflict on token "export-keyword" [-Wcounterexamples]
  First example: "module-keyword" ';' • "export-keyword" module-import-declaration module-declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                         $end
         ↳ 1075: global-module-fragment                                                                        module-declaration
                 ↳ 415: "module-keyword" ';' declaration-seq
                                             ↳ 226: declaration
                                                    ↳ 220: export-declaration
                                                           ↳ 334: • "export-keyword" module-import-declaration
  Second example: "module-keyword" ';' • "export-keyword" "module-keyword" module-name ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                               $end
         ↳ 1075: global-module-fragment        module-declaration
                 ↳ 414: "module-keyword" ';' • ↳ 623: "export-keyword" "module-keyword" module-name ';'
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '+', '-', "using", '=', ';', "alignas", '(', ')', "...", '&', "asm", "*=", "/=", "%=", "+=", "-=", ">>=", "<<=", "&=", "^=", "|=", ',', "::", '[', ']', ':', '{', '}', "virtual", "class", "struct", "union", "template", "final", "<=>", "noexcept", "concept", '?', "&&", "||", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "->", '.', "enum", "==", "!=", '^', "extern", '<', '>', "explicit", "export", "export-keyword", '*', '/', '%', '|', "<<", ">>", "<=", ">=", ".*", "->*", "try", "import-keyword", "namespace", "requires", '~', "++", "--", "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static_assert", "static", "thread_local", "mutable", "typename", "override" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" '~' IDENTIFIER • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                            declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                       ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                           ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                          ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1158: '~' type-name
                                                                                                                                                    ↳ 1092: class-name
                                                                                                                                                            ↳ 145: IDENTIFIER •
  Second example: "template" '<' template-parameter-list '>' "requires" '~' IDENTIFIER • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                            declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                       ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                           ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                          ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1158: '~' type-name
                                                                                                                                                    ↳ 1093: enum-name
                                                                                                                                                            ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token '<' [-Wcounterexamples]
  First example: declarator "requires" '(' '~' IDENTIFIER • '<' "..." ')' function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                       function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                             fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                                     ↳ 374: '<'
                                                                                                          ↳ 1130: postfix-expression
                                                                                                                  ↳ 860: primary-expression
                                                                                                                         ↳ 886: id-expression
                                                                                                                                ↳ 463: unqualified-id
                                                                                                                                       ↳ 1158: '~' type-name
                                                                                                                                                   ↳ 1092: class-name
                                                                                                                                                           ↳ 145: IDENTIFIER •
  Second example: '~' IDENTIFIER • '<' '>' parameters-and-qualifiers trailing-return-type ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                ';'
                                      ↳ 230: noptr-declarator                                                                    parameters-and-qualifiers trailing-return-type
                                             ↳ 725: declarator-id
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1158: '~' type-name
                                                                              ↳ 1092: class-name
                                                                                      ↳ 146: simple-template-id
                                                                                             ↳ 997: template-name        '<' '>'
                                                                                                    ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '+', '-', "using", '=', ';', "alignas", '(', ')', "...", '&', "asm", "*=", "/=", "%=", "+=", "-=", ">>=", "<<=", "&=", "^=", "|=", ',', "::", '[', ']', ':', '{', '}', "virtual", "class", "struct", "union", "template", "final", "<=>", "noexcept", "concept", '?', "&&", "||", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "->", '.', "enum", "==", "!=", '^', "extern", '<', '>', "explicit", "export", "export-keyword", '*', '/', '%', '|', "<<", ">>", "<=", ">=", ".*", "->*", "try", "import-keyword", "namespace", "requires", '~', "++", "--", "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static_assert", "static", "thread_local", "mutable", "typename", "override" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" '~' IDENTIFIER • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                            declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                       ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                           ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                          ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1158: '~' type-name
                                                                                                                                                    ↳ 1092: class-name
                                                                                                                                                            ↳ 145: IDENTIFIER •
  Second example: "template" '<' template-parameter-list '>' "requires" '~' IDENTIFIER • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                             declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                        ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                            ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                           ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1158: '~' type-name
                                                                                                                                                    ↳ 1094: typedef-name
                                                                                                                                                            ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token '<' [-Wcounterexamples]
  First example: declarator "requires" '(' '~' IDENTIFIER • '<' "..." ')' function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                       function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                             fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                                     ↳ 374: '<'
                                                                                                          ↳ 1130: postfix-expression
                                                                                                                  ↳ 860: primary-expression
                                                                                                                         ↳ 886: id-expression
                                                                                                                                ↳ 463: unqualified-id
                                                                                                                                       ↳ 1158: '~' type-name
                                                                                                                                                   ↳ 1093: enum-name
                                                                                                                                                           ↳ 297: IDENTIFIER •
  Second example: '~' IDENTIFIER • '<' '>' parameters-and-qualifiers trailing-return-type ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                ';'
                                      ↳ 230: noptr-declarator                                                                    parameters-and-qualifiers trailing-return-type
                                             ↳ 725: declarator-id
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1158: '~' type-name
                                                                              ↳ 1092: class-name
                                                                                      ↳ 146: simple-template-id
                                                                                             ↳ 997: template-name        '<' '>'
                                                                                                    ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '+', '-', "using", '=', ';', "alignas", '(', ')', "...", '&', "asm", "*=", "/=", "%=", "+=", "-=", ">>=", "<<=", "&=", "^=", "|=", ',', "::", '[', ']', ':', '{', '}', "virtual", "class", "struct", "union", "template", "final", "<=>", "noexcept", "concept", '?', "&&", "||", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "->", '.', "enum", "==", "!=", '^', "extern", '<', '>', "explicit", "export", "export-keyword", '*', '/', '%', '|', "<<", ">>", "<=", ">=", ".*", "->*", "try", "import-keyword", "namespace", "requires", '~', "++", "--", "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static_assert", "static", "thread_local", "mutable", "typename", "override" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" '~' IDENTIFIER • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                            declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                       ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                           ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                          ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1158: '~' type-name
                                                                                                                                                    ↳ 1093: enum-name
                                                                                                                                                            ↳ 297: IDENTIFIER •
  Second example: "template" '<' template-parameter-list '>' "requires" '~' IDENTIFIER • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                             declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                        ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                            ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                           ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1158: '~' type-name
                                                                                                                                                    ↳ 1094: typedef-name
                                                                                                                                                            ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token '<' [-Wcounterexamples]
  First example: '~' IDENTIFIER • '<' '>' parameters-and-qualifiers trailing-return-type ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                ';'
                                      ↳ 230: noptr-declarator                                                                    parameters-and-qualifiers trailing-return-type
                                             ↳ 725: declarator-id
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1158: '~' type-name
                                                                              ↳ 1092: class-name
                                                                                      ↳ 146: simple-template-id
                                                                                             ↳ 997: template-name        '<' '>'
                                                                                                    ↳ 1066: IDENTIFIER •
  Second example: declarator "requires" '(' '~' IDENTIFIER • '<' "..." ')' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                        function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                              fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                                      ↳ 374: '<'
                                                                                                          ↳ 1130: postfix-expression
                                                                                                                  ↳ 860: primary-expression
                                                                                                                         ↳ 886: id-expression
                                                                                                                                ↳ 463: unqualified-id
                                                                                                                                       ↳ 1158: '~' type-name
                                                                                                                                                   ↳ 1094: typedef-name
                                                                                                                                                           ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens ';', "...", ',', "::", '{' [-Wcounterexamples]
  First example: declarator "requires" "requires" '{' "typename" IDENTIFIER • ';' '}' function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                          function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 889: requires-expression
                                                                                        ↳ 944: "requires" requirement-body
                                                                                                          ↳ 939: '{' requirement-seq                                                  '}'
                                                                                                                     ↳ 941: requirement
                                                                                                                            ↳ 936: type-requirement
                                                                                                                                   ↳ 1115: "typename" type-name                   ';'
                                                                                                                                                      ↳ 1092: class-name
                                                                                                                                                              ↳ 145: IDENTIFIER •
  Second example: declarator "requires" "requires" '{' "typename" IDENTIFIER • ';' '}' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                          function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 889: requires-expression
                                                                                        ↳ 944: "requires" requirement-body
                                                                                                          ↳ 939: '{' requirement-seq                                                  '}'
                                                                                                                     ↳ 941: requirement
                                                                                                                            ↳ 936: type-requirement
                                                                                                                                   ↳ 1115: "typename" type-name                   ';'
                                                                                                                                                      ↳ 1093: enum-name
                                                                                                                                                              ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens ';', "::" [-Wcounterexamples]
  First example: declarator "requires" "requires" '{' "typename" IDENTIFIER • ';' '}' function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                          function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 889: requires-expression
                                                                                        ↳ 944: "requires" requirement-body
                                                                                                          ↳ 939: '{' requirement-seq                                                  '}'
                                                                                                                     ↳ 941: requirement
                                                                                                                            ↳ 936: type-requirement
                                                                                                                                   ↳ 1115: "typename" type-name                   ';'
                                                                                                                                                      ↳ 1092: class-name
                                                                                                                                                              ↳ 145: IDENTIFIER •
  Second example: "using" "namespace" IDENTIFIER • ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 100: using-directive
                                      ↳ 1186: "using" "namespace" namespace-name             ';'
                                                                  ↳ 658: namespace-alias
                                                                         ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens ';', "::" [-Wcounterexamples]
  First example: declarator "requires" "requires" '{' "typename" IDENTIFIER • ';' '}' function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                          function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 889: requires-expression
                                                                                        ↳ 944: "requires" requirement-body
                                                                                                          ↳ 939: '{' requirement-seq                                                  '}'
                                                                                                                     ↳ 941: requirement
                                                                                                                            ↳ 936: type-requirement
                                                                                                                                   ↳ 1115: "typename" type-name                   ';'
                                                                                                                                                      ↳ 1092: class-name
                                                                                                                                                              ↳ 145: IDENTIFIER •
  Second example: "using" "namespace" IDENTIFIER • ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 100: using-directive
                                      ↳ 1186: "using" "namespace" namespace-name      ';'
                                                                  ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens ';', "...", ',', "::", '{' [-Wcounterexamples]
  First example: declarator "requires" "requires" '{' "typename" IDENTIFIER • ';' '}' function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                          function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 889: requires-expression
                                                                                        ↳ 944: "requires" requirement-body
                                                                                                          ↳ 939: '{' requirement-seq                                                  '}'
                                                                                                                     ↳ 941: requirement
                                                                                                                            ↳ 936: type-requirement
                                                                                                                                   ↳ 1115: "typename" type-name                   ';'
                                                                                                                                                      ↳ 1092: class-name
                                                                                                                                                              ↳ 145: IDENTIFIER •
  Second example: declarator "requires" "requires" '{' "typename" IDENTIFIER • ';' '}' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                           function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 889: requires-expression
                                                                                        ↳ 944: "requires" requirement-body
                                                                                                          ↳ 939: '{' requirement-seq                                                   '}'
                                                                                                                     ↳ 941: requirement
                                                                                                                            ↳ 936: type-requirement
                                                                                                                                   ↳ 1115: "typename" type-name                    ';'
                                                                                                                                                      ↳ 1094: typedef-name
                                                                                                                                                              ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens ';', "::" [-Wcounterexamples]
  First example: declarator "requires" "requires" '{' "typename" IDENTIFIER • ';' '}' function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                          function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 889: requires-expression
                                                                                        ↳ 944: "requires" requirement-body
                                                                                                          ↳ 939: '{' requirement-seq                                                  '}'
                                                                                                                     ↳ 941: requirement
                                                                                                                            ↳ 936: type-requirement
                                                                                                                                   ↳ 1115: "typename" type-name                   ';'
                                                                                                                                                      ↳ 1093: enum-name
                                                                                                                                                              ↳ 297: IDENTIFIER •
  Second example: "using" "namespace" IDENTIFIER • ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 100: using-directive
                                      ↳ 1186: "using" "namespace" namespace-name             ';'
                                                                  ↳ 658: namespace-alias
                                                                         ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens ';', "::" [-Wcounterexamples]
  First example: declarator "requires" "requires" '{' "typename" IDENTIFIER • ';' '}' function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                          function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 889: requires-expression
                                                                                        ↳ 944: "requires" requirement-body
                                                                                                          ↳ 939: '{' requirement-seq                                                  '}'
                                                                                                                     ↳ 941: requirement
                                                                                                                            ↳ 936: type-requirement
                                                                                                                                   ↳ 1115: "typename" type-name                   ';'
                                                                                                                                                      ↳ 1093: enum-name
                                                                                                                                                              ↳ 297: IDENTIFIER •
  Second example: "using" "namespace" IDENTIFIER • ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 100: using-directive
                                      ↳ 1186: "using" "namespace" namespace-name      ';'
                                                                  ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens ';', "...", ',', "::", '{' [-Wcounterexamples]
  First example: declarator "requires" "requires" '{' "typename" IDENTIFIER • ';' '}' function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                          function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 889: requires-expression
                                                                                        ↳ 944: "requires" requirement-body
                                                                                                          ↳ 939: '{' requirement-seq                                                  '}'
                                                                                                                     ↳ 941: requirement
                                                                                                                            ↳ 936: type-requirement
                                                                                                                                   ↳ 1115: "typename" type-name                   ';'
                                                                                                                                                      ↳ 1093: enum-name
                                                                                                                                                              ↳ 297: IDENTIFIER •
  Second example: declarator "requires" "requires" '{' "typename" IDENTIFIER • ';' '}' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                           function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 889: requires-expression
                                                                                        ↳ 944: "requires" requirement-body
                                                                                                          ↳ 939: '{' requirement-seq                                                   '}'
                                                                                                                     ↳ 941: requirement
                                                                                                                            ↳ 936: type-requirement
                                                                                                                                   ↳ 1115: "typename" type-name                    ';'
                                                                                                                                                      ↳ 1094: typedef-name
                                                                                                                                                              ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens ';', "::" [-Wcounterexamples]
  First example: "using" "namespace" IDENTIFIER • ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 100: using-directive
                                      ↳ 1186: "using" "namespace" namespace-name             ';'
                                                                  ↳ 658: namespace-alias
                                                                         ↳ 651: IDENTIFIER •
  Second example: "using" "namespace" IDENTIFIER • ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 100: using-directive
                                      ↳ 1186: "using" "namespace" namespace-name      ';'
                                                                  ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens ';', "::" [-Wcounterexamples]
  First example: "using" "namespace" IDENTIFIER • ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 100: using-directive
                                      ↳ 1186: "using" "namespace" namespace-name             ';'
                                                                  ↳ 658: namespace-alias
                                                                         ↳ 651: IDENTIFIER •
  Second example: declarator "requires" "requires" '{' "typename" IDENTIFIER • ';' '}' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                           function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 889: requires-expression
                                                                                        ↳ 944: "requires" requirement-body
                                                                                                          ↳ 939: '{' requirement-seq                                                   '}'
                                                                                                                     ↳ 941: requirement
                                                                                                                            ↳ 936: type-requirement
                                                                                                                                   ↳ 1115: "typename" type-name                    ';'
                                                                                                                                                      ↳ 1094: typedef-name
                                                                                                                                                              ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens ';', "::" [-Wcounterexamples]
  First example: "using" "namespace" IDENTIFIER • ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 100: using-directive
                                      ↳ 1186: "using" "namespace" namespace-name      ';'
                                                                  ↳ 657: IDENTIFIER •
  Second example: declarator "requires" "requires" '{' "typename" IDENTIFIER • ';' '}' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                           function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 889: requires-expression
                                                                                        ↳ 944: "requires" requirement-body
                                                                                                          ↳ 939: '{' requirement-seq                                                   '}'
                                                                                                                     ↳ 941: requirement
                                                                                                                            ↳ 936: type-requirement
                                                                                                                                   ↳ 1115: "typename" type-name                    ';'
                                                                                                                                                      ↳ 1094: typedef-name
                                                                                                                                                              ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens "::", ':', '{', "final" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                               declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                   IDENTIFIER
                                                                                    ↳ 660: type-name                   "::"
                                                                                           ↳ 1092: class-name
                                                                                                   ↳ 145: IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                         declarator                                                    function-body
                                      ↳ 210: decl-specifier                                      ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                             ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                      ↳ 905: nested-name-specifier '*'
                                                           ↳ 1118: elaborated-type-specifier                          ↳ 659: "::"
                                                                   ↳ 267: class-key IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                               declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                   IDENTIFIER
                                                                                    ↳ 660: type-name                   "::"
                                                                                           ↳ 1092: class-name
                                                                                                   ↳ 145: IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                               declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                   IDENTIFIER
                                                                                    ↳ 660: type-name                   "::"
                                                                                           ↳ 1093: enum-name
                                                                                                   ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                               declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                   IDENTIFIER
                                                                                    ↳ 660: type-name                   "::"
                                                                                           ↳ 1092: class-name
                                                                                                   ↳ 145: IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                              declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                  IDENTIFIER
                                                                                    ↳ 661: namespace-name             "::"
                                                                                           ↳ 658: namespace-alias
                                                                                                  ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                               declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                   IDENTIFIER
                                                                                    ↳ 660: type-name                   "::"
                                                                                           ↳ 1092: class-name
                                                                                                   ↳ 145: IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                       declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier           IDENTIFIER
                                                                                    ↳ 661: namespace-name      "::"
                                                                                           ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                               declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                   IDENTIFIER
                                                                                    ↳ 660: type-name                   "::"
                                                                                           ↳ 1092: class-name
                                                                                                   ↳ 145: IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                    IDENTIFIER
                                                                                    ↳ 660: type-name                    "::"
                                                                                           ↳ 1094: typedef-name
                                                                                                   ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                         declarator                                                    function-body
                                      ↳ 210: decl-specifier                                      ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                             ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                      ↳ 905: nested-name-specifier '*'
                                                           ↳ 1118: elaborated-type-specifier                          ↳ 659: "::"
                                                                   ↳ 267: class-key IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                               declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                   IDENTIFIER
                                                                                    ↳ 660: type-name                   "::"
                                                                                           ↳ 1093: enum-name
                                                                                                   ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                         declarator                                                    function-body
                                      ↳ 210: decl-specifier                                      ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                             ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                      ↳ 905: nested-name-specifier '*'
                                                           ↳ 1118: elaborated-type-specifier                          ↳ 659: "::"
                                                                   ↳ 267: class-key IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                              declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                  IDENTIFIER
                                                                                    ↳ 661: namespace-name             "::"
                                                                                           ↳ 658: namespace-alias
                                                                                                  ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                         declarator                                                    function-body
                                      ↳ 210: decl-specifier                                      ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                             ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                      ↳ 905: nested-name-specifier '*'
                                                           ↳ 1118: elaborated-type-specifier                          ↳ 659: "::"
                                                                   ↳ 267: class-key IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                       declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier           IDENTIFIER
                                                                                    ↳ 661: namespace-name      "::"
                                                                                           ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token '<' [-Wcounterexamples]
  First example: declarator "requires" '(' "new" class-key IDENTIFIER • '<' "..." ')' function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                            function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                  fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                                          ↳ 374: '<'
                                                                                                          ↳ 1140: new-expression
                                                                                                                  ↳ 673: "new" new-type-id
                                                                                                                               ↳ 692: type-specifier-seq
                                                                                                                                      ↳ 1121: type-specifier
                                                                                                                                              ↳ 1118: elaborated-type-specifier
                                                                                                                                                      ↳ 267: class-key IDENTIFIER •
  Second example: class-key IDENTIFIER • '<' '>' declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 271: class-key simple-template-id
                                                                                    ↳ 997: template-name        '<' '>'
                                                                                           ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                         declarator                                                    function-body
                                      ↳ 210: decl-specifier                                      ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                             ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                      ↳ 905: nested-name-specifier '*'
                                                           ↳ 1118: elaborated-type-specifier                          ↳ 659: "::"
                                                                   ↳ 267: class-key IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                    IDENTIFIER
                                                                                    ↳ 660: type-name                    "::"
                                                                                           ↳ 1094: typedef-name
                                                                                                   ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                               declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                   IDENTIFIER
                                                                                    ↳ 660: type-name                   "::"
                                                                                           ↳ 1093: enum-name
                                                                                                   ↳ 297: IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                              declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                  IDENTIFIER
                                                                                    ↳ 661: namespace-name             "::"
                                                                                           ↳ 658: namespace-alias
                                                                                                  ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                               declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                   IDENTIFIER
                                                                                    ↳ 660: type-name                   "::"
                                                                                           ↳ 1093: enum-name
                                                                                                   ↳ 297: IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                       declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier           IDENTIFIER
                                                                                    ↳ 661: namespace-name      "::"
                                                                                           ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                               declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                   IDENTIFIER
                                                                                    ↳ 660: type-name                   "::"
                                                                                           ↳ 1093: enum-name
                                                                                                   ↳ 297: IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                    IDENTIFIER
                                                                                    ↳ 660: type-name                    "::"
                                                                                           ↳ 1094: typedef-name
                                                                                                   ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                              declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                  IDENTIFIER
                                                                                    ↳ 661: namespace-name             "::"
                                                                                           ↳ 658: namespace-alias
                                                                                                  ↳ 651: IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                       declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier           IDENTIFIER
                                                                                    ↳ 661: namespace-name      "::"
                                                                                           ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                              declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                  IDENTIFIER
                                                                                    ↳ 661: namespace-name             "::"
                                                                                           ↳ 658: namespace-alias
                                                                                                  ↳ 651: IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                    IDENTIFIER
                                                                                    ↳ 660: type-name                    "::"
                                                                                           ↳ 1094: typedef-name
                                                                                                   ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                       declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier           IDENTIFIER
                                                                                    ↳ 661: namespace-name      "::"
                                                                                           ↳ 657: IDENTIFIER •
  Second example: class-key IDENTIFIER • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                    IDENTIFIER
                                                                                    ↳ 660: type-name                    "::"
                                                                                           ↳ 1094: typedef-name
                                                                                                   ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens "::", ':', '{', "final" [-Wcounterexamples]
  First example: class-key simple-template-id • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                       declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                           IDENTIFIER
                                                                                    ↳ 660: type-name                           "::"
                                                                                           ↳ 1092: class-name
                                                                                                   ↳ 146: simple-template-id •
  Second example: class-key simple-template-id • "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                 declarator                                                    function-body
                                      ↳ 210: decl-specifier                                              ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                     ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                              ↳ 905: nested-name-specifier '*'
                                                           ↳ 1118: elaborated-type-specifier                                  ↳ 659: "::"
                                                                   ↳ 271: class-key simple-template-id •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key simple-template-id • "::" IDENTIFIER declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                       declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                           IDENTIFIER
                                                                                    ↳ 660: type-name                           "::"
                                                                                           ↳ 1092: class-name
                                                                                                   ↳ 146: simple-template-id •
  Second example: class-key simple-template-id • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                        declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                            IDENTIFIER
                                                                                    ↳ 660: type-name                            "::"
                                                                                           ↳ 1094: typedef-name
                                                                                                   ↳ 1125: simple-template-id •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: class-key simple-template-id • "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                 declarator                                                    function-body
                                      ↳ 210: decl-specifier                                              ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                     ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                              ↳ 905: nested-name-specifier '*'
                                                           ↳ 1118: elaborated-type-specifier                                  ↳ 659: "::"
                                                                   ↳ 271: class-key simple-template-id •
  Second example: class-key simple-template-id • "::" IDENTIFIER declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                        declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1118: elaborated-type-specifier
                                                                   ↳ 269: class-key nested-name-specifier                            IDENTIFIER
                                                                                    ↳ 660: type-name                            "::"
                                                                                           ↳ 1094: typedef-name
                                                                                                   ↳ 1125: simple-template-id •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: class-head '{' decl-specifier attribute-specifier-seq • "alignas" '(' type-id ')' '}' declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                                declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 239: class-specifier
                                                           ↳ 152: class-head '{' member-specification                                                                               '}'
                                                                                 ↳ 619: decl-specifier-seq
                                                                                        ↳ 211: decl-specifier attribute-specifier-seq
                                                                                                              ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                            ↳ 52: alignment-specifier
                                                                                                                                                  ↳ 15: • "alignas" '(' type-id ')'
  Second example: class-head '{' decl-specifier attribute-specifier-seq • "alignas" '(' type-id ')' ':' constant-expression ';' '}' declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                                                                                 declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 239: class-specifier
                                                           ↳ 152: class-head '{' member-specification                                                                                                                                '}'
                                                                                 ↳ 619: member-declaration
                                                                                        ↳ 591: decl-specifier-seq                              member-declarator-list                                                            ';'
                                                                                               ↳ 211: decl-specifier attribute-specifier-seq • ↳ 617: member-declarator
                                                                                                                                                      ↳ 612: attribute-specifier-seq                     ':' constant-expression
                                                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                                                   ↳ 52: alignment-specifier
                                                                                                                                                                         ↳ 15: "alignas" '(' type-id ')'
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: class-head '{' decl-specifier attribute-specifier-seq • "alignas" '(' type-id "..." ')' '}' declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                                      declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 239: class-specifier
                                                           ↳ 152: class-head '{' member-specification                                                                                     '}'
                                                                                 ↳ 619: decl-specifier-seq
                                                                                        ↳ 211: decl-specifier attribute-specifier-seq
                                                                                                              ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                            ↳ 52: alignment-specifier
                                                                                                                                                  ↳ 16: • "alignas" '(' type-id "..." ')'
  Second example: class-head '{' decl-specifier attribute-specifier-seq • "alignas" '(' type-id ')' ':' constant-expression ';' '}' declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                                                                                 declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 239: class-specifier
                                                           ↳ 152: class-head '{' member-specification                                                                                                                                '}'
                                                                                 ↳ 619: member-declaration
                                                                                        ↳ 591: decl-specifier-seq                              member-declarator-list                                                            ';'
                                                                                               ↳ 211: decl-specifier attribute-specifier-seq • ↳ 617: member-declarator
                                                                                                                                                      ↳ 612: attribute-specifier-seq                     ':' constant-expression
                                                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                                                   ↳ 52: alignment-specifier
                                                                                                                                                                         ↳ 15: "alignas" '(' type-id ')'
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: class-head '{' decl-specifier attribute-specifier-seq • "alignas" '(' constant-expression ')' '}' declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                                            declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 239: class-specifier
                                                           ↳ 152: class-head '{' member-specification                                                                                           '}'
                                                                                 ↳ 619: decl-specifier-seq
                                                                                        ↳ 211: decl-specifier attribute-specifier-seq
                                                                                                              ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                            ↳ 52: alignment-specifier
                                                                                                                                                  ↳ 17: • "alignas" '(' constant-expression ')'
  Second example: class-head '{' decl-specifier attribute-specifier-seq • "alignas" '(' type-id ')' ':' constant-expression ';' '}' declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                                                                                 declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 239: class-specifier
                                                           ↳ 152: class-head '{' member-specification                                                                                                                                '}'
                                                                                 ↳ 619: member-declaration
                                                                                        ↳ 591: decl-specifier-seq                              member-declarator-list                                                            ';'
                                                                                               ↳ 211: decl-specifier attribute-specifier-seq • ↳ 617: member-declarator
                                                                                                                                                      ↳ 612: attribute-specifier-seq                     ':' constant-expression
                                                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                                                   ↳ 52: alignment-specifier
                                                                                                                                                                         ↳ 15: "alignas" '(' type-id ')'
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: class-head '{' decl-specifier attribute-specifier-seq • "alignas" '(' constant-expression "..." ')' '}' declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                                                  declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 239: class-specifier
                                                           ↳ 152: class-head '{' member-specification                                                                                                 '}'
                                                                                 ↳ 619: decl-specifier-seq
                                                                                        ↳ 211: decl-specifier attribute-specifier-seq
                                                                                                              ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                                                            ↳ 52: alignment-specifier
                                                                                                                                                  ↳ 18: • "alignas" '(' constant-expression "..." ')'
  Second example: class-head '{' decl-specifier attribute-specifier-seq • "alignas" '(' type-id ')' ':' constant-expression ';' '}' declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                                                                                                 declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 239: class-specifier
                                                           ↳ 152: class-head '{' member-specification                                                                                                                                '}'
                                                                                 ↳ 619: member-declaration
                                                                                        ↳ 591: decl-specifier-seq                              member-declarator-list                                                            ';'
                                                                                               ↳ 211: decl-specifier attribute-specifier-seq • ↳ 617: member-declarator
                                                                                                                                                      ↳ 612: attribute-specifier-seq                     ':' constant-expression
                                                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                                                   ↳ 52: alignment-specifier
                                                                                                                                                                         ↳ 15: "alignas" '(' type-id ')'
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: decl-specifier attribute-specifier-seq • '[' '[' attribute-list ']' ']' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: decl-specifier-seq
                                     ↳ 211: decl-specifier attribute-specifier-seq
                                                           ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                         ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: decl-specifier attribute-specifier-seq • '[' identifier-list ']' initializer ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 981: decl-specifier-seq                              '[' identifier-list ']' initializer ';'
                                            ↳ 211: decl-specifier attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: decl-specifier attribute-specifier-seq • '[' '[' attribute-using-prefix attribute-list ']' ']' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: decl-specifier-seq
                                     ↳ 211: decl-specifier attribute-specifier-seq
                                                           ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                         ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: decl-specifier attribute-specifier-seq • '[' identifier-list ']' initializer ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 981: decl-specifier-seq                              '[' identifier-list ']' initializer ';'
                                            ↳ 211: decl-specifier attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: decl-specifier-seq '&' • '[' '[' attribute-list ']' ']' ptr-declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                           function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                            ptr-declarator
                                                                       ↳ 902: '&' attribute-specifier-seq
                                                                                  ↳ 54: attribute-specifier
                                                                                        ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: decl-specifier-seq '&' • '[' identifier-list ']' initializer ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 983: decl-specifier-seq ref-qualifier '[' identifier-list ']' initializer ';'
                                                               ↳ 928: '&' •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: decl-specifier-seq '&' • '[' '[' attribute-using-prefix attribute-list ']' ']' ptr-declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                  function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                                                   ptr-declarator
                                                                       ↳ 902: '&' attribute-specifier-seq
                                                                                  ↳ 54: attribute-specifier
                                                                                        ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: decl-specifier-seq '&' • '[' identifier-list ']' initializer ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 983: decl-specifier-seq ref-qualifier '[' identifier-list ']' initializer ';'
                                                               ↳ 928: '&' •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: decl-specifier-seq "&&" • '[' '[' attribute-list ']' ']' ptr-declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                            function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                             ptr-declarator
                                                                       ↳ 904: "&&" attribute-specifier-seq
                                                                                   ↳ 54: attribute-specifier
                                                                                         ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: decl-specifier-seq "&&" • '[' identifier-list ']' initializer ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 983: decl-specifier-seq ref-qualifier '[' identifier-list ']' initializer ';'
                                                               ↳ 929: "&&" •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: decl-specifier-seq "&&" • '[' '[' attribute-using-prefix attribute-list ']' ']' ptr-declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq declarator                                                                                                   function-body
                                                         ↳ 229: ptr-declarator
                                                                ↳ 896: ptr-operator                                                                    ptr-declarator
                                                                       ↳ 904: "&&" attribute-specifier-seq
                                                                                   ↳ 54: attribute-specifier
                                                                                         ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: decl-specifier-seq "&&" • '[' identifier-list ']' initializer ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 95: simple-declaration
                                     ↳ 983: decl-specifier-seq ref-qualifier '[' identifier-list ']' initializer ';'
                                                               ↳ 929: "&&" •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: declarator-id attribute-specifier-seq • '[' '[' attribute-list ']' ']' parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                      ';'
                                      ↳ 230: noptr-declarator                                                                          parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id attribute-specifier-seq
                                                                  ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: declarator-id attribute-specifier-seq • '[' ']' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                          ';'
                                      ↳ 230: noptr-declarator                                              parameters-and-qualifiers trailing-return-type
                                             ↳ 728: noptr-declarator                               '[' ']'
                                                    ↳ 726: declarator-id attribute-specifier-seq •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: declarator-id attribute-specifier-seq • '[' '[' attribute-using-prefix attribute-list ']' ']' parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                             ';'
                                      ↳ 230: noptr-declarator                                                                                                 parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id attribute-specifier-seq
                                                                  ↳ 53: attribute-specifier-seq attribute-specifier
                                                                                                ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: declarator-id attribute-specifier-seq • '[' ']' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                          ';'
                                      ↳ 230: noptr-declarator                                              parameters-and-qualifiers trailing-return-type
                                             ↳ 728: noptr-declarator                               '[' ']'
                                                    ↳ 726: declarator-id attribute-specifier-seq •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                            ';'
                                                      ↳ 292: nested-name-specifier                   IDENTIFIER
                                                             ↳ 660: type-name                   "::"
                                                                    ↳ 1092: class-name
                                                                            ↳ 145: IDENTIFIER •
  Second example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                            ';'
                                                      ↳ 292: nested-name-specifier                   IDENTIFIER
                                                             ↳ 660: type-name                   "::"
                                                                    ↳ 1093: enum-name
                                                                            ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                            ';'
                                                      ↳ 292: nested-name-specifier                   IDENTIFIER
                                                             ↳ 660: type-name                   "::"
                                                                    ↳ 1092: class-name
                                                                            ↳ 145: IDENTIFIER •
  Second example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                           ';'
                                                      ↳ 292: nested-name-specifier                  IDENTIFIER
                                                             ↳ 661: namespace-name             "::"
                                                                    ↳ 658: namespace-alias
                                                                           ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                            ';'
                                                      ↳ 292: nested-name-specifier                   IDENTIFIER
                                                             ↳ 660: type-name                   "::"
                                                                    ↳ 1092: class-name
                                                                            ↳ 145: IDENTIFIER •
  Second example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                    ';'
                                                      ↳ 292: nested-name-specifier           IDENTIFIER
                                                             ↳ 661: namespace-name      "::"
                                                                    ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                            ';'
                                                      ↳ 292: nested-name-specifier                   IDENTIFIER
                                                             ↳ 660: type-name                   "::"
                                                                    ↳ 1092: class-name
                                                                            ↳ 145: IDENTIFIER •
  Second example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                             ';'
                                                      ↳ 292: nested-name-specifier                    IDENTIFIER
                                                             ↳ 660: type-name                    "::"
                                                                    ↳ 1094: typedef-name
                                                                            ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                            ';'
                                                      ↳ 292: nested-name-specifier                   IDENTIFIER
                                                             ↳ 660: type-name                   "::"
                                                                    ↳ 1093: enum-name
                                                                            ↳ 297: IDENTIFIER •
  Second example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                           ';'
                                                      ↳ 292: nested-name-specifier                  IDENTIFIER
                                                             ↳ 661: namespace-name             "::"
                                                                    ↳ 658: namespace-alias
                                                                           ↳ 651: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                            ';'
                                                      ↳ 292: nested-name-specifier                   IDENTIFIER
                                                             ↳ 660: type-name                   "::"
                                                                    ↳ 1093: enum-name
                                                                            ↳ 297: IDENTIFIER •
  Second example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                    ';'
                                                      ↳ 292: nested-name-specifier           IDENTIFIER
                                                             ↳ 661: namespace-name      "::"
                                                                    ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                            ';'
                                                      ↳ 292: nested-name-specifier                   IDENTIFIER
                                                             ↳ 660: type-name                   "::"
                                                                    ↳ 1093: enum-name
                                                                            ↳ 297: IDENTIFIER •
  Second example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                             ';'
                                                      ↳ 292: nested-name-specifier                    IDENTIFIER
                                                             ↳ 660: type-name                    "::"
                                                                    ↳ 1094: typedef-name
                                                                            ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                           ';'
                                                      ↳ 292: nested-name-specifier                  IDENTIFIER
                                                             ↳ 661: namespace-name             "::"
                                                                    ↳ 658: namespace-alias
                                                                           ↳ 651: IDENTIFIER •
  Second example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                    ';'
                                                      ↳ 292: nested-name-specifier           IDENTIFIER
                                                             ↳ 661: namespace-name      "::"
                                                                    ↳ 657: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                           ';'
                                                      ↳ 292: nested-name-specifier                  IDENTIFIER
                                                             ↳ 661: namespace-name             "::"
                                                                    ↳ 658: namespace-alias
                                                                           ↳ 651: IDENTIFIER •
  Second example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                             ';'
                                                      ↳ 292: nested-name-specifier                    IDENTIFIER
                                                             ↳ 660: type-name                    "::"
                                                                    ↳ 1094: typedef-name
                                                                            ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token "::" [-Wcounterexamples]
  First example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                    ';'
                                                      ↳ 292: nested-name-specifier           IDENTIFIER
                                                             ↳ 661: namespace-name      "::"
                                                                    ↳ 657: IDENTIFIER •
  Second example: enum-key IDENTIFIER • "::" IDENTIFIER ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 103: opaque-enum-declaration
                                      ↳ 755: enum-key enum-head-name                                             ';'
                                                      ↳ 292: nested-name-specifier                    IDENTIFIER
                                                             ↳ 660: type-name                    "::"
                                                                    ↳ 1094: typedef-name
                                                                            ↳ 1124: IDENTIFIER •
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                             function-body
                                      ↳ 229: ptr-declarator
                                             ↳ 896: ptr-operator                                              ptr-declarator
                                                    ↳ 905: nested-name-specifier                          '*'
                                                           ↳ 663: nested-name-specifier IDENTIFIER • "::"
  Second example: nested-name-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                    declarator                                                    function-body
                                      ↳ 210: decl-specifier                                                                 ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                        ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                                                 ↳ 905: nested-name-specifier '*'
                                                           ↳ 1117: simple-type-specifier                                                         ↳ 659: "::"
                                                                   ↳ 999: nested-name-specifier type-name
                                                                                                ↳ 1092: class-name
                                                                                                        ↳ 145: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens "decltype", "auto" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • "decltype" '(' expression ')' "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                    declarator                                                                               function-body
                                      ↳ 210: decl-specifier                                                                 ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                        ↳ 896: ptr-operator                                                ptr-declarator
                                                    ↳ 238: type-specifier                                                                 ↳ 905: nested-name-specifier                            '*'
                                                           ↳ 1117: simple-type-specifier                                                         ↳ 662: decltype-specifier                   "::"
                                                                   ↳ 999: nested-name-specifier type-name                                               ↳ 233: "decltype" '(' expression ')'
                                                                                                ↳ 1092: class-name
                                                                                                        ↳ 145: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • "decltype" '(' "auto" ')' declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                      declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1117: simple-type-specifier
                                                                   ↳ 1003: placeholder-type-specifier
                                                                           ↳ 854: type-constraint                                   "decltype" '(' "auto" ')'
                                                                                  ↳ 1084: nested-name-specifier concept-name
                                                                                                                ↳ 163: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', ':', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                    declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                                 ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                        ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                                 ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                         ↳ 661: namespace-name    "::"
                                                                   ↳ 999: nested-name-specifier type-name                                               ↳ 657: IDENTIFIER
                                                                                                ↳ 1092: class-name
                                                                                                        ↳ 145: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                    declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                                 ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                        ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                                 ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                         ↳ 661: namespace-name    "::"
                                                                   ↳ 999: nested-name-specifier type-name                                               ↳ 657: IDENTIFIER
                                                                                                ↳ 1093: enum-name
                                                                                                        ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', ':', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                    declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                                 ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                        ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                                 ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                         ↳ 661: namespace-name    "::"
                                                                   ↳ 999: nested-name-specifier type-name                                               ↳ 657: IDENTIFIER
                                                                                                ↳ 1092: class-name
                                                                                                        ↳ 145: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                              declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                           ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                  ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                           ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                   ↳ 661: namespace-name    "::"
                                                                   ↳ 1004: nested-name-specifier template-name                                    ↳ 657: IDENTIFIER
                                                                                                 ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', ':', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                    declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                                 ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                        ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                                 ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                         ↳ 661: namespace-name    "::"
                                                                   ↳ 999: nested-name-specifier type-name                                               ↳ 657: IDENTIFIER
                                                                                                ↳ 1092: class-name
                                                                                                        ↳ 145: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                                  ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                         ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                                  ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                          ↳ 661: namespace-name    "::"
                                                                   ↳ 999: nested-name-specifier type-name                                                ↳ 657: IDENTIFIER
                                                                                                ↳ 1094: typedef-name
                                                                                                        ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens '=', ';', "alignas", '(', ')', "...", '&', ',', '[', ':', '{', "&&", '>', '*' [-Wcounterexamples]
  First example: template-name '(' decl-specifier-seq '(' nested-name-specifier IDENTIFIER • '=' initializer-clause ')' trailing-return-type ')' "->" simple-template-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 217: deduction-guide
                               ↳ 235: template-name '(' parameter-declaration-clause                                                                                                                                                                                       ')' "->" simple-template-id ';'
                                                        ↳ 830: parameter-declaration-list
                                                               ↳ 834: parameter-declaration
                                                                      ↳ 819: decl-specifier-seq abstract-declarator
                                                                                                ↳ 3: parameters-and-qualifiers                                                                                                                        trailing-return-type
                                                                                                     ↳ 836: '(' parameter-declaration-clause                                                                                                      ')'
                                                                                                                ↳ 830: parameter-declaration-list
                                                                                                                       ↳ 834: parameter-declaration
                                                                                                                              ↳ 823: decl-specifier-seq                                                                    '=' initializer-clause
                                                                                                                                     ↳ 210: decl-specifier
                                                                                                                                            ↳ 202: defining-type-specifier
                                                                                                                                                   ↳ 238: type-specifier
                                                                                                                                                          ↳ 1117: simple-type-specifier
                                                                                                                                                                  ↳ 999: nested-name-specifier type-name
                                                                                                                                                                                               ↳ 1092: class-name
                                                                                                                                                                                                       ↳ 145: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • '=' "default" ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                           function-body
                                      ↳ 229: ptr-declarator                                                                ↳ 396: '=' "default" ';'
                                             ↳ 895: noptr-declarator
                                                    ↳ 725: declarator-id
                                                           ↳ 232: id-expression
                                                                  ↳ 464: qualified-id
                                                                         ↳ 913: nested-name-specifier unqualified-id
                                                                                                      ↳ 1154: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens "decltype", "auto" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • "decltype" '(' "auto" ')' declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                      declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1117: simple-type-specifier
                                                                   ↳ 1003: placeholder-type-specifier
                                                                           ↳ 854: type-constraint                                   "decltype" '(' "auto" ')'
                                                                                  ↳ 1084: nested-name-specifier concept-name
                                                                                                                ↳ 163: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • "decltype" '(' expression ')' "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                    declarator                                                                               function-body
                                      ↳ 210: decl-specifier                                                                 ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                        ↳ 896: ptr-operator                                                ptr-declarator
                                                    ↳ 238: type-specifier                                                                 ↳ 905: nested-name-specifier                            '*'
                                                           ↳ 1117: simple-type-specifier                                                         ↳ 662: decltype-specifier                   "::"
                                                                   ↳ 999: nested-name-specifier type-name                                               ↳ 233: "decltype" '(' expression ')'
                                                                                                ↳ 1093: enum-name
                                                                                                        ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens "decltype", '<', "auto" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • "decltype" '(' "auto" ')' declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                      declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1117: simple-type-specifier
                                                                   ↳ 1003: placeholder-type-specifier
                                                                           ↳ 854: type-constraint                                   "decltype" '(' "auto" ')'
                                                                                  ↳ 1084: nested-name-specifier concept-name
                                                                                                                ↳ 163: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • "decltype" '(' expression ')' "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                              declarator                                                                               function-body
                                      ↳ 210: decl-specifier                                                           ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                  ↳ 896: ptr-operator                                                ptr-declarator
                                                    ↳ 238: type-specifier                                                           ↳ 905: nested-name-specifier                            '*'
                                                           ↳ 1117: simple-type-specifier                                                   ↳ 662: decltype-specifier                   "::"
                                                                   ↳ 1004: nested-name-specifier template-name                                    ↳ 233: "decltype" '(' expression ')'
                                                                                                 ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens "decltype", "auto" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • "decltype" '(' "auto" ')' declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                                      declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1117: simple-type-specifier
                                                                   ↳ 1003: placeholder-type-specifier
                                                                           ↳ 854: type-constraint                                   "decltype" '(' "auto" ')'
                                                                                  ↳ 1084: nested-name-specifier concept-name
                                                                                                                ↳ 163: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • "decltype" '(' expression ')' "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                                               function-body
                                      ↳ 210: decl-specifier                                                                  ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                         ↳ 896: ptr-operator                                                ptr-declarator
                                                    ↳ 238: type-specifier                                                                  ↳ 905: nested-name-specifier                            '*'
                                                           ↳ 1117: simple-type-specifier                                                          ↳ 662: decltype-specifier                   "::"
                                                                   ↳ 999: nested-name-specifier type-name                                                ↳ 233: "decltype" '(' expression ')'
                                                                                                ↳ 1094: typedef-name
                                                                                                        ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on token '<' [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • '<' '>' "auto" declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                                           declarator function-body
                                      ↳ 210: decl-specifier
                                             ↳ 202: defining-type-specifier
                                                    ↳ 238: type-specifier
                                                           ↳ 1117: simple-type-specifier
                                                                   ↳ 1003: placeholder-type-specifier
                                                                           ↳ 852: type-constraint                                           "auto"
                                                                                  ↳ 1086: nested-name-specifier concept-name        '<' '>'
                                                                                                                ↳ 163: IDENTIFIER •
  Second example: declarator "requires" '(' nested-name-specifier IDENTIFIER • '<' "..." ')' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                       fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                                               ↳ 374: '<'
                                                                                                          ↳ 1130: postfix-expression
                                                                                                                  ↳ 860: primary-expression
                                                                                                                         ↳ 886: id-expression
                                                                                                                                ↳ 464: qualified-id
                                                                                                                                       ↳ 913: nested-name-specifier unqualified-id
                                                                                                                                                                    ↳ 1154: IDENTIFIER •
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                             function-body
                                      ↳ 229: ptr-declarator
                                             ↳ 896: ptr-operator                                              ptr-declarator
                                                    ↳ 905: nested-name-specifier                          '*'
                                                           ↳ 663: nested-name-specifier IDENTIFIER • "::"
  Second example: nested-name-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                    declarator                                                    function-body
                                      ↳ 210: decl-specifier                                                                 ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                        ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                                                 ↳ 905: nested-name-specifier '*'
                                                           ↳ 1117: simple-type-specifier                                                         ↳ 659: "::"
                                                                   ↳ 999: nested-name-specifier type-name
                                                                                                ↳ 1093: enum-name
                                                                                                        ↳ 297: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', ':', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                    declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                                 ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                        ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                                 ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                         ↳ 661: namespace-name    "::"
                                                                   ↳ 999: nested-name-specifier type-name                                               ↳ 657: IDENTIFIER
                                                                                                ↳ 1093: enum-name
                                                                                                        ↳ 297: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                              declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                           ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                  ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                           ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                   ↳ 661: namespace-name    "::"
                                                                   ↳ 1004: nested-name-specifier template-name                                    ↳ 657: IDENTIFIER
                                                                                                 ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', ':', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                    declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                                 ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                        ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                                 ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                         ↳ 661: namespace-name    "::"
                                                                   ↳ 999: nested-name-specifier type-name                                               ↳ 657: IDENTIFIER
                                                                                                ↳ 1093: enum-name
                                                                                                        ↳ 297: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                                  ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                         ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                                  ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                          ↳ 661: namespace-name    "::"
                                                                   ↳ 999: nested-name-specifier type-name                                                ↳ 657: IDENTIFIER
                                                                                                ↳ 1094: typedef-name
                                                                                                        ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens '=', ';', "alignas", '(', ')', "...", '&', ',', '[', ':', '{', "&&", '>', '*' [-Wcounterexamples]
  First example: template-name '(' decl-specifier-seq '(' nested-name-specifier IDENTIFIER • '=' initializer-clause ')' trailing-return-type ')' "->" simple-template-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 217: deduction-guide
                               ↳ 235: template-name '(' parameter-declaration-clause                                                                                                                                                                                       ')' "->" simple-template-id ';'
                                                        ↳ 830: parameter-declaration-list
                                                               ↳ 834: parameter-declaration
                                                                      ↳ 819: decl-specifier-seq abstract-declarator
                                                                                                ↳ 3: parameters-and-qualifiers                                                                                                                        trailing-return-type
                                                                                                     ↳ 836: '(' parameter-declaration-clause                                                                                                      ')'
                                                                                                                ↳ 830: parameter-declaration-list
                                                                                                                       ↳ 834: parameter-declaration
                                                                                                                              ↳ 823: decl-specifier-seq                                                                    '=' initializer-clause
                                                                                                                                     ↳ 210: decl-specifier
                                                                                                                                            ↳ 202: defining-type-specifier
                                                                                                                                                   ↳ 238: type-specifier
                                                                                                                                                          ↳ 1117: simple-type-specifier
                                                                                                                                                                  ↳ 999: nested-name-specifier type-name
                                                                                                                                                                                               ↳ 1093: enum-name
                                                                                                                                                                                                       ↳ 297: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • '=' "default" ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                           function-body
                                      ↳ 229: ptr-declarator                                                                ↳ 396: '=' "default" ';'
                                             ↳ 895: noptr-declarator
                                                    ↳ 725: declarator-id
                                                           ↳ 232: id-expression
                                                                  ↳ 464: qualified-id
                                                                         ↳ 913: nested-name-specifier unqualified-id
                                                                                                      ↳ 1154: IDENTIFIER •
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                             function-body
                                      ↳ 229: ptr-declarator
                                             ↳ 896: ptr-operator                                              ptr-declarator
                                                    ↳ 905: nested-name-specifier                          '*'
                                                           ↳ 663: nested-name-specifier IDENTIFIER • "::"
  Second example: nested-name-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                              declarator                                                    function-body
                                      ↳ 210: decl-specifier                                                           ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                  ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                                           ↳ 905: nested-name-specifier '*'
                                                           ↳ 1117: simple-type-specifier                                                   ↳ 659: "::"
                                                                   ↳ 1004: nested-name-specifier template-name
                                                                                                 ↳ 1066: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', ':', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                              declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                           ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                  ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                           ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                   ↳ 661: namespace-name    "::"
                                                                   ↳ 1004: nested-name-specifier template-name                                    ↳ 657: IDENTIFIER
                                                                                                 ↳ 1066: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                                  ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                         ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                                  ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                          ↳ 661: namespace-name    "::"
                                                                   ↳ 999: nested-name-specifier type-name                                                ↳ 657: IDENTIFIER
                                                                                                ↳ 1094: typedef-name
                                                                                                        ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens '=', ';', "alignas", '(', ')', "...", '&', ',', '[', ':', '{', "&&", '<', '>', '*' [-Wcounterexamples]
  First example: template-name '(' decl-specifier-seq '(' nested-name-specifier IDENTIFIER • '=' initializer-clause ')' trailing-return-type ')' "->" simple-template-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 217: deduction-guide
                               ↳ 235: template-name '(' parameter-declaration-clause                                                                                                                                                                                 ')' "->" simple-template-id ';'
                                                        ↳ 830: parameter-declaration-list
                                                               ↳ 834: parameter-declaration
                                                                      ↳ 819: decl-specifier-seq abstract-declarator
                                                                                                ↳ 3: parameters-and-qualifiers                                                                                                                  trailing-return-type
                                                                                                     ↳ 836: '(' parameter-declaration-clause                                                                                                ')'
                                                                                                                ↳ 830: parameter-declaration-list
                                                                                                                       ↳ 834: parameter-declaration
                                                                                                                              ↳ 823: decl-specifier-seq                                                              '=' initializer-clause
                                                                                                                                     ↳ 210: decl-specifier
                                                                                                                                            ↳ 202: defining-type-specifier
                                                                                                                                                   ↳ 238: type-specifier
                                                                                                                                                          ↳ 1117: simple-type-specifier
                                                                                                                                                                  ↳ 1004: nested-name-specifier template-name
                                                                                                                                                                                                ↳ 1066: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • '=' "default" ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                           function-body
                                      ↳ 229: ptr-declarator                                                                ↳ 396: '=' "default" ';'
                                             ↳ 895: noptr-declarator
                                                    ↳ 725: declarator-id
                                                           ↳ 232: id-expression
                                                                  ↳ 464: qualified-id
                                                                         ↳ 913: nested-name-specifier unqualified-id
                                                                                                      ↳ 1154: IDENTIFIER •
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: nested-name-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                             function-body
                                      ↳ 229: ptr-declarator
                                             ↳ 896: ptr-operator                                              ptr-declarator
                                                    ↳ 905: nested-name-specifier                          '*'
                                                           ↳ 663: nested-name-specifier IDENTIFIER • "::"
  Second example: nested-name-specifier IDENTIFIER • "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                     declarator                                                    function-body
                                      ↳ 210: decl-specifier                                                                  ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                         ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                                                  ↳ 905: nested-name-specifier '*'
                                                           ↳ 1117: simple-type-specifier                                                          ↳ 659: "::"
                                                                   ↳ 999: nested-name-specifier type-name
                                                                                                ↳ 1094: typedef-name
                                                                                                        ↳ 1124: IDENTIFIER •
cplusplus.y: warning: reduce/reduce conflict on tokens '=', ';', "alignas", '(', ')', "...", '&', ',', '[', ':', '{', "&&", '>', '*' [-Wcounterexamples]
  First example: template-name '(' decl-specifier-seq '(' nested-name-specifier IDENTIFIER • '=' initializer-clause ')' trailing-return-type ')' "->" simple-template-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 217: deduction-guide
                               ↳ 235: template-name '(' parameter-declaration-clause                                                                                                                                                                                        ')' "->" simple-template-id ';'
                                                        ↳ 830: parameter-declaration-list
                                                               ↳ 834: parameter-declaration
                                                                      ↳ 819: decl-specifier-seq abstract-declarator
                                                                                                ↳ 3: parameters-and-qualifiers                                                                                                                         trailing-return-type
                                                                                                     ↳ 836: '(' parameter-declaration-clause                                                                                                       ')'
                                                                                                                ↳ 830: parameter-declaration-list
                                                                                                                       ↳ 834: parameter-declaration
                                                                                                                              ↳ 823: decl-specifier-seq                                                                     '=' initializer-clause
                                                                                                                                     ↳ 210: decl-specifier
                                                                                                                                            ↳ 202: defining-type-specifier
                                                                                                                                                   ↳ 238: type-specifier
                                                                                                                                                          ↳ 1117: simple-type-specifier
                                                                                                                                                                  ↳ 999: nested-name-specifier type-name
                                                                                                                                                                                               ↳ 1094: typedef-name
                                                                                                                                                                                                       ↳ 1124: IDENTIFIER •
  Second example: nested-name-specifier IDENTIFIER • '=' "default" ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                           function-body
                                      ↳ 229: ptr-declarator                                                                ↳ 396: '=' "default" ';'
                                             ↳ 895: noptr-declarator
                                                    ↳ 725: declarator-id
                                                           ↳ 232: id-expression
                                                                  ↳ 464: qualified-id
                                                                         ↳ 913: nested-name-specifier unqualified-id
                                                                                                      ↳ 1154: IDENTIFIER •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: type-specifier-seq nested-name-specifier '*' • "alignas" '(' type-id ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                           ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                               parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                                   attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                                              conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 906: nested-name-specifier '*' attribute-specifier-seq
                                                                                                                                                   ↳ 54: attribute-specifier
                                                                                                                                                         ↳ 52: alignment-specifier
                                                                                                                                                               ↳ 15: • "alignas" '(' type-id ')'
  Second example: "operator" type-specifier-seq nested-name-specifier '*' • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                           ';'
                                      ↳ 230: noptr-declarator                                                                                                                                               parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                               attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                        ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                      ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                            ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 905: nested-name-specifier '*' •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: type-specifier-seq nested-name-specifier '*' • "alignas" '(' type-id "..." ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                                 ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                                     parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                                         attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                                                    conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 906: nested-name-specifier '*' attribute-specifier-seq
                                                                                                                                                   ↳ 54: attribute-specifier
                                                                                                                                                         ↳ 52: alignment-specifier
                                                                                                                                                               ↳ 16: • "alignas" '(' type-id "..." ')'
  Second example: "operator" type-specifier-seq nested-name-specifier '*' • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                           ';'
                                      ↳ 230: noptr-declarator                                                                                                                                               parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                               attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                        ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                      ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                            ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 905: nested-name-specifier '*' •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: type-specifier-seq nested-name-specifier '*' • "alignas" '(' constant-expression ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                                       ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                                           parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                                               attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                                                          conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 906: nested-name-specifier '*' attribute-specifier-seq
                                                                                                                                                   ↳ 54: attribute-specifier
                                                                                                                                                         ↳ 52: alignment-specifier
                                                                                                                                                               ↳ 17: • "alignas" '(' constant-expression ')'
  Second example: "operator" type-specifier-seq nested-name-specifier '*' • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                           ';'
                                      ↳ 230: noptr-declarator                                                                                                                                               parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                               attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                        ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                      ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                            ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 905: nested-name-specifier '*' •
cplusplus.y: warning: shift/reduce conflict on token "alignas" [-Wcounterexamples]
  First example: type-specifier-seq nested-name-specifier '*' • "alignas" '(' constant-expression "..." ')' conversion-type-id attribute-specifier-seq parameters-and-qualifiers trailing-return-type ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                                                                             ';'
                                      ↳ 230: noptr-declarator                                                                                                                                                                                                 parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                                                                                                     attribute-specifier-seq
                                                    ↳ 232: id-expression
                                                           ↳ 463: unqualified-id
                                                                  ↳ 1156: conversion-function-id
                                                                          ↳ 179: conversion-type-id                                                                                                                conversion-type-id
                                                                                 ↳ 181: type-specifier-seq conversion-declarator
                                                                                                           ↳ 177: ptr-operator
                                                                                                                  ↳ 906: nested-name-specifier '*' attribute-specifier-seq
                                                                                                                                                   ↳ 54: attribute-specifier
                                                                                                                                                         ↳ 52: alignment-specifier
                                                                                                                                                               ↳ 18: • "alignas" '(' constant-expression "..." ')'
  Second example: "operator" type-specifier-seq nested-name-specifier '*' • "alignas" '(' type-id ')' parameters-and-qualifiers trailing-return-type ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 214: nodeclspec-function-declaration
                               ↳ 695: declarator                                                                                                                                                                                                           ';'
                                      ↳ 230: noptr-declarator                                                                                                                                               parameters-and-qualifiers trailing-return-type
                                             ↳ 726: declarator-id                                                                                               attribute-specifier-seq
                                                    ↳ 232: id-expression                                                                                        ↳ 54: attribute-specifier
                                                           ↳ 463: unqualified-id                                                                                      ↳ 52: alignment-specifier
                                                                  ↳ 1156: conversion-function-id                                                                            ↳ 15: "alignas" '(' type-id ')'
                                                                          ↳ 179: "operator" conversion-type-id
                                                                                            ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                      ↳ 177: ptr-operator
                                                                                                                             ↳ 905: nested-name-specifier '*' •
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "using" IDENTIFIER defining-type-specifier-seq nested-name-specifier '*' • '[' '[' attribute-list ']' ']' abstract-pack-declarator defining-type-id ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER defining-type-id                                                                                                                                    defining-type-id ';'
                                                               ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                  ↳ 4: abstract-pack-declarator
                                                                                                       ↳ 6: ptr-operator                                                                  abstract-pack-declarator
                                                                                                            ↳ 906: nested-name-specifier '*' attribute-specifier-seq
                                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                                   ↳ 50: • '[' '[' attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq nested-name-specifier '*' • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                   ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator                       ptr-abstract-declarator
                                                                                                                  ↳ 905: nested-name-specifier '*' • ↳ 892: noptr-abstract-declarator
                                                                                                                                                            ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token '[' [-Wcounterexamples]
  First example: "using" IDENTIFIER defining-type-specifier-seq nested-name-specifier '*' • '[' '[' attribute-using-prefix attribute-list ']' ']' abstract-pack-declarator defining-type-id ';' $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER defining-type-id                                                                                                                                                           defining-type-id ';'
                                                               ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                  ↳ 4: abstract-pack-declarator
                                                                                                       ↳ 6: ptr-operator                                                                                         abstract-pack-declarator
                                                                                                            ↳ 906: nested-name-specifier '*' attribute-specifier-seq
                                                                                                                                             ↳ 54: attribute-specifier
                                                                                                                                                   ↳ 51: • '[' '[' attribute-using-prefix attribute-list ']' ']'
  Second example: "using" IDENTIFIER '=' defining-type-specifier-seq nested-name-specifier '*' • '[' ']' ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 102: alias-declaration
                                      ↳ 13: "using" IDENTIFIER '=' defining-type-id                                                                                                   ';'
                                                                   ↳ 237: defining-type-specifier-seq abstract-declarator
                                                                                                      ↳ 1: ptr-abstract-declarator
                                                                                                           ↳ 894: ptr-operator                       ptr-abstract-declarator
                                                                                                                  ↳ 905: nested-name-specifier '*' • ↳ 892: noptr-abstract-declarator
                                                                                                                                                            ↳ 711: '[' ']'
cplusplus.y: warning: shift/reduce conflict on token "const" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" type-specifier-seq nested-name-specifier '*' • "const" conversion-type-id declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                                                declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: conversion-type-id                                                                        conversion-type-id
                                                                                                                                                       ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                 ↳ 177: ptr-operator
                                                                                                                                                                                        ↳ 907: nested-name-specifier '*' cv-qualifier-seq
                                                                                                                                                                                                                         ↳ 187: cv-qualifier
                                                                                                                                                                                                                                ↳ 185: • "const"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq nested-name-specifier '*' • "const" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                  declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                                                             ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                                                                 ↳ 401: decl-specifier-seq                          declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                                                                ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                                                               ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                                                    ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                                                                   ↳ 1120: cv-qualifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                                                           ↳ 185: "const"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                            ↳ 177: ptr-operator
                                                                                                                                                                                                   ↳ 905: nested-name-specifier '*' •
cplusplus.y: warning: shift/reduce conflict on token "volatile" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list '>' "requires" type-specifier-seq nested-name-specifier '*' • "volatile" conversion-type-id declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                                                   declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause
                                                                                          ↳ 943: "requires" constraint-logical-or-expression
                                                                                                            ↳ 175: constraint-logical-and-expression
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 886: id-expression
                                                                                                                                 ↳ 463: unqualified-id
                                                                                                                                        ↳ 1156: conversion-function-id
                                                                                                                                                ↳ 179: conversion-type-id                                                                           conversion-type-id
                                                                                                                                                       ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                 ↳ 177: ptr-operator
                                                                                                                                                                                        ↳ 907: nested-name-specifier '*' cv-qualifier-seq
                                                                                                                                                                                                                         ↳ 187: cv-qualifier
                                                                                                                                                                                                                                ↳ 186: • "volatile"
  Second example: "template" '<' template-parameter-list '>' "requires" "operator" type-specifier-seq nested-name-specifier '*' • "volatile" declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                                   $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                  declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                                                             ↳ 215: function-definition
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                                                                 ↳ 401: decl-specifier-seq                             declarator function-body
                                                                                                            ↳ 175: constraint-logical-and-expression                                                                                                ↳ 210: decl-specifier
                                                                                                                   ↳ 173: primary-expression                                                                                                               ↳ 202: defining-type-specifier
                                                                                                                          ↳ 886: id-expression                                                                                                                    ↳ 238: type-specifier
                                                                                                                                 ↳ 463: unqualified-id                                                                                                                   ↳ 1120: cv-qualifier
                                                                                                                                        ↳ 1156: conversion-function-id                                                                                                           ↳ 186: "volatile"
                                                                                                                                                ↳ 179: "operator" conversion-type-id
                                                                                                                                                                  ↳ 181: type-specifier-seq conversion-declarator
                                                                                                                                                                                            ↳ 177: ptr-operator
                                                                                                                                                                                                   ↳ 905: nested-name-specifier '*' •
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: nested-name-specifier simple-template-id • "::" '*' ptr-declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                                     function-body
                                      ↳ 229: ptr-declarator
                                             ↳ 896: ptr-operator                                                      ptr-declarator
                                                    ↳ 905: nested-name-specifier                                  '*'
                                                           ↳ 664: nested-name-specifier simple-template-id • "::"
  Second example: nested-name-specifier simple-template-id • "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                            declarator                                                    function-body
                                      ↳ 210: decl-specifier                                                                         ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                                ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                                                         ↳ 905: nested-name-specifier '*'
                                                           ↳ 1117: simple-type-specifier                                                                 ↳ 659: "::"
                                                                   ↳ 999: nested-name-specifier type-name
                                                                                                ↳ 1092: class-name
                                                                                                        ↳ 146: simple-template-id •
cplusplus.y: warning: reduce/reduce conflict on tokens '=', ';', "alignas", '(', ')', "...", '&', ',', '[', ':', '{', "&&", '>', '*' [-Wcounterexamples]
  First example: template-name '(' decl-specifier-seq '(' nested-name-specifier simple-template-id • '=' initializer-clause ')' trailing-return-type ')' "->" simple-template-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 217: deduction-guide
                               ↳ 235: template-name '(' parameter-declaration-clause                                                                                                                                                                                               ')' "->" simple-template-id ';'
                                                        ↳ 830: parameter-declaration-list
                                                               ↳ 834: parameter-declaration
                                                                      ↳ 819: decl-specifier-seq abstract-declarator
                                                                                                ↳ 3: parameters-and-qualifiers                                                                                                                                trailing-return-type
                                                                                                     ↳ 836: '(' parameter-declaration-clause                                                                                                              ')'
                                                                                                                ↳ 830: parameter-declaration-list
                                                                                                                       ↳ 834: parameter-declaration
                                                                                                                              ↳ 823: decl-specifier-seq                                                                            '=' initializer-clause
                                                                                                                                     ↳ 210: decl-specifier
                                                                                                                                            ↳ 202: defining-type-specifier
                                                                                                                                                   ↳ 238: type-specifier
                                                                                                                                                          ↳ 1117: simple-type-specifier
                                                                                                                                                                  ↳ 999: nested-name-specifier type-name
                                                                                                                                                                                               ↳ 1092: class-name
                                                                                                                                                                                                       ↳ 146: simple-template-id •
  Second example: nested-name-specifier simple-template-id • '=' "default" ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                                           function-body
                                      ↳ 229: ptr-declarator                                                                                ↳ 396: '=' "default" ';'
                                             ↳ 895: noptr-declarator
                                                    ↳ 725: declarator-id
                                                           ↳ 232: id-expression
                                                                  ↳ 464: qualified-id
                                                                         ↳ 913: nested-name-specifier unqualified-id
                                                                                                      ↳ 1160: template-id
                                                                                                              ↳ 1061: simple-template-id •
cplusplus.y: warning: reduce/reduce conflict on tokens IDENTIFIER, '=', ';', "alignas", '(', ')', "...", '&', ',', "::", '[', ':', '{', "virtual", "class", "struct", "union", "&&", "operator", "const", "volatile", "friend", "typedef", "constexpr", "consteval", "constinit", "inline", "decltype", "enum", "extern", '>', "explicit", '*', '~', "auto", "char", "char8_t", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "static", "thread_local", "mutable", "typename" [-Wcounterexamples]
  First example: nested-name-specifier simple-template-id • IDENTIFIER "::" '*' ptr-declarator function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                               $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                            declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                                         ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                                ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                                         ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                                 ↳ 661: namespace-name    "::"
                                                                   ↳ 999: nested-name-specifier type-name                                                       ↳ 657: IDENTIFIER
                                                                                                ↳ 1092: class-name
                                                                                                        ↳ 146: simple-template-id •
  Second example: nested-name-specifier simple-template-id • IDENTIFIER "::" '*' ptr-declarator function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                             declarator                                                            function-body
                                      ↳ 210: decl-specifier                                                                          ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                                 ↳ 896: ptr-operator                             ptr-declarator
                                                    ↳ 238: type-specifier                                                                          ↳ 905: nested-name-specifier         '*'
                                                           ↳ 1117: simple-type-specifier                                                                  ↳ 661: namespace-name    "::"
                                                                   ↳ 999: nested-name-specifier type-name                                                        ↳ 657: IDENTIFIER
                                                                                                ↳ 1094: typedef-name
                                                                                                        ↳ 1125: simple-template-id •
cplusplus.y: warning: reduce/reduce conflict on tokens '=', ';', "alignas", '(', ')', "...", '&', ',', '[', ':', '{', "&&", '>', '*' [-Wcounterexamples]
  First example: nested-name-specifier simple-template-id • '=' "default" ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                                           function-body
                                      ↳ 229: ptr-declarator                                                                                ↳ 396: '=' "default" ';'
                                             ↳ 895: noptr-declarator
                                                    ↳ 725: declarator-id
                                                           ↳ 232: id-expression
                                                                  ↳ 464: qualified-id
                                                                         ↳ 913: nested-name-specifier unqualified-id
                                                                                                      ↳ 1160: template-id
                                                                                                              ↳ 1061: simple-template-id •
  Second example: template-name '(' decl-specifier-seq '(' nested-name-specifier simple-template-id • '=' initializer-clause ')' trailing-return-type ')' "->" simple-template-id ';' $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 217: deduction-guide
                               ↳ 235: template-name '(' parameter-declaration-clause                                                                                                                                                                                                ')' "->" simple-template-id ';'
                                                        ↳ 830: parameter-declaration-list
                                                               ↳ 834: parameter-declaration
                                                                      ↳ 819: decl-specifier-seq abstract-declarator
                                                                                                ↳ 3: parameters-and-qualifiers                                                                                                                                 trailing-return-type
                                                                                                     ↳ 836: '(' parameter-declaration-clause                                                                                                               ')'
                                                                                                                ↳ 830: parameter-declaration-list
                                                                                                                       ↳ 834: parameter-declaration
                                                                                                                              ↳ 823: decl-specifier-seq                                                                             '=' initializer-clause
                                                                                                                                     ↳ 210: decl-specifier
                                                                                                                                            ↳ 202: defining-type-specifier
                                                                                                                                                   ↳ 238: type-specifier
                                                                                                                                                          ↳ 1117: simple-type-specifier
                                                                                                                                                                  ↳ 999: nested-name-specifier type-name
                                                                                                                                                                                               ↳ 1094: typedef-name
                                                                                                                                                                                                       ↳ 1125: simple-template-id •
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: nested-name-specifier simple-template-id • "::" '*' ptr-declarator function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 399: declarator                                                                                     function-body
                                      ↳ 229: ptr-declarator
                                             ↳ 896: ptr-operator                                                      ptr-declarator
                                                    ↳ 905: nested-name-specifier                                  '*'
                                                           ↳ 664: nested-name-specifier simple-template-id • "::"
  Second example: nested-name-specifier simple-template-id • "::" '*' ptr-declarator function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 401: decl-specifier-seq                                                                             declarator                                                    function-body
                                      ↳ 210: decl-specifier                                                                          ↳ 229: ptr-declarator
                                             ↳ 202: defining-type-specifier                                                                 ↳ 896: ptr-operator                     ptr-declarator
                                                    ↳ 238: type-specifier                                                                          ↳ 905: nested-name-specifier '*'
                                                           ↳ 1117: simple-type-specifier                                                                  ↳ 659: "::"
                                                                   ↳ 999: nested-name-specifier type-name
                                                                                                ↳ 1094: typedef-name
                                                                                                        ↳ 1125: simple-template-id •
cplusplus.y: warning: shift/reduce conflict on token '<' [-Wcounterexamples]
  First example: declarator "requires" '(' "new" nested-name-specifier template-name • '<' '>' "::" type-name fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                             $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                                                        function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                                                              fold-operator "..." ')'
                                                                                                   ↳ 124: new-expression
                                                                                                          ↳ 673: "new" new-type-id
                                                                                                                       ↳ 692: type-specifier-seq
                                                                                                                              ↳ 1121: type-specifier
                                                                                                                                      ↳ 1117: simple-type-specifier
                                                                                                                                              ↳ 999: nested-name-specifier                                            type-name
                                                                                                                                                     ↳ 664: nested-name-specifier simple-template-id             "::"
                                                                                                                                                                                  ↳ 997: template-name • '<' '>'
  Second example: declarator "requires" '(' "new" nested-name-specifier template-name • '<' "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                            function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                                  fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                                                          ↳ 374: '<'
                                                                                                          ↳ 1140: new-expression
                                                                                                                  ↳ 673: "new" new-type-id
                                                                                                                               ↳ 692: type-specifier-seq
                                                                                                                                      ↳ 1121: type-specifier
                                                                                                                                              ↳ 1117: simple-type-specifier
                                                                                                                                                      ↳ 1004: nested-name-specifier template-name •
cplusplus.y: warning: shift/reduce conflict on token '<' [-Wcounterexamples]
  First example: declarator "requires" '(' "new" nested-name-specifier template-name • '<' template-argument-list '>' "::" type-name fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                                                                               function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                                                                                     fold-operator "..." ')'
                                                                                                   ↳ 124: new-expression
                                                                                                          ↳ 673: "new" new-type-id
                                                                                                                       ↳ 692: type-specifier-seq
                                                                                                                              ↳ 1121: type-specifier
                                                                                                                                      ↳ 1117: simple-type-specifier
                                                                                                                                              ↳ 999: nested-name-specifier                                                                   type-name
                                                                                                                                                     ↳ 664: nested-name-specifier simple-template-id                                    "::"
                                                                                                                                                                                  ↳ 998: template-name • '<' template-argument-list '>'
  Second example: declarator "requires" '(' "new" nested-name-specifier template-name • '<' "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                            function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                                  fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                                                          ↳ 374: '<'
                                                                                                          ↳ 1140: new-expression
                                                                                                                  ↳ 673: "new" new-type-id
                                                                                                                               ↳ 692: type-specifier-seq
                                                                                                                                      ↳ 1121: type-specifier
                                                                                                                                              ↳ 1117: simple-type-specifier
                                                                                                                                                      ↳ 1004: nested-name-specifier template-name •
cplusplus.y: warning: reduce/reduce conflict on token '<' [-Wcounterexamples]
  First example: "using" nested-name-specifier IDENTIFIER • '<' '>' "::" unqualified-id ';' $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 213: block-declaration
                               ↳ 98: using-declaration
                                     ↳ 1178: "using" using-declarator-list                                                                                ';'
                                                     ↳ 1181: using-declarator
                                                             ↳ 1180: nested-name-specifier                                                 unqualified-id
                                                                     ↳ 664: nested-name-specifier simple-template-id                  "::"
                                                                                                  ↳ 997: template-name        '<' '>'
                                                                                                         ↳ 1066: IDENTIFIER •
  Second example: declarator "requires" '(' postfix-expression '.' nested-name-specifier IDENTIFIER • '<' "..." ')' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                                       fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression                                                                               ↳ 374: '<'
                                                                                                          ↳ 1130: postfix-expression
                                                                                                                  ↳ 871: postfix-expression '.' id-expression
                                                                                                                                                ↳ 464: qualified-id
                                                                                                                                                       ↳ 913: nested-name-specifier unqualified-id
                                                                                                                                                                                    ↳ 1154: IDENTIFIER •
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list "requires" nested-name-specifier IDENTIFIER • "::" unqualified-id requires-clause declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                     declaration
                                       ↳ 1060: "template" '<' template-parameter-list requires-clause                                                                                                    requires-clause
                                                                                      ↳ 943: "requires" constraint-logical-or-expression
                                                                                                        ↳ 175: constraint-logical-and-expression
                                                                                                               ↳ 173: primary-expression
                                                                                                                      ↳ 886: id-expression
                                                                                                                             ↳ 464: qualified-id
                                                                                                                                    ↳ 913: nested-name-specifier                          unqualified-id
                                                                                                                                           ↳ 663: nested-name-specifier IDENTIFIER • "::"
  Second example: "template" '<' template-parameter-list '>' "requires" nested-name-specifier IDENTIFIER • "::" '*' ptr-declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                      declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                 ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                     ↳ 695: declarator                                                    ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                    ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                                                   ↳ 896: ptr-operator                     ptr-declarator
                                                                                                                          ↳ 886: id-expression                                                                        ↳ 905: nested-name-specifier '*'
                                                                                                                                 ↳ 464: qualified-id                                                                         ↳ 659: "::"
                                                                                                                                        ↳ 913: nested-name-specifier unqualified-id
                                                                                                                                                                     ↳ 1154: IDENTIFIER •
cplusplus.y: warning: shift/reduce conflict on token "::" [-Wcounterexamples]
  First example: "template" '<' template-parameter-list "requires" nested-name-specifier simple-template-id • "::" unqualified-id requires-clause declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                    $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                             declaration
                                       ↳ 1060: "template" '<' template-parameter-list requires-clause                                                                                                            requires-clause
                                                                                      ↳ 943: "requires" constraint-logical-or-expression
                                                                                                        ↳ 175: constraint-logical-and-expression
                                                                                                               ↳ 173: primary-expression
                                                                                                                      ↳ 886: id-expression
                                                                                                                             ↳ 464: qualified-id
                                                                                                                                    ↳ 913: nested-name-specifier                                  unqualified-id
                                                                                                                                           ↳ 664: nested-name-specifier simple-template-id • "::"
  Second example: "template" '<' template-parameter-list '>' "requires" nested-name-specifier simple-template-id • "::" '*' ptr-declarator ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                                 $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                      declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                                                 ↳ 214: nodeclspec-function-declaration
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                                                     ↳ 695: declarator                                                    ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                                                    ↳ 229: ptr-declarator
                                                                                                                   ↳ 173: primary-expression                                                                                   ↳ 896: ptr-operator                     ptr-declarator
                                                                                                                          ↳ 886: id-expression                                                                                        ↳ 905: nested-name-specifier '*'
                                                                                                                                 ↳ 464: qualified-id                                                                                         ↳ 659: "::"
                                                                                                                                        ↳ 913: nested-name-specifier unqualified-id
                                                                                                                                                                     ↳ 1160: template-id
                                                                                                                                                                             ↳ 1061: simple-template-id •
cplusplus.y: warning: reduce/reduce conflict on tokens '0', '1', '\'', '.', '2', '3', '4', '5', '6', '7' [-Wcounterexamples]
  First example: declarator "requires" '0' • '0' exponent-part function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 560: floating-point-literal
                                                                                               ↳ 342: decimal-floating-point-literal
                                                                                                      ↳ 196: digit-sequence                        exponent-part
                                                                                                             ↳ 263: digit-sequence      digit
                                                                                                                    ↳ 262: digit        ↳ 252: '0'
                                                                                                                           ↳ 252: '0' •
  Second example: declarator "requires" '0' • '0' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                       function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 558: integer-literal
                                                                                               ↳ 491: octal-literal
                                                                                                      ↳ 753: octal-literal octal-digit
                                                                                                             ↳ 752: '0' •  ↳ 741: '0'
cplusplus.y: warning: reduce/reduce conflict on tokens '0', '1', '\'', '.', '2', '3', '4', '5', '6', '7', '8', '9' [-Wcounterexamples]
  First example: declarator "requires" '1' • '0' exponent-part function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 560: floating-point-literal
                                                                                               ↳ 342: decimal-floating-point-literal
                                                                                                      ↳ 196: digit-sequence                        exponent-part
                                                                                                             ↳ 263: digit-sequence      digit
                                                                                                                    ↳ 262: digit        ↳ 252: '0'
                                                                                                                           ↳ 253: '1' •
  Second example: declarator "requires" '1' • '0' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                             function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 558: integer-literal
                                                                                               ↳ 493: decimal-literal
                                                                                                      ↳ 199: decimal-literal      digit
                                                                                                             ↳ 198: nonzero-digit ↳ 252: '0'
                                                                                                                    ↳ 699: '1' •
cplusplus.y: warning: reduce/reduce conflict on tokens '0', '1', '\'', '.', '2', '3', '4', '5', '6', '7', '8', '9' [-Wcounterexamples]
  First example: declarator "requires" '2' • '0' exponent-part function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 560: floating-point-literal
                                                                                               ↳ 342: decimal-floating-point-literal
                                                                                                      ↳ 196: digit-sequence                        exponent-part
                                                                                                             ↳ 263: digit-sequence      digit
                                                                                                                    ↳ 262: digit        ↳ 252: '0'
                                                                                                                           ↳ 254: '2' •
  Second example: declarator "requires" '2' • '0' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                             function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 558: integer-literal
                                                                                               ↳ 493: decimal-literal
                                                                                                      ↳ 199: decimal-literal      digit
                                                                                                             ↳ 198: nonzero-digit ↳ 252: '0'
                                                                                                                    ↳ 700: '2' •
cplusplus.y: warning: reduce/reduce conflict on tokens '0', '1', '\'', '.', '2', '3', '4', '5', '6', '7', '8', '9' [-Wcounterexamples]
  First example: declarator "requires" '3' • '0' exponent-part function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 560: floating-point-literal
                                                                                               ↳ 342: decimal-floating-point-literal
                                                                                                      ↳ 196: digit-sequence                        exponent-part
                                                                                                             ↳ 263: digit-sequence      digit
                                                                                                                    ↳ 262: digit        ↳ 252: '0'
                                                                                                                           ↳ 255: '3' •
  Second example: declarator "requires" '3' • '0' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                             function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 558: integer-literal
                                                                                               ↳ 493: decimal-literal
                                                                                                      ↳ 199: decimal-literal      digit
                                                                                                             ↳ 198: nonzero-digit ↳ 252: '0'
                                                                                                                    ↳ 701: '3' •
cplusplus.y: warning: reduce/reduce conflict on tokens '0', '1', '\'', '.', '2', '3', '4', '5', '6', '7', '8', '9' [-Wcounterexamples]
  First example: declarator "requires" '4' • '0' exponent-part function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 560: floating-point-literal
                                                                                               ↳ 342: decimal-floating-point-literal
                                                                                                      ↳ 196: digit-sequence                        exponent-part
                                                                                                             ↳ 263: digit-sequence      digit
                                                                                                                    ↳ 262: digit        ↳ 252: '0'
                                                                                                                           ↳ 256: '4' •
  Second example: declarator "requires" '4' • '0' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                             function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 558: integer-literal
                                                                                               ↳ 493: decimal-literal
                                                                                                      ↳ 199: decimal-literal      digit
                                                                                                             ↳ 198: nonzero-digit ↳ 252: '0'
                                                                                                                    ↳ 702: '4' •
cplusplus.y: warning: reduce/reduce conflict on tokens '0', '1', '\'', '.', '2', '3', '4', '5', '6', '7', '8', '9' [-Wcounterexamples]
  First example: declarator "requires" '5' • '0' exponent-part function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 560: floating-point-literal
                                                                                               ↳ 342: decimal-floating-point-literal
                                                                                                      ↳ 196: digit-sequence                        exponent-part
                                                                                                             ↳ 263: digit-sequence      digit
                                                                                                                    ↳ 262: digit        ↳ 252: '0'
                                                                                                                           ↳ 257: '5' •
  Second example: declarator "requires" '5' • '0' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                             function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 558: integer-literal
                                                                                               ↳ 493: decimal-literal
                                                                                                      ↳ 199: decimal-literal      digit
                                                                                                             ↳ 198: nonzero-digit ↳ 252: '0'
                                                                                                                    ↳ 703: '5' •
cplusplus.y: warning: reduce/reduce conflict on tokens '0', '1', '\'', '.', '2', '3', '4', '5', '6', '7', '8', '9' [-Wcounterexamples]
  First example: declarator "requires" '6' • '0' exponent-part function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 560: floating-point-literal
                                                                                               ↳ 342: decimal-floating-point-literal
                                                                                                      ↳ 196: digit-sequence                        exponent-part
                                                                                                             ↳ 263: digit-sequence      digit
                                                                                                                    ↳ 262: digit        ↳ 252: '0'
                                                                                                                           ↳ 258: '6' •
  Second example: declarator "requires" '6' • '0' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                             function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 558: integer-literal
                                                                                               ↳ 493: decimal-literal
                                                                                                      ↳ 199: decimal-literal      digit
                                                                                                             ↳ 198: nonzero-digit ↳ 252: '0'
                                                                                                                    ↳ 704: '6' •
cplusplus.y: warning: reduce/reduce conflict on tokens '0', '1', '\'', '.', '2', '3', '4', '5', '6', '7', '8', '9' [-Wcounterexamples]
  First example: declarator "requires" '7' • '0' exponent-part function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 560: floating-point-literal
                                                                                               ↳ 342: decimal-floating-point-literal
                                                                                                      ↳ 196: digit-sequence                        exponent-part
                                                                                                             ↳ 263: digit-sequence      digit
                                                                                                                    ↳ 262: digit        ↳ 252: '0'
                                                                                                                           ↳ 259: '7' •
  Second example: declarator "requires" '7' • '0' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                             function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 558: integer-literal
                                                                                               ↳ 493: decimal-literal
                                                                                                      ↳ 199: decimal-literal      digit
                                                                                                             ↳ 198: nonzero-digit ↳ 252: '0'
                                                                                                                    ↳ 705: '7' •
cplusplus.y: warning: reduce/reduce conflict on tokens '0', '1', '\'', '.', '2', '3', '4', '5', '6', '7', '8', '9' [-Wcounterexamples]
  First example: declarator "requires" '8' • '0' exponent-part function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 560: floating-point-literal
                                                                                               ↳ 342: decimal-floating-point-literal
                                                                                                      ↳ 196: digit-sequence                        exponent-part
                                                                                                             ↳ 263: digit-sequence      digit
                                                                                                                    ↳ 262: digit        ↳ 252: '0'
                                                                                                                           ↳ 260: '8' •
  Second example: declarator "requires" '8' • '0' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                             function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 558: integer-literal
                                                                                               ↳ 493: decimal-literal
                                                                                                      ↳ 199: decimal-literal      digit
                                                                                                             ↳ 198: nonzero-digit ↳ 252: '0'
                                                                                                                    ↳ 706: '8' •
cplusplus.y: warning: reduce/reduce conflict on tokens '0', '1', '\'', '.', '2', '3', '4', '5', '6', '7', '8', '9' [-Wcounterexamples]
  First example: declarator "requires" '9' • '0' exponent-part function-body $end
  First reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 560: floating-point-literal
                                                                                               ↳ 342: decimal-floating-point-literal
                                                                                                      ↳ 196: digit-sequence                        exponent-part
                                                                                                             ↳ 263: digit-sequence      digit
                                                                                                                    ↳ 262: digit        ↳ 252: '0'
                                                                                                                           ↳ 261: '9' •
  Second example: declarator "requires" '9' • '0' function-body $end
  Second reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                  $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                             function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 883: literal
                                                                                        ↳ 558: integer-literal
                                                                                               ↳ 493: decimal-literal
                                                                                                      ↳ 199: decimal-literal      digit
                                                                                                             ↳ 198: nonzero-digit ↳ 252: '0'
                                                                                                                    ↳ 707: '9' •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: declarator "requires" '(' '~' • IDENTIFIER fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: fold-expression
                                                                                 ↳ 348: '(' cast-expression                                                             fold-operator "..." ')'
                                                                                            ↳ 124: unary-expression
                                                                                                   ↳ 1130: postfix-expression
                                                                                                           ↳ 860: primary-expression
                                                                                                                  ↳ 886: id-expression
                                                                                                                         ↳ 463: unqualified-id
                                                                                                                                ↳ 1158: '~' type-name
                                                                                                                                            ↳ 1092: class-name
                                                                                                                                                    ↳ 145: • IDENTIFIER
  Second example: declarator "requires" '(' '~' • IDENTIFIER '(' ')' fold-operator "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                  function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                        fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression
                                                                                                          ↳ 1131: unary-operator cast-expression
                                                                                                                  ↳ 1147: '~' •  ↳ 124: unary-expression
                                                                                                                                        ↳ 1130: postfix-expression
                                                                                                                                                ↳ 865: simple-type-specifier      '(' ')'
                                                                                                                                                       ↳ 1005: template-name
                                                                                                                                                               ↳ 1066: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token "decltype" [-Wcounterexamples]
  First example: declarator "requires" '(' '~' • "decltype" '(' expression ')' fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                           function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: fold-expression
                                                                                 ↳ 348: '(' cast-expression                                                                        fold-operator "..." ')'
                                                                                            ↳ 124: unary-expression
                                                                                                   ↳ 1130: postfix-expression
                                                                                                           ↳ 860: primary-expression
                                                                                                                  ↳ 886: id-expression
                                                                                                                         ↳ 463: unqualified-id
                                                                                                                                ↳ 1159: '~' decltype-specifier
                                                                                                                                            ↳ 233: • "decltype" '(' expression ')'
  Second example: declarator "requires" '(' '~' • "decltype" '(' expression ')' '(' ')' fold-operator "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                                    function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                                          fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression
                                                                                                          ↳ 1131: unary-operator cast-expression
                                                                                                                  ↳ 1147: '~' •  ↳ 124: unary-expression
                                                                                                                                        ↳ 1130: postfix-expression
                                                                                                                                                ↳ 865: simple-type-specifier                        '(' ')'
                                                                                                                                                       ↳ 1002: decltype-specifier
                                                                                                                                                               ↳ 233: "decltype" '(' expression ')'
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: declarator "requires" '(' '~' • IDENTIFIER fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: fold-expression
                                                                                 ↳ 348: '(' cast-expression                                                             fold-operator "..." ')'
                                                                                            ↳ 124: unary-expression
                                                                                                   ↳ 1130: postfix-expression
                                                                                                           ↳ 860: primary-expression
                                                                                                                  ↳ 886: id-expression
                                                                                                                         ↳ 463: unqualified-id
                                                                                                                                ↳ 1158: '~' type-name
                                                                                                                                            ↳ 1093: enum-name
                                                                                                                                                    ↳ 297: • IDENTIFIER
  Second example: declarator "requires" '(' '~' • IDENTIFIER '(' ')' fold-operator "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                  function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                        fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression
                                                                                                          ↳ 1131: unary-operator cast-expression
                                                                                                                  ↳ 1147: '~' •  ↳ 124: unary-expression
                                                                                                                                        ↳ 1130: postfix-expression
                                                                                                                                                ↳ 865: simple-type-specifier      '(' ')'
                                                                                                                                                       ↳ 1005: template-name
                                                                                                                                                               ↳ 1066: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: declarator "requires" '(' '~' • IDENTIFIER '<' '>' fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                       function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: fold-expression
                                                                                 ↳ 348: '(' cast-expression                                                                                    fold-operator "..." ')'
                                                                                            ↳ 124: unary-expression
                                                                                                   ↳ 1130: postfix-expression
                                                                                                           ↳ 860: primary-expression
                                                                                                                  ↳ 886: id-expression
                                                                                                                         ↳ 463: unqualified-id
                                                                                                                                ↳ 1158: '~' type-name
                                                                                                                                            ↳ 1092: class-name
                                                                                                                                                    ↳ 146: simple-template-id
                                                                                                                                                           ↳ 997: template-name        '<' '>'
                                                                                                                                                                  ↳ 1066: • IDENTIFIER
  Second example: declarator "requires" '(' '~' • IDENTIFIER '(' ')' fold-operator "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                  function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                        fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression
                                                                                                          ↳ 1131: unary-operator cast-expression
                                                                                                                  ↳ 1147: '~' •  ↳ 124: unary-expression
                                                                                                                                        ↳ 1130: postfix-expression
                                                                                                                                                ↳ 865: simple-type-specifier      '(' ')'
                                                                                                                                                       ↳ 1005: template-name
                                                                                                                                                               ↳ 1066: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: declarator "requires" '(' '~' • IDENTIFIER fold-operator "..." ')' function-body $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                      $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                 function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: fold-expression
                                                                                 ↳ 348: '(' cast-expression                                                              fold-operator "..." ')'
                                                                                            ↳ 124: unary-expression
                                                                                                   ↳ 1130: postfix-expression
                                                                                                           ↳ 860: primary-expression
                                                                                                                  ↳ 886: id-expression
                                                                                                                         ↳ 463: unqualified-id
                                                                                                                                ↳ 1158: '~' type-name
                                                                                                                                            ↳ 1094: typedef-name
                                                                                                                                                    ↳ 1124: • IDENTIFIER
  Second example: declarator "requires" '(' '~' • IDENTIFIER '(' ')' fold-operator "..." ')' function-body $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 215: function-definition
                               ↳ 407: declarator requires-clause                                                                                                                                                  function-body
                                                 ↳ 943: "requires" constraint-logical-or-expression
                                                                   ↳ 175: constraint-logical-and-expression
                                                                          ↳ 173: primary-expression
                                                                                 ↳ 888: fold-expression
                                                                                        ↳ 348: '(' cast-expression                                                                        fold-operator "..." ')'
                                                                                                   ↳ 124: unary-expression
                                                                                                          ↳ 1131: unary-operator cast-expression
                                                                                                                  ↳ 1147: '~' •  ↳ 124: unary-expression
                                                                                                                                        ↳ 1130: postfix-expression
                                                                                                                                                ↳ 865: simple-type-specifier      '(' ')'
                                                                                                                                                       ↳ 1005: template-name
                                                                                                                                                               ↳ 1066: IDENTIFIER
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "template" '<' template-parameter-list "requires" binary-literal • IDENTIFIER requires-clause declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                           $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                    declaration
                                       ↳ 1060: "template" '<' template-parameter-list requires-clause                                                                                   requires-clause
                                                                                      ↳ 943: "requires" constraint-logical-or-expression
                                                                                                        ↳ 175: constraint-logical-and-expression
                                                                                                               ↳ 173: primary-expression
                                                                                                                      ↳ 883: literal
                                                                                                                             ↳ 564: user-defined-literal
                                                                                                                                    ↳ 1173: user-defined-integer-literal
                                                                                                                                            ↳ 1172: binary-literal ud-suffix
                                                                                                                                                                   ↳ 1129: • IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" binary-literal • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                         $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                            declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                       ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                           ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                          ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 883: literal
                                                                                                                                 ↳ 558: integer-literal
                                                                                                                                        ↳ 489: binary-literal •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "template" '<' template-parameter-list "requires" character-literal • IDENTIFIER requires-clause declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                       declaration
                                       ↳ 1060: "template" '<' template-parameter-list requires-clause                                                                                      requires-clause
                                                                                      ↳ 943: "requires" constraint-logical-or-expression
                                                                                                        ↳ 175: constraint-logical-and-expression
                                                                                                               ↳ 173: primary-expression
                                                                                                                      ↳ 883: literal
                                                                                                                             ↳ 564: user-defined-literal
                                                                                                                                    ↳ 1176: user-defined-character-literal
                                                                                                                                            ↳ 1163: character-literal ud-suffix
                                                                                                                                                                      ↳ 1129: • IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" character-literal • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                     $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                        declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                   ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                       ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                      ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 883: literal
                                                                                                                                 ↳ 559: character-literal •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "template" '<' template-parameter-list "requires" decimal-literal • IDENTIFIER requires-clause declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                            $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                     declaration
                                       ↳ 1060: "template" '<' template-parameter-list requires-clause                                                                                    requires-clause
                                                                                      ↳ 943: "requires" constraint-logical-or-expression
                                                                                                        ↳ 175: constraint-logical-and-expression
                                                                                                               ↳ 173: primary-expression
                                                                                                                      ↳ 883: literal
                                                                                                                             ↳ 564: user-defined-literal
                                                                                                                                    ↳ 1173: user-defined-integer-literal
                                                                                                                                            ↳ 1169: decimal-literal ud-suffix
                                                                                                                                                                    ↳ 1129: • IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" decimal-literal • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                             declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                        ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                            ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                           ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 883: literal
                                                                                                                                 ↳ 558: integer-literal
                                                                                                                                        ↳ 493: decimal-literal •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "template" '<' template-parameter-list "requires" fractional-constant • IDENTIFIER requires-clause declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                         declaration
                                       ↳ 1060: "template" '<' template-parameter-list requires-clause                                                                                        requires-clause
                                                                                      ↳ 943: "requires" constraint-logical-or-expression
                                                                                                        ↳ 175: constraint-logical-and-expression
                                                                                                               ↳ 173: primary-expression
                                                                                                                      ↳ 883: literal
                                                                                                                             ↳ 564: user-defined-literal
                                                                                                                                    ↳ 1174: user-defined-floating-point-literal
                                                                                                                                            ↳ 1164: fractional-constant ud-suffix
                                                                                                                                                                        ↳ 1129: • IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" fractional-constant • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                                       $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                          declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                                     ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                         ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                                        ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 883: literal
                                                                                                                                 ↳ 560: floating-point-literal
                                                                                                                                        ↳ 342: decimal-floating-point-literal
                                                                                                                                               ↳ 192: fractional-constant •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "template" '<' template-parameter-list "requires" hexadecimal-literal • IDENTIFIER requires-clause declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                         declaration
                                       ↳ 1060: "template" '<' template-parameter-list requires-clause                                                                                        requires-clause
                                                                                      ↳ 943: "requires" constraint-logical-or-expression
                                                                                                        ↳ 175: constraint-logical-and-expression
                                                                                                               ↳ 173: primary-expression
                                                                                                                      ↳ 883: literal
                                                                                                                             ↳ 564: user-defined-literal
                                                                                                                                    ↳ 1173: user-defined-integer-literal
                                                                                                                                            ↳ 1171: hexadecimal-literal ud-suffix
                                                                                                                                                                        ↳ 1129: • IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" hexadecimal-literal • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                 declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                            ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                                ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                               ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 883: literal
                                                                                                                                 ↳ 558: integer-literal
                                                                                                                                        ↳ 495: hexadecimal-literal •
cplusplus.y: warning: shift/reduce conflict on token IDENTIFIER [-Wcounterexamples]
  First example: "template" '<' template-parameter-list "requires" octal-literal • IDENTIFIER requires-clause declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                          $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                   declaration
                                       ↳ 1060: "template" '<' template-parameter-list requires-clause                                                                                  requires-clause
                                                                                      ↳ 943: "requires" constraint-logical-or-expression
                                                                                                        ↳ 175: constraint-logical-and-expression
                                                                                                               ↳ 173: primary-expression
                                                                                                                      ↳ 883: literal
                                                                                                                             ↳ 564: user-defined-literal
                                                                                                                                    ↳ 1173: user-defined-integer-literal
                                                                                                                                            ↳ 1170: octal-literal ud-suffix
                                                                                                                                                                  ↳ 1129: • IDENTIFIER
  Second example: "template" '<' template-parameter-list '>' "requires" octal-literal • IDENTIFIER '(' parameter-declaration-clause ')' "->" simple-template-id ';' $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                           declaration
                                       ↳ 1060: "template" '<' template-parameter-list '>' requires-clause                                                      ↳ 217: deduction-guide
                                                                                          ↳ 943: "requires" constraint-logical-or-expression                          ↳ 235: template-name      '(' parameter-declaration-clause ')' "->" simple-template-id ';'
                                                                                                            ↳ 175: constraint-logical-and-expression                         ↳ 1066: IDENTIFIER
                                                                                                                   ↳ 173: primary-expression
                                                                                                                          ↳ 883: literal
                                                                                                                                 ↳ 558: integer-literal
                                                                                                                                        ↳ 491: octal-literal •
cplusplus.y: warning: shift/reduce conflict on token '>' [-Wcounterexamples]
  First example: "template" '<' decl-specifier-seq '=' relational-expression • '>' compare-expression assignment-operator initializer-clause '>' declaration $end
  Shift derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                                                                              $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                                                                       declaration
                                       ↳ 1059: "template" '<' template-parameter-list                                                                                                                                                                  '>'
                                                              ↳ 1069: parameter-declaration
                                                                      ↳ 823: decl-specifier-seq '=' initializer-clause
                                                                                                    ↳ 483: assignment-expression
                                                                                                           ↳ 26: logical-or-expression                                                                          assignment-operator initializer-clause
                                                                                                                 ↳ 569: logical-and-expression
                                                                                                                        ↳ 567: inclusive-or-expression
                                                                                                                               ↳ 467: exclusive-or-expression
                                                                                                                                      ↳ 320: and-expression
                                                                                                                                             ↳ 19: equality-expression
                                                                                                                                                   ↳ 307: relational-expression
                                                                                                                                                          ↳ 932: relational-expression • '>' compare-expression
  Second example: "template" '<' decl-specifier-seq '=' relational-expression • '>' declaration $end
  Reduce derivation
    $accept
    ↳ 0: translation-unit                                                                                                                                                                                        $end
         ↳ 1074: declaration-seq
                 ↳ 226: declaration
                        ↳ 216: template-declaration
                               ↳ 1057: template-head                                                                                                                                                 declaration
                                       ↳ 1059: "template" '<' template-parameter-list                                                                                                            '>'
                                                              ↳ 1069: template-parameter
                                                                      ↳ 1068: parameter-declaration
                                                                              ↳ 823: decl-specifier-seq '=' initializer-clause
                                                                                                            ↳ 483: assignment-expression
                                                                                                                   ↳ 23: conditional-expression
                                                                                                                         ↳ 169: logical-or-expression
                                                                                                                                ↳ 569: logical-and-expression
                                                                                                                                       ↳ 567: inclusive-or-expression
                                                                                                                                              ↳ 467: exclusive-or-expression
                                                                                                                                                     ↳ 320: and-expression
                                                                                                                                                            ↳ 19: equality-expression
                                                                                                                                                                  ↳ 307: relational-expression •
cplusplus.y: warning: shift/reduce conflict on token '(' [-Wcounterexamples]
